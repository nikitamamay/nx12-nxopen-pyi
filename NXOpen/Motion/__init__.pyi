# module 'NXOpen.Motion'
#
# Automatically generated 2025-06-09T14:38:47.050042
#
"""Default documentation for NXOpen.Motion."""

import typing

import NXOpen
import NXOpen.Assemblies
import NXOpen.CAE
import NXOpen.CAE.FTK
import NXOpen.Fields
import NXOpen.GeometricUtilities



def _handle_import() -> None:
    """internal method to handle importing an NXOpen Python module"""
    ...


class DriverMultiOperations(NXOpen.TaggedObject):
    """
    Represents a :py:class:`NXOpen.Motion.DriverMultiOperations`   
    
    .. versionadded:: NX6.0.0
    """
    MotionEulerAngle1: DriverOperation = ...
    """
    Returns  the motion motion euler angle1, it is for revolute joint and cylindrical joint 
    
    <hr>
    
    Getter Method
    
    Signature ``MotionEulerAngle1`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.DriverOperation` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    MotionPointOnCurve: DriverOperation = ...
    """
    Returns  the motion point on curve, it is for point on curve constraint 
    
    <hr>
    
    Getter Method
    
    Signature ``MotionPointOnCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.DriverOperation` 
    
    .. versionadded:: NX6.0.1
    
    License requirements: None.
    """
    MotionTranslationZ: DriverOperation = ...
    """
    Returns  the motion translation z, it is for slider joint and cylindrical joint 
    
    <hr>
    
    Getter Method
    
    Signature ``MotionTranslationZ`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.DriverOperation` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: DriverMultiOperations = ...  # unknown typename


class SelectTirePropertyCd(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a single object selection.  
    
    .. versionadded:: NX5.0.0
    """
    
    @typing.overload
    def SetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def SetValue(self, selection: TirePropertyCd) -> None:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.TirePropertyCd` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: TirePropertyCd) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.TirePropertyCd` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: TirePropertyCd, view: NXOpen.View, point: NXOpen.Point3d) -> None:
        """
        The object being selected with the object's view and object's point
        
        Signature ``SetValue(selection, view, point)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.TirePropertyCd` 
        :param view:  selected object view 
        :type view: :py:class:`NXOpen.View` 
        :param point:  selected object point 
        :type point: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, snapType: NXOpen.InferSnapTypeSnapType, selection1: TirePropertyCd, view1: NXOpen.View, point1: NXOpen.Point3d, selection2: TirePropertyCd, view2: NXOpen.View, point2: NXOpen.Point3d) -> None:
        """
        The object being selected with the objects view and objects point and snap information.
        
        Signature ``SetValue(snapType, selection1, view1, point1, selection2, view2, point2)`` 
        
        :param snapType:   snap point type 
        :type snapType: :py:class:`NXOpen.InferSnapTypeSnapType` 
        :param selection1:  first selected object  
        :type selection1: :py:class:`NXOpen.Motion.TirePropertyCd` 
        :param view1:  first selected object view 
        :type view1: :py:class:`NXOpen.View` 
        :param point1:  first selected object point 
        :type point1: :py:class:`NXOpen.Point3d` 
        :param selection2:  second selected object  
        :type selection2: :py:class:`NXOpen.Motion.TirePropertyCd` 
        :param view2:  second selected object view 
        :type view2: :py:class:`NXOpen.View` 
        :param point2:  second selected object point 
        :type point2: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: TirePropertyCd, caeSubType: NXOpen.CaeObjectTypeCaeSubType, caeSubId: int) -> None:
        """
        The object being selected with CAE set object information.
        
        Signature ``SetValue(selection, caeSubType, caeSubId)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.TirePropertyCd` 
        :param caeSubType:  CAE set object sub type 
        :type caeSubType: :py:class:`NXOpen.CaeObjectTypeCaeSubType` 
        :param caeSubId:  CAE set object sub id 
        :type caeSubId: int 
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.SetValue`.
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def GetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def GetValue(self) -> TirePropertyCd:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :returns:  selected object  
        :rtype: :py:class:`NXOpen.Motion.TirePropertyCd` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self, selection: TirePropertyCd) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.TirePropertyCd` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the object's view and point.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, view, point). selection is a :py:class:`NXOpen.Motion.TirePropertyCd`.   selected object view is a :py:class:`NXOpen.View`.   selected object viewpoint is a :py:class:`NXOpen.Point3d`.   selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the objects view and point and snap information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (snapType, selection1, view1, point1, selection2, view2, point2). snapType is a :py:class:`NXOpen.InferSnapTypeSnapType`.    snap point typeselection1 is a :py:class:`NXOpen.Motion.TirePropertyCd`.   first selected object view1 is a :py:class:`NXOpen.View`.   first selected object viewpoint1 is a :py:class:`NXOpen.Point3d`.   first selected object pointselection2 is a :py:class:`NXOpen.Motion.TirePropertyCd`.   second selected object view2 is a :py:class:`NXOpen.View`.   second selected object viewpoint2 is a :py:class:`NXOpen.Point3d`.   second selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with CAE set object information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, caeSubType, caeSubId). selection is a :py:class:`NXOpen.Motion.TirePropertyCd`.   selected object caeSubType is a :py:class:`NXOpen.CaeObjectTypeCaeSubType`.   CAE set object sub typecaeSubId is a int.   CAE set object sub id
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.GetValue`.
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Value: TirePropertyCd = ...
    """
    Returns or sets  the object being selected
    
    <hr>
    
    Getter Method
    
    Signature ``Value`` 
    
    :returns:  selected object  
    :rtype: :py:class:`NXOpen.Motion.TirePropertyCd` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Value`` 
    
    :param selection:  selected object  
    :type selection: :py:class:`NXOpen.Motion.TirePropertyCd` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SelectTirePropertyCd = ...  # unknown typename


class ConfigurationParameter(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`Motion.ConfigurationParameter`.  
    
    This class
    contains the port association for the output of a mechatronics element 
    No KF support
    
    .. versionadded:: NX11.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Name: str = ...
    """
    Returns  the name 
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: ConfigurationParameter = ...  # unknown typename


class MotionBuilder(NXOpen.Builder):
    """
    This builder class is used to create or edit :py:class:`NXOpen.Motion.MotionObject`   
    
    This is an abstract class, and cannot be created.
    
    .. versionadded:: NX5.0.0
    """
    DisplayScale: float = ...
    """
    Returns or sets   the icon display scale 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayScale`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayScale`` 
    
    :param displayScale: 
    :type displayScale: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    GroupName: str = ...
    """
    Returns or sets   the group name 
    
    <hr>
    
    Getter Method
    
    Signature ``GroupName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``GroupName`` 
    
    :param groupName: 
    :type groupName: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    GroupType: MotionObjectGroupType = ...
    """
    Returns or sets   the group type 
    
    <hr>
    
    Getter Method
    
    Signature ``GroupType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.MotionObjectGroupType` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``GroupType`` 
    
    :param groupType: 
    :type groupType: :py:class:`NXOpen.Motion.MotionObjectGroupType` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: MotionBuilder = ...  # unknown typename


class SplineBeamBuilderDefinitionMethodTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SplineBeamBuilderDefinitionMethodType():
    """
    the definition method type
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Manual", "Manual"
       "Curve", "Curve"
    """
    Manual = 0  # SplineBeamBuilderDefinitionMethodTypeMemberType
    Curve = 1  # SplineBeamBuilderDefinitionMethodTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SplineBeamBuilderSectionAxisTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SplineBeamBuilderSectionAxisType():
    """
    the definition of the section axis type
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Y", "Y Vector"
       "Z", "Z Vector"
    """
    Y = 0  # SplineBeamBuilderSectionAxisTypeMemberType
    Z = 1  # SplineBeamBuilderSectionAxisTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SplineBeamBuilder(MotionBuilder):
    """
    Represents a :py:class:`Motion.SplineBeamBuilder` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.SplineBeamCollection.CreateSplineBeamBuilder`
    
    Default values.
    
    =======================  =======
    Property                 Value
    =======================  =======
    DefinitionMethod         Manual 
    -----------------------  -------
    NumberOfSections.Value   1 
    =======================  =======
    
    .. versionadded:: NX12.0.0
    """
    
    class DefinitionMethodType():
        """
        the definition method type
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Manual", "Manual"
           "Curve", "Curve"
        """
        Manual = 0  # SplineBeamBuilderDefinitionMethodTypeMemberType
        Curve = 1  # SplineBeamBuilderDefinitionMethodTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SectionAxisType():
        """
        the definition of the section axis type
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Y", "Y Vector"
           "Z", "Z Vector"
        """
        Y = 0  # SplineBeamBuilderSectionAxisTypeMemberType
        Z = 1  # SplineBeamBuilderSectionAxisTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def InsertEmptyPoint(self, index: int) -> None:
        """
        Inserts an empty point to a location 
        
        Signature ``InsertEmptyPoint(index)`` 
        
        :param index: 
        :type index: int 
        
        .. versionadded:: NX12.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def AssignPoint(self, index: int, point: NXOpen.Point) -> None:
        """
        Assigns a point 
        
        Signature ``AssignPoint(index, point)`` 
        
        :param index: 
        :type index: int 
        :param point: 
        :type point: :py:class:`NXOpen.Point` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def RemovePoint(self, index: int) -> None:
        """
        Removes a point 
        
        Signature ``RemovePoint(index)`` 
        
        :param index: 
        :type index: int 
        
        .. versionadded:: NX12.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def SwapPoints(self, index1: int, index2: int) -> None:
        """
        Swaps two points 
        
        Signature ``SwapPoints(index1, index2)`` 
        
        :param index1: 
        :type index1: int 
        :param index2: 
        :type index2: int 
        
        .. versionadded:: NX12.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def GeneratePoints(self) -> None:
        """
        Generates the points 
        
        Signature ``GeneratePoints()`` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def ImportPointsFromFile(self, filePath: str) -> None:
        """
        Imports the points from an external file.  
        
        Allowed file types are .txt and Excel files
        
        Signature ``ImportPointsFromFile(filePath)`` 
        
        :param filePath: 
        :type filePath: str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def ExportPointsToFile(self, filePath: str) -> None:
        """
        Exports the points to an external file.  
        
        Allowed file types are .txt and Excel files
        
        Signature ``ExportPointsToFile(filePath)`` 
        
        :param filePath: 
        :type filePath: str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def GetMarkerItems(self) -> 'list[MarkerToNodeData]':
        """
        Gets marker to node list Items  
        
        Signature ``GetMarkerItems()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Motion.MarkerToNodeData` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def RemoveAllMarkers(self) -> None:
        """
        Removes all markers 
        
        Signature ``RemoveAllMarkers()`` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def CreateMarkerToNode(self, marker: NXOpen.NXObject, markerPosition: int, pointID: int, useClosestNode: bool) -> MarkerToNodeData:
        """
        Creates a new list item  
        
        Signature ``CreateMarkerToNode(marker, markerPosition, pointID, useClosestNode)`` 
        
        :param marker:  The marker tag 
        :type marker: :py:class:`NXOpen.NXObject` 
        :param markerPosition:  The i or j marker identity 
        :type markerPosition: int 
        :param pointID:  The point ID  
        :type pointID: int 
        :param useClosestNode:  Whether to move the node  
        :type useClosestNode: bool 
        :returns: 
        :rtype: :py:class:`NXOpen.Motion.MarkerToNodeData` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    Curves: NXOpen.SelectCurveList = ...
    """
    Returns  the optional curves object 
    
    <hr>
    
    Getter Method
    
    Signature ``Curves`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectCurveList` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    DefinitionMethod: SplineBeamBuilderDefinitionMethodType = ...
    """
    Returns or sets  the definition method 
    
    <hr>
    
    Getter Method
    
    Signature ``DefinitionMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SplineBeamBuilderDefinitionMethodType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``DefinitionMethod`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Motion.SplineBeamBuilderDefinitionMethodType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Link: SelectLink = ...
    """
    Returns  the link object 
    
    <hr>
    
    Getter Method
    
    Signature ``Link`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectLink` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Name: str = ...
    """
    Returns or sets  the name of the spline beam object 
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    NumberOfSections: NXOpen.Expression = ...
    """
    Returns  the number of sections 
    
    <hr>
    
    Getter Method
    
    Signature ``NumberOfSections`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    PointList: NXOpen.PointList = ...
    """
    Returns  the list of points 
    
    <hr>
    
    Getter Method
    
    Signature ``PointList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.PointList` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SectionAxis: SplineBeamBuilderSectionAxisType = ...
    """
    Returns or sets  the section orientation axis type 
    
    <hr>
    
    Getter Method
    
    Signature ``SectionAxis`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SplineBeamBuilderSectionAxisType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``SectionAxis`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Motion.SplineBeamBuilderSectionAxisType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SectionShape: SelectBaseSection = ...
    """
    Returns  the section shape 
    
    <hr>
    
    Getter Method
    
    Signature ``SectionShape`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectBaseSection` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SectionVector: NXOpen.Direction = ...
    """
    Returns or sets  the section orientation vector 
    
    <hr>
    
    Getter Method
    
    Signature ``SectionVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``SectionVector`` 
    
    :param vector: 
    :type vector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    StructuralProperty: SelectSplineBeamProperty = ...
    """
    Returns  the structural property 
    
    <hr>
    
    Getter Method
    
    Signature ``StructuralProperty`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectSplineBeamProperty` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Tolerance: NXOpen.Expression = ...
    """
    Returns  the tolerance 
    
    <hr>
    
    Getter Method
    
    Signature ``Tolerance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: SplineBeamBuilder = ...  # unknown typename


class MotionObjectGroupTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MotionObjectGroupType():
    """
    The group type attribute is used for import subassembly functionality. When import subassembly's 
    mechanism, there will be a group node on the navigator, the motion objects which are automatically created 
    by import subassembly's mechanism functionality will all appear under the group node. In this suitation, 
    the motion objects' group type is :py:class:`Motion.MotionObjectGroupType.Import <Motion.MotionObjectGroupType>`.
    The group name attribute is for the name of group node.  
    
    Otherwise, the motion object (for instance a link) which is created by manual (by NX link UI) will appear 
    without under any import group node. In this suitation, the motion object's group type is 
    :py:class:`Motion.MotionObjectGroupType.None <Motion.MotionObjectGroupType>`. The group name is None 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "Motion object dose not belong to any motion group"
       "Import", "Motion object belongs to motion import group"
    """
    NotSet = 0  # MotionObjectGroupTypeMemberType
    Import = 1  # MotionObjectGroupTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MotionObject(NXOpen.DisplayableObject):
    """
    Represents the motion base object class.  
    
    This is an abstract class, and cannot be created.
    
    .. versionadded:: NX5.0.0
    """
    
    class GroupType():
        """
        The group type attribute is used for import subassembly functionality. When import subassembly's 
        mechanism, there will be a group node on the navigator, the motion objects which are automatically created 
        by import subassembly's mechanism functionality will all appear under the group node. In this suitation, 
        the motion objects' group type is :py:class:`Motion.MotionObjectGroupType.Import <Motion.MotionObjectGroupType>`.
        The group name attribute is for the name of group node.  
        
        Otherwise, the motion object (for instance a link) which is created by manual (by NX link UI) will appear 
        without under any import group node. In this suitation, the motion object's group type is 
        :py:class:`Motion.MotionObjectGroupType.None <Motion.MotionObjectGroupType>`. The group name is None 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "Motion object dose not belong to any motion group"
           "Import", "Motion object belongs to motion import group"
        """
        NotSet = 0  # MotionObjectGroupTypeMemberType
        Import = 1  # MotionObjectGroupTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    DisplayScale: float = ...
    """
    Returns or sets  the display scale factor 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayScale`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayScale`` 
    
    :param displayScale: 
    :type displayScale: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    GroupName: str = ...
    """
    Returns or sets  the group name of motion object 
    
    <hr>
    
    Getter Method
    
    Signature ``GroupName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``GroupName`` 
    
    :param groupName: 
    :type groupName: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    GroupTypeOption: MotionObjectGroupType = ...
    """
    Returns or sets  the group type of motion object 
    
    <hr>
    
    Getter Method
    
    Signature ``GroupTypeOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.MotionObjectGroupType` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``GroupTypeOption`` 
    
    :param groupType: 
    :type groupType: :py:class:`NXOpen.Motion.MotionObjectGroupType` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: MotionObject = ...  # unknown typename


class IGraphSource():
    """
    Represents an interface IGraphSource   
    
    .. versionadded:: NX11.0.0
    """
    Null = ...  # unknown typename: InterfaceIdentifier


class PointOnCurve(MotionObject, IGraphSource):
    """
    Represents a point on curve   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Motion.PointOnCurveBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: PointOnCurve = ...  # unknown typename


class TireCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of motion tire elements   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Motion.MotionManager`
    
    .. versionadded:: NX11.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateTireBuilder(self, tire: Tire) -> TireBuilder:
        """
        Return  :py:class:`NXOpen.Motion.TireBuilder` object   
        
        Signature ``CreateTireBuilder(tire)`` 
        
        :param tire:  :py:class:`NXOpen.Motion.TireBuilder`                                                                       to be edited, if None then create a new one  
        :type tire: :py:class:`NXOpen.Motion.Tire` 
        :returns:  TireBuilder object  
        :rtype: :py:class:`NXOpen.Motion.TireBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def FindObject(self, name: str) -> Tire:
        """
        Finds the :py:class:`NXOpen.Motion.Tire` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  the object name  
        :type name: str 
        :returns:  the object pointer  
        :rtype: :py:class:`NXOpen.Motion.Tire` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    


class AdamsSolverProperty(NXOpen.TaggedObject):
    """
    Represents a :py:class:`NXOpen.Motion.AdamsSolverProperty`   
    
    .. versionadded:: NX5.0.0
    """
    MaxIteration: int = ...
    """
    Returns or sets  the max iteration 
    
    <hr>
    
    Getter Method
    
    Signature ``MaxIteration`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MaxIteration`` 
    
    :param maxIteration: 
    :type maxIteration: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    MaxKinematicIteration: int = ...
    """
    Returns or sets  the max kinematic iteration 
    
    <hr>
    
    Getter Method
    
    Signature ``MaxKinematicIteration`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MaxKinematicIteration`` 
    
    :param maxKinematicIteration: 
    :type maxKinematicIteration: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    MaxSolverErrorExpression: NXOpen.Expression = ...
    """
    Returns  the max solver error expression
    
    <hr>
    
    Getter Method
    
    Signature ``MaxSolverErrorExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    MaxStaticIteration: int = ...
    """
    Returns or sets  the max static iteration 
    
    <hr>
    
    Getter Method
    
    Signature ``MaxStaticIteration`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MaxStaticIteration`` 
    
    :param maxStaticIteration: 
    :type maxStaticIteration: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    MaxStepSizeExpression: NXOpen.Expression = ...
    """
    Returns  the max step size expression
    
    <hr>
    
    Getter Method
    
    Signature ``MaxStepSizeExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: AdamsSolverProperty = ...  # unknown typename


class AdoptionPairCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of adoption pair objects   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Motion.MotionManager`
    
    .. versionadded:: NX11.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreatePair(self, source: NXOpen.NXObject, adoption: MotionObject) -> AdoptionPair:
        """
        Creates a :py:class:`NXOpen.Motion.AdoptionPair`  
        
        Signature ``CreatePair(source, adoption)`` 
        
        :param source: 
        :type source: :py:class:`NXOpen.NXObject` 
        :param adoption: 
        :type adoption: :py:class:`NXOpen.Motion.MotionObject` 
        :returns:  GraphBuilder object  
        :rtype: :py:class:`NXOpen.Motion.AdoptionPair` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def FindObject(self, name: str) -> AdoptionPair:
        """
        Finds the :py:class:`NXOpen.Motion.AdoptionPair` object with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  Name of the Adoption Pair object.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Motion.AdoptionPair` object with this name.  
        :rtype: :py:class:`NXOpen.Motion.AdoptionPair` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    


class ScalarForceBuilderApplicationTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ScalarForceBuilderApplicationType():
    """
    the application type. Each application type has a specific application associated. A Scalar Force is invalid without the type of application
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "ActionReaction", "for Action-Reaction Appplication type"
       "ActionOnly", "for Action Only Appplication type"
    """
    ActionReaction = 0  # ScalarForceBuilderApplicationTypeMemberType
    ActionOnly = 1  # ScalarForceBuilderApplicationTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ScalarForceBuilderDirectionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ScalarForceBuilderDirectionType():
    """
    the Direction type.
    Each direction type has a specific direction associated. A Scalar Force is invalid without a direction associated.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Translational", "for Translational direction"
       "X", "for X direction"
       "Y", "for Y dircetion"
       "Z", "for Z direction"
    """
    Translational = 0  # ScalarForceBuilderDirectionTypeMemberType
    X = 1  # ScalarForceBuilderDirectionTypeMemberType
    Y = 2  # ScalarForceBuilderDirectionTypeMemberType
    Z = 3  # ScalarForceBuilderDirectionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ScalarForceBuilder(MotionBuilder):
    """
    Represents a :py:class:`NXOpen.Motion.ScalarForceBuilder`  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.ScalarForceCollection.CreateScalarForceBuilder`
    
    .. versionadded:: NX6.0.0
    """
    
    class ApplicationType():
        """
        the application type. Each application type has a specific application associated. A Scalar Force is invalid without the type of application
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "ActionReaction", "for Action-Reaction Appplication type"
           "ActionOnly", "for Action Only Appplication type"
        """
        ActionReaction = 0  # ScalarForceBuilderApplicationTypeMemberType
        ActionOnly = 1  # ScalarForceBuilderApplicationTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DirectionType():
        """
        the Direction type.
        Each direction type has a specific direction associated. A Scalar Force is invalid without a direction associated.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Translational", "for Translational direction"
           "X", "for X direction"
           "Y", "for Y dircetion"
           "Z", "for Z direction"
        """
        Translational = 0  # ScalarForceBuilderDirectionTypeMemberType
        X = 1  # ScalarForceBuilderDirectionTypeMemberType
        Y = 2  # ScalarForceBuilderDirectionTypeMemberType
        Z = 3  # ScalarForceBuilderDirectionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    ActionCsys: NXOpen.CoordinateSystem = ...
    """
    Returns or sets  the action csys 
    
    <hr>
    
    Getter Method
    
    Signature ``ActionCsys`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ActionCsys`` 
    
    :param actionCsys: 
    :type actionCsys: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ActionLink: SelectLink = ...
    """
    Returns  the action link 
    
    <hr>
    
    Getter Method
    
    Signature ``ActionLink`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectLink` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ActionPoint: NXOpen.Point = ...
    """
    Returns or sets  the action point 
    
    <hr>
    
    Getter Method
    
    Signature ``ActionPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ActionPoint`` 
    
    :param actionPoint: 
    :type actionPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Applicationtype: ScalarForceBuilderApplicationType = ...
    """
    Returns or sets  the application type  
    
    <hr>
    
    Getter Method
    
    Signature ``Applicationtype`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.ScalarForceBuilderApplicationType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Applicationtype`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Motion.ScalarForceBuilderApplicationType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Direction: ScalarForceBuilderDirectionType = ...
    """
    Returns or sets  the direction  
    
    <hr>
    
    Getter Method
    
    Signature ``Direction`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.ScalarForceBuilderDirectionType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Direction`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Motion.ScalarForceBuilderDirectionType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Function: NXOpen.CAE.Function = ...
    """
    Returns or sets  the function  
    
    <hr>
    
    Getter Method
    
    Signature ``Function`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CAE.Function` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Function`` 
    
    :param function: 
    :type function: :py:class:`NXOpen.CAE.Function` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Name: str = ...
    """
    Returns or sets  the name 
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Profile: SelectFieldData = ...
    """
    Returns  the profile 
    
    <hr>
    
    Getter Method
    
    Signature ``Profile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectFieldData` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    ReactionCsys: NXOpen.CoordinateSystem = ...
    """
    Returns or sets  the reaction csys 
    
    <hr>
    
    Getter Method
    
    Signature ``ReactionCsys`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReactionCsys`` 
    
    :param reactionCsys: 
    :type reactionCsys: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ReactionLink: SelectLink = ...
    """
    Returns  the reaction link 
    
    <hr>
    
    Getter Method
    
    Signature ``ReactionLink`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectLink` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ReactionPoint: NXOpen.Point = ...
    """
    Returns or sets  the reaction point 
    
    <hr>
    
    Getter Method
    
    Signature ``ReactionPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReactionPoint`` 
    
    :param reactionPoint: 
    :type reactionPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ValueExpression: NXOpen.Expression = ...
    """
    Returns  the value expression 
    
    <hr>
    
    Getter Method
    
    Signature ``ValueExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ValueType: ForceValueTypes = ...
    """
    Returns or sets  the value type 
    
    <hr>
    
    Getter Method
    
    Signature ``ValueType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.ForceValueTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ValueType`` 
    
    :param valueType: 
    :type valueType: :py:class:`NXOpen.Motion.ForceValueTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: ScalarForceBuilder = ...  # unknown typename


class MotionSolution(NXOpen.NXObject):
    """
    Represents a solution   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Motion.MotionSolutionBuilder`
    
    .. versionadded:: NX5.0.0
    """
    
    def SolveNormalRunSolution(self) -> None:
        """
        Solve normal run solution.  
        
        If motion has not been initialized,
        call :py:meth:`NXOpen.Motion.MotionSession.InitializeSimulation` before solving. 
        
        Signature ``SolveNormalRunSolution()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def ExportMotionHostCosimMfiles(self) -> None:
        """
        Export motion host cosim mfiles
        
        Signature ``ExportMotionHostCosimMfiles()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: nx_motion_cosim ("NX Motion CoSimulation")
        """
        ...
    
    
    def EditRunsimulinkMfile(self) -> None:
        """
        Edit runsimulink mfile 
        
        Signature ``EditRunsimulinkMfile()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: nx_motion_cosim ("NX Motion CoSimulation")
        """
        ...
    
    
    def ExportSimulinkHostCosimMfiles(self) -> None:
        """
        Export simulink host cosim mfiles
        
        Signature ``ExportSimulinkHostCosimMfiles()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: nx_motion_cosim ("NX Motion CoSimulation")
        """
        ...
    
    
    def CalculateGrueblerCount(self) -> int:
        """
        Calculate gruebler count of motion solution  
        
        Signature ``CalculateGrueblerCount()`` 
        
        :returns:  The gruebler count  
        :rtype: int 
        
        .. versionadded:: NX7.5.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def AddObject(self, object: NXOpen.NXObject) -> None:
        """
        Adds a solution solved object to a solution 
        
        Signature ``AddObject(object)`` 
        
        :param object:  The solution solved object  
        :type object: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX7.5.0
        
        .. deprecated::  NX12.0.0
           Use :py:meth:`NXOpen.Motion.MotionSolution.RemoveSuppressedObject`
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def RemoveObject(self, object: NXOpen.NXObject) -> None:
        """
        Removes a solution solved object from a solution 
        
        Signature ``RemoveObject(object)`` 
        
        :param object:  The solution solved object  
        :type object: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX7.5.0
        
        .. deprecated::  NX12.0.0
           Use :py:meth:`NXOpen.Motion.MotionSolution.AddSuppressedObject`
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def AddSuppressedObject(self, object: NXOpen.NXObject) -> None:
        """
        Adds a suppressed object to a solution 
        
        Signature ``AddSuppressedObject(object)`` 
        
        :param object:  The solution suppressed object  
        :type object: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    @typing.overload
    def RemoveSuppressedObject(self, object: NXOpen.NXObject) -> None:
        """
        Removes a suppressed object from a solution 
        
        Signature ``RemoveSuppressedObject(object)`` 
        
        :param object:  The solution suppressed object  
        :type object: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    @typing.overload
    def RemoveSuppressedObject(self, motionObject: NXOpen.NXObject, forceOk: bool) -> None:
        """
        Removes a suppressed object from a solution
        Takes a flag that can be use to force ok to the dialog that could arise when conflict objects are found:
        e.g. 2 active drivers on the same joint. Using this flag as true might leave conflict objects active and an incosistent model.
        
        Signature ``RemoveSuppressedObject(motionObject, forceOk)`` 
        
        :param motionObject:  The solution suppressed object  
        :type motionObject: :py:class:`NXOpen.NXObject` 
        :param forceOk:  if true, skips verbosity when 2 conflicts object found and allow activation  
        :type forceOk: bool 
        
        .. versionadded:: NX12.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def GetIsSuppressed(self, objectTag: NXOpen.NXObject) -> bool:
        """
        Returns whether this object is suppressed or not in this solution  
        
        Signature ``GetIsSuppressed(objectTag)`` 
        
        :param objectTag:  The solution object of interest  
        :type objectTag: :py:class:`NXOpen.NXObject` 
        :returns:  True if suppress (In Active), or False if not suppressed (Active)  
        :rtype: bool 
        
        .. versionadded:: NX12.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def GetName(self) -> str:
        """
        Get name  
        
        Signature ``GetName()`` 
        
        :returns: 
        :rtype: str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def SetName(self, solutionName: str, renameResultFile: bool) -> None:
        """
        Set name 
        
        Signature ``SetName(solutionName, renameResultFile)`` 
        
        :param solutionName: 
        :type solutionName: str 
        :param renameResultFile:  if true, rename both result file and solution, otherwise, rename solution only  
        :type renameResultFile: bool 
        
        .. versionadded:: NX12.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def GetAnimationControl(self) -> AnimationControl:
        """
        Get :py:class:`NXOpen.Motion.AnimationControl` object, must be called before any other animation control operation, and 
        the finish API must be call if not use anymore  
        
        Signature ``GetAnimationControl()`` 
        
        :returns:  The :py:class:`NXOpen.Motion.AnimationControl` object  
        :rtype: :py:class:`NXOpen.Motion.AnimationControl` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def GetArticulationControl(self) -> ArticulationControl:
        """
        Get :py:class:`NXOpen.Motion.ArticulationControl` object, must be called before any other articulation control operation, and 
        the finish API must be call if not use anymore  
        
        Signature ``GetArticulationControl()`` 
        
        :returns:  The :py:class:`NXOpen.Motion.ArticulationControl` object  
        :rtype: :py:class:`NXOpen.Motion.ArticulationControl` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def GetSpreadsheetRunControl(self, spreadsheetName: str) -> SpreadsheetRunControl:
        """
        Get :py:class:`NXOpen.Motion.SpreadsheetRunControl` object, must be called before any other spreadsheet run control operation, and 
        the finish API must be call if not use anymore  
        
        Signature ``GetSpreadsheetRunControl(spreadsheetName)`` 
        
        :param spreadsheetName: 
        :type spreadsheetName: str 
        :returns:  The :py:class:`NXOpen.Motion.SpreadsheetRunControl` object  
        :rtype: :py:class:`NXOpen.Motion.SpreadsheetRunControl` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def GetLoadTransferControl(self) -> LoadTransferControl:
        """
        Get :py:class:`NXOpen.Motion.LoadTransferControl` object, must be called before any other load transfer control operation.  
        
        :py:meth:`NXOpen.Motion.LoadTransferControl.Finish` must be called after use is over.  
        
        Signature ``GetLoadTransferControl()`` 
        
        :returns:  The :py:class:`NXOpen.Motion.LoadTransferControl` object  
        :rtype: :py:class:`NXOpen.Motion.LoadTransferControl` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def GetPostToolsControl(self) -> PostToolsControl:
        """
        Get :py:class:`NXOpen.Motion.PostToolsControl` object, must be called before any other post tools control operation.  
        
        :py:meth:`NXOpen.Motion.PostToolsControl.Finish` must be called after use is over.  
        
        Signature ``GetPostToolsControl()`` 
        
        :returns:  The :py:class:`NXOpen.Motion.PostToolsControl` object  
        :rtype: :py:class:`NXOpen.Motion.PostToolsControl` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def GetGraphObjectResult(self, graph: Graph) -> tuple:
        """
        Get the result of the graph object 
        
        Signature ``GetGraphObjectResult(graph)`` 
        
        :param graph: 
        :type graph: :py:class:`NXOpen.Motion.Graph` 
        :returns: a tuple 
        :rtype: A tuple consisting of (resultPoints, unit). resultPoints is a list of float.   Need to free itunit is a :py:class:`NXOpen.Unit`. 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def SaveGraphObjectToSpreadsheet(self, xGraph: Graph, yGraphs: 'list[Graph]', showGraph: bool, writeTime: bool) -> None:
        """
        Save the result of graph to spreadsheet 
        
        Signature ``SaveGraphObjectToSpreadsheet(xGraph, yGraphs, showGraph, writeTime)`` 
        
        :param xGraph: 
        :type xGraph: :py:class:`NXOpen.Motion.Graph` 
        :param yGraphs: 
        :type yGraphs: list of :py:class:`NXOpen.Motion.Graph` 
        :param showGraph: 
        :type showGraph: bool 
        :param writeTime: 
        :type writeTime: bool 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def SaveGraphObjectToAfu(self, fileName: str, xGraph: Graph, yGraph: Graph) -> None:
        """
        Save the result of graph to afu file 
        
        Signature ``SaveGraphObjectToAfu(fileName, xGraph, yGraph)`` 
        
        :param fileName: 
        :type fileName: str 
        :param xGraph: 
        :type xGraph: :py:class:`NXOpen.Motion.Graph` 
        :param yGraph: 
        :type yGraph: :py:class:`NXOpen.Motion.Graph` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def LoadResult(self) -> None:
        """
        Load result 
        
        Signature ``LoadResult()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def ExportSolverInputFile(self) -> None:
        """
        Export solver input file for a solution 
        
        Signature ``ExportSolverInputFile()`` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    Null: MotionSolution = ...  # unknown typename


class GraphBuilderCurveData_Struct():
    """
    Contains the structure of curve associated with curve data.  
    
    .
    Constructor: 
    NXOpen.Motion.GraphBuilder.CurveData()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    MotionObject: NXOpen.NXObject = ...
    """
    Attribute object 
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.NXObject`
    """
    RequestIndex: int = ...
    """
    Attribute request choice 
    <hr>
    
    Field Value
    Type:int
    """
    ComponentIndex: int = ...
    """
    Attribute component choice 
    <hr>
    
    Field Value
    Type:int
    """
    RequestCsysIndex: int = ...
    """
    Attribute csys choice 
    <hr>
    
    Field Value
    Type:int
    """


class CurveContact(MotionObject, IGraphSource):
    """
    Represents a :py:class:`NXOpen.Motion.CurveContact`
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Motion.CurveContactBuilder`
    
    .. versionadded:: NX5.0.0
    """
    Null: CurveContact = ...  # unknown typename


class ConnectorCoefficientTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ConnectorCoefficientTypes():
    """
    Definitions of connector coefficient type  
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Constant", "constant type"
       "Spline", "spline type"
       "Profile2d", "2D profile"
       "Profile3d", "3D profile"
       "ExpressionAndSpline", "expression and function"
       "ExpressionAndProfile2d", "expression and 2D profile"
       "ExpressionAndProfile3d", "expression and 3D profile"
    """
    Constant = 0  # ConnectorCoefficientTypesMemberType
    Spline = 1  # ConnectorCoefficientTypesMemberType
    Profile2d = 2  # ConnectorCoefficientTypesMemberType
    Profile3d = 3  # ConnectorCoefficientTypesMemberType
    ExpressionAndSpline = 4  # ConnectorCoefficientTypesMemberType
    ExpressionAndProfile2d = 5  # ConnectorCoefficientTypesMemberType
    ExpressionAndProfile3d = 6  # ConnectorCoefficientTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ResultMeasureBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Motion.ResultMeasure` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.ResultMeasureCollection.CreateResultMeasureBuilder`
    
    .. versionadded:: NX11.0.0
    """
    
    def CommitResultMeasure(self) -> NXOpen.TaggedObject:
        """
        Commits the Builder, and returns the created result measure object.  
        
        Signature ``CommitResultMeasure()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.TaggedObject` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    ExpName: str = ...
    """
    Returns or sets  the expression name 
    
    <hr>
    
    Getter Method
    
    Signature ``ExpName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``ExpName`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    InterferenceType: ResultMeasureInterferenceType = ...
    """
    Returns or sets  the interference result type 
    
    <hr>
    
    Getter Method
    
    Signature ``InterferenceType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.ResultMeasureInterferenceType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``InterferenceType`` 
    
    :param interferenceType: 
    :type interferenceType: :py:class:`NXOpen.Motion.ResultMeasureInterferenceType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ReferenceObject: NXOpen.SelectNXObject = ...
    """
    Returns  the reference object 
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ResultType: ResultMeasureResultType = ...
    """
    Returns or sets  the result type 
    
    <hr>
    
    Getter Method
    
    Signature ``ResultType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.ResultMeasureResultType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``ResultType`` 
    
    :param resultType: 
    :type resultType: :py:class:`NXOpen.Motion.ResultMeasureResultType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Solution: MotionSolution = ...
    """
    Returns or sets  the solution 
    
    <hr>
    
    Getter Method
    
    Signature ``Solution`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.MotionSolution` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Solution`` 
    
    :param solution: 
    :type solution: :py:class:`NXOpen.Motion.MotionSolution` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: ResultMeasureBuilder = ...  # unknown typename


class TireProperty(MotionObject):
    """
    Tire Property element.  
    
    This is a base class for all tire properties 
    This is an abstract class, and cannot be created.
    
    .. versionadded:: NX11.0.0
    """
    
    def SaveToFile(self, filename: str) -> None:
        """
        Save tire property to text file
        
        Signature ``SaveToFile(filename)`` 
        
        :param filename: 
        :type filename: str 
        
        .. versionadded:: NX11.0.0
        
        .. deprecated::  NX12.0.0
           Use :py:meth:`MotionMethods.ExportParameters` instead.
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def LoadFromFile(self, filename: str) -> None:
        """
        Load tire property from text file
        
        Signature ``LoadFromFile(filename)`` 
        
        :param filename: 
        :type filename: str 
        
        .. versionadded:: NX11.0.0
        
        .. deprecated::  NX12.0.0
           Use :py:meth:`MotionMethods.ImportParameters` instead.
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    Null: TireProperty = ...  # unknown typename


class TirePropertyNonInertial(TireProperty):
    """
    NonInertial Tire Property element.
    
    This is an object that contains parameters needed for the Non-inertial Tire model 
    To create or edit an instance of this class, use :py:class:`NXOpen.Motion.TirePropertyNonInertialBuilder`
    
    .. versionadded:: NX11.0.0
    """
    
    def CopyParameters(self, source: TirePropertyNonInertial) -> None:
        """
        Copy parameters from another :py:class:`Motion.TirePropertyNonInertial` 
        
        Signature ``CopyParameters(source)`` 
        
        :param source: 
        :type source: :py:class:`NXOpen.Motion.TirePropertyNonInertial` 
        
        .. versionadded:: NX11.0.0
        
        .. deprecated::  NX12.0.0
           Use :py:meth:`MotionMethods.CopyParameters` instead.
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    Null: TirePropertyNonInertial = ...  # unknown typename


class FieldData(NXOpen.NXObject):
    """
    Represents a FieldData   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.FieldDataCollection.CreateFieldData`
    
    .. versionadded:: NX11.0.1
    """
    Field: NXOpen.Fields.Field = ...
    """
    Returns or sets  the field 
    
    <hr>
    
    Getter Method
    
    Signature ``Field`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Fields.Field` 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Field`` 
    
    :param field: 
    :type field: :py:class:`NXOpen.Fields.Field` 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    """
    Null: FieldData = ...  # unknown typename


class RecurdynSolverPropertyStaticIntegratorTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RecurdynSolverPropertyStaticIntegratorTypes():
    """
    Integrator type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NewtonRapson", "Newton rapson"
       "RobustNewtonRapson", "Robust newton rapson"
    """
    NewtonRapson = 0  # RecurdynSolverPropertyStaticIntegratorTypesMemberType
    RobustNewtonRapson = 1  # RecurdynSolverPropertyStaticIntegratorTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RecurdynSolverProperty(NXOpen.TaggedObject):
    """
    Represents a :py:class:`NXOpen.Motion.RecurdynSolverProperty`   
    
    .. versionadded:: NX5.0.0
    """
    
    class StaticIntegratorTypes():
        """
        Integrator type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NewtonRapson", "Newton rapson"
           "RobustNewtonRapson", "Robust newton rapson"
        """
        NewtonRapson = 0  # RecurdynSolverPropertyStaticIntegratorTypesMemberType
        RobustNewtonRapson = 1  # RecurdynSolverPropertyStaticIntegratorTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    CosimSampleTimeExpression: NXOpen.Expression = ...
    """
    Returns   the sampling time for co-simulation expression
    
    <hr>
    
    Getter Method
    
    Signature ``CosimSampleTimeExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    CosimSimModel: str = ...
    """
    Returns or sets   the simulink model for co-simulation
    
    <hr>
    
    Getter Method
    
    Signature ``CosimSimModel`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CosimSimModel`` 
    
    :param cosimSimModel: 
    :type cosimSimModel: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    DynamicErrorToleranceExpression: NXOpen.Expression = ...
    """
    Returns  the dynamic error tolerance expression
    
    <hr>
    
    Getter Method
    
    Signature ``DynamicErrorToleranceExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    DynamicInitialStepSizeExpression: NXOpen.Expression = ...
    """
    Returns  the dynamic initial step size expression
    
    <hr>
    
    Getter Method
    
    Signature ``DynamicInitialStepSizeExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    DynamicMaxKinIteration: int = ...
    """
    Returns or sets  the Maximum kinematic iteration 
    
    <hr>
    
    Getter Method
    
    Signature ``DynamicMaxKinIteration`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DynamicMaxKinIteration`` 
    
    :param dynamicMaxKinIteration: 
    :type dynamicMaxKinIteration: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    DynamicMaxStepSizeExpression: NXOpen.Expression = ...
    """
    Returns  the dynamic max step size expression 
    
    <hr>
    
    Getter Method
    
    Signature ``DynamicMaxStepSizeExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    DynamicNumericalDampingExpression: NXOpen.Expression = ...
    """
    Returns  the dynamic numerical damping expression
    
    <hr>
    
    Getter Method
    
    Signature ``DynamicNumericalDampingExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    RedundantViolationToleranceForAngleExpression: NXOpen.Expression = ...
    """
    Returns  the redundant violation tolerance expression for angle
    
    <hr>
    
    Getter Method
    
    Signature ``RedundantViolationToleranceForAngleExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    RedundantViolationToleranceForLengthExpression: NXOpen.Expression = ...
    """
    Returns  the redundant violation tolerance expression for length
    
    <hr>
    
    Getter Method
    
    Signature ``RedundantViolationToleranceForLengthExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    StaticErrorToleranceExpression: NXOpen.Expression = ...
    """
    Returns  the static error tolerance expression
    
    <hr>
    
    Getter Method
    
    Signature ``StaticErrorToleranceExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    StaticInitialStepSizeExpression: NXOpen.Expression = ...
    """
    Returns  the static initial step size expression
    
    <hr>
    
    Getter Method
    
    Signature ``StaticInitialStepSizeExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    StaticIntegratorType: RecurdynSolverPropertyStaticIntegratorTypes = ...
    """
    Returns or sets  the integrator type 
    
    <hr>
    
    Getter Method
    
    Signature ``StaticIntegratorType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.RecurdynSolverPropertyStaticIntegratorTypes` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StaticIntegratorType`` 
    
    :param integratorType: 
    :type integratorType: :py:class:`NXOpen.Motion.RecurdynSolverPropertyStaticIntegratorTypes` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    StaticMaxIteration: int = ...
    """
    Returns or sets  the static max iteration 
    
    <hr>
    
    Getter Method
    
    Signature ``StaticMaxIteration`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StaticMaxIteration`` 
    
    :param staticMaxIteration: 
    :type staticMaxIteration: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    StaticMaxStepSizeExpression: NXOpen.Expression = ...
    """
    Returns  the static max step size expression
    
    <hr>
    
    Getter Method
    
    Signature ``StaticMaxStepSizeExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    StaticStabilityExpression: NXOpen.Expression = ...
    """
    Returns  the static stability expression
    
    <hr>
    
    Getter Method
    
    Signature ``StaticStabilityExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: RecurdynSolverProperty = ...  # unknown typename


class BushingBuilderBushingTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BushingBuilderBushingTypes():
    """
    Definitions of bushing type  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Cylindrical", "Cylindrical type bushing"
       "General", "General type bushing"
       "Spherical", "Spherical type bushing"
    """
    Cylindrical = 0  # BushingBuilderBushingTypesMemberType
    General = 1  # BushingBuilderBushingTypesMemberType
    Spherical = 2  # BushingBuilderBushingTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BushingBuilder(MotionBuilder):
    """
    Represents a Motion BushingBuilder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.BushingCollection.CreateBushingBuilder`
    
    Default values.
    
    ===================================================================================  ===========
    Property                                                                             Value
    ===================================================================================  ===========
    BushingActuatorCoefficients.CylindricalActuatorCoefficients.ConicalType              Constant 
    -----------------------------------------------------------------------------------  -----------
    BushingActuatorCoefficients.CylindricalActuatorCoefficients.LongitudinalType         Constant 
    -----------------------------------------------------------------------------------  -----------
    BushingActuatorCoefficients.CylindricalActuatorCoefficients.RadialType               Constant 
    -----------------------------------------------------------------------------------  -----------
    BushingActuatorCoefficients.CylindricalActuatorCoefficients.TorsionalType            Constant 
    -----------------------------------------------------------------------------------  -----------
    BushingActuatorCoefficients.GeneralTorsionalActuatorCoefficients.CoefficientsType    Constant 
    -----------------------------------------------------------------------------------  -----------
    BushingActuatorCoefficients.GeneralTorsionalActuatorCoefficients.XCoefficientsType   Constant 
    -----------------------------------------------------------------------------------  -----------
    BushingActuatorCoefficients.GeneralTorsionalActuatorCoefficients.YCoefficientsType   Constant 
    -----------------------------------------------------------------------------------  -----------
    BushingActuatorCoefficients.GeneralTorsionalActuatorCoefficients.ZCoefficientsType   Constant 
    -----------------------------------------------------------------------------------  -----------
    BushingDefine.AngleCalculation                                                       LargeAngle 
    -----------------------------------------------------------------------------------  -----------
    BushingDefine.ForceCalculation                                                       Abc 
    -----------------------------------------------------------------------------------  -----------
    BushingDefine.OrientationType                                                        Vector 
    ===================================================================================  ===========
    
    .. versionadded:: NX6.0.0
    """
    
    class BushingTypes():
        """
        Definitions of bushing type  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Cylindrical", "Cylindrical type bushing"
           "General", "General type bushing"
           "Spherical", "Spherical type bushing"
        """
        Cylindrical = 0  # BushingBuilderBushingTypesMemberType
        General = 1  # BushingBuilderBushingTypesMemberType
        Spherical = 2  # BushingBuilderBushingTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    BushingActuatorCoefficients: BushingActuatorCoefficients = ...
    """
    Returns  the bushing actuator coefficients 
    
    <hr>
    
    Getter Method
    
    Signature ``BushingActuatorCoefficients`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.BushingActuatorCoefficients` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    BushingCoefficients: BushingCoefficients = ...
    """
    Returns  the bushing coefficients 
    
    <hr>
    
    Getter Method
    
    Signature ``BushingCoefficients`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.BushingCoefficients` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX12.0.0
       Obtain the coefficients using :py:meth:`Motion.BushingBuilder.BushingStiffnessCoefficients`, :py:meth:`Motion.BushingBuilder.BushingDampingCoefficients` and :py:meth:`Motion.BushingBuilder.BushingActuatorCoefficients` to query or edit it.
    
    License requirements: None.
    """
    BushingDampingCoefficients: BushingDampingCoefficients = ...
    """
    Returns  the bushing damping coefficients 
    
    <hr>
    
    Getter Method
    
    Signature ``BushingDampingCoefficients`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.BushingDampingCoefficients` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    BushingDefine: BushingDefine = ...
    """
    Returns  the bushing define 
    
    <hr>
    
    Getter Method
    
    Signature ``BushingDefine`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.BushingDefine` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    BushingStiffnessCoefficients: BushingStiffnessCoefficients = ...
    """
    Returns  the bushing stiffness coefficients 
    
    <hr>
    
    Getter Method
    
    Signature ``BushingStiffnessCoefficients`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.BushingStiffnessCoefficients` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    BushingType: BushingBuilderBushingTypes = ...
    """
    Returns or sets  the type 
    
    <hr>
    
    Getter Method
    
    Signature ``BushingType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.BushingBuilderBushingTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BushingType`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Motion.BushingBuilderBushingTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: BushingBuilder = ...  # unknown typename


class ResultMeasureResultTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ResultMeasureResultType():
    """
    Result measure result type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Interference", "Result measure for interference"
       "Measure", "Result measure for measure"
       "GraphObject", "Result measure for graph object"
       "Time", "Result measure for time"
    """
    Interference = 0  # ResultMeasureResultTypeMemberType
    Measure = 1  # ResultMeasureResultTypeMemberType
    GraphObject = 2  # ResultMeasureResultTypeMemberType
    Time = 3  # ResultMeasureResultTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ResultMeasureInterferenceTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ResultMeasureInterferenceType():
    """
    Result measure interference result type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Condition", "Result measure for interference condition"
       "Result", "Result measure for interference result"
    """
    Condition = 0  # ResultMeasureInterferenceTypeMemberType
    Result = 1  # ResultMeasureInterferenceTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ResultMeasure(NXOpen.TaggedObject):
    """
    Represents a result measure motion object   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Motion.ResultMeasureBuilder`
    
    .. versionadded:: NX11.0.0
    """
    
    class ResultType():
        """
        Result measure result type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Interference", "Result measure for interference"
           "Measure", "Result measure for measure"
           "GraphObject", "Result measure for graph object"
           "Time", "Result measure for time"
        """
        Interference = 0  # ResultMeasureResultTypeMemberType
        Measure = 1  # ResultMeasureResultTypeMemberType
        GraphObject = 2  # ResultMeasureResultTypeMemberType
        Time = 3  # ResultMeasureResultTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class InterferenceType():
        """
        Result measure interference result type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Condition", "Result measure for interference condition"
           "Result", "Result measure for interference result"
        """
        Condition = 0  # ResultMeasureInterferenceTypeMemberType
        Result = 1  # ResultMeasureInterferenceTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetExpressionObject(self) -> NXOpen.Expression:
        """
        Return expression object  
        
        Signature ``GetExpressionObject()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Expression` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    Null: ResultMeasure = ...  # unknown typename


class AdoptionManager(NXOpen.NXObject):
    """
    Represents the :py:class:`NXOpen.Motion.AdoptionManager`   
    
    An instance of this class can not be obtained
    
    .. versionadded:: NX11.0.0
    """
    
    def AdoptKinematicsFromAssembly(self) -> None:
        """
        Animation play 
        
        Signature ``AdoptKinematicsFromAssembly()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    Null: AdoptionManager = ...  # unknown typename


class PortVariable(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`Motion.PortVariable`.  
    
    This class
    contains the port association for the output of a mechatronics element 
    No KF support
    
    .. versionadded:: NX11.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    AssociatedPortName: str = ...
    """
    Returns or sets  the associated port name 
    
    <hr>
    
    Getter Method
    
    Signature ``AssociatedPortName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``AssociatedPortName`` 
    
    :param associatedPortName: 
    :type associatedPortName: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Name: str = ...
    """
    Returns  the name 
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Port: ControlPort = ...
    """
    Returns  the port 
    
    <hr>
    
    Getter Method
    
    Signature ``Port`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.ControlPort` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Unit: int = ...
    """
    Returns  the unit 
    
    <hr>
    
    Getter Method
    
    Signature ``Unit`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: PortVariable = ...  # unknown typename


class Connector(MotionObject):
    """
    Represents a connector   
    
    This is an abstract class, and cannot be created.
    
    .. versionadded:: NX6.0.0
    """
    Null: Connector = ...  # unknown typename


class Spring(Connector, IGraphSource):
    """
    Represents a spring   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Motion.SpringBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: Spring = ...  # unknown typename


class BodyContactRecurdynForceModelMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BodyContactRecurdynForceModel():
    """
    the enum for forec model of 3D contact 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Impact", " - "
       "Poisson", " - "
    """
    Impact = 0  # BodyContactRecurdynForceModelMemberType
    Poisson = 1  # BodyContactRecurdynForceModelMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BodyContactRecurdynCoulombFrictionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BodyContactRecurdynCoulombFriction():
    """
    the enum for friction option of 3D contact 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Off", " - "
       "On", " - "
    """
    Off = 0  # BodyContactRecurdynCoulombFrictionMemberType
    On = 1  # BodyContactRecurdynCoulombFrictionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BodyContactRecurdynContactTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BodyContactRecurdynContactType():
    """
    the enum for contact type option of 3D contact 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Patch", " - "
       "Surface", " - "
       "Solid", " - "
    """
    Patch = 0  # BodyContactRecurdynContactTypeMemberType
    Surface = 1  # BodyContactRecurdynContactTypeMemberType
    Solid = 2  # BodyContactRecurdynContactTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BodyContactRecurdynSurfaceTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BodyContactRecurdynSurfaceType():
    """
    the enum for surface type option of 3D contact 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Faceted", " - "
       "Fitted", " - "
    """
    Faceted = 0  # BodyContactRecurdynSurfaceTypeMemberType
    Fitted = 1  # BodyContactRecurdynSurfaceTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BodyContactRecurdyn(NXOpen.NXObject):
    """
    Represents a :py:class:`NXOpen.Motion.BodyContactRecurdyn`   
    
    .. versionadded:: NX5.0.0
    """
    
    class ForceModel():
        """
        the enum for forec model of 3D contact 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Impact", " - "
           "Poisson", " - "
        """
        Impact = 0  # BodyContactRecurdynForceModelMemberType
        Poisson = 1  # BodyContactRecurdynForceModelMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class CoulombFriction():
        """
        the enum for friction option of 3D contact 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Off", " - "
           "On", " - "
        """
        Off = 0  # BodyContactRecurdynCoulombFrictionMemberType
        On = 1  # BodyContactRecurdynCoulombFrictionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ContactType():
        """
        the enum for contact type option of 3D contact 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Patch", " - "
           "Surface", " - "
           "Solid", " - "
        """
        Patch = 0  # BodyContactRecurdynContactTypeMemberType
        Surface = 1  # BodyContactRecurdynContactTypeMemberType
        Solid = 2  # BodyContactRecurdynContactTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SurfaceType():
        """
        the enum for surface type option of 3D contact 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Faceted", " - "
           "Fitted", " - "
        """
        Faceted = 0  # BodyContactRecurdynSurfaceTypeMemberType
        Fitted = 1  # BodyContactRecurdynSurfaceTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AutoGlobalMaxPenetrationFlag: int = ...
    """
    Returns or sets  the auto global maximum penetration flag
    
    <hr>
    
    Getter Method
    
    Signature ``AutoGlobalMaxPenetrationFlag`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AutoGlobalMaxPenetrationFlag`` 
    
    :param autoGlobalMaxPenetrationFlag: 
    :type autoGlobalMaxPenetrationFlag: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    AutoLocalMaxPenetrationFlag: int = ...
    """
    Returns or sets  the auto local maximum penetration flag
    
    <hr>
    
    Getter Method
    
    Signature ``AutoLocalMaxPenetrationFlag`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AutoLocalMaxPenetrationFlag`` 
    
    :param autoLocalMaxPenetrationFlag: 
    :type autoLocalMaxPenetrationFlag: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    BufferRadiusFactorExpression: NXOpen.Expression = ...
    """
    Returns  the Buffer Radius Factor expression 
    
    <hr>
    
    Getter Method
    
    Signature ``BufferRadiusFactorExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ContactTypeOption: BodyContactRecurdynContactType = ...
    """
    Returns or sets  the contact type option
    
    <hr>
    
    Getter Method
    
    Signature ``ContactTypeOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.BodyContactRecurdynContactType` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ContactTypeOption`` 
    
    :param contactType: 
    :type contactType: :py:class:`NXOpen.Motion.BodyContactRecurdynContactType` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    CoulombFrictionOption: BodyContactRecurdynCoulombFriction = ...
    """
    Returns or sets  the coulomb friction option
    
    <hr>
    
    Getter Method
    
    Signature ``CoulombFrictionOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.BodyContactRecurdynCoulombFriction` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CoulombFrictionOption`` 
    
    :param coulombFriction: 
    :type coulombFriction: :py:class:`NXOpen.Motion.BodyContactRecurdynCoulombFriction` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    DynamicCoefficientExpression: NXOpen.Expression = ...
    """
    Returns  the dynamic coefficient expression 
    
    <hr>
    
    Getter Method
    
    Signature ``DynamicCoefficientExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    FirstGeometryBoundingBufferLengthExpression: NXOpen.Expression = ...
    """
    Returns  the bounding Buffer Length expression 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstGeometryBoundingBufferLengthExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    FirstGeometryMaxFacetSizeFactorExpression: NXOpen.Expression = ...
    """
    Returns  the max Facet Size Factor expression 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstGeometryMaxFacetSizeFactorExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    FirstGeometryMaxFacetSizeFactorFlag: bool = ...
    """
    Returns or sets  the max Facet Size Factor Flag
    
    <hr>
    
    Getter Method
    
    Signature ``FirstGeometryMaxFacetSizeFactorFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FirstGeometryMaxFacetSizeFactorFlag`` 
    
    :param maxFacetSizeFactorFlag: 
    :type maxFacetSizeFactorFlag: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    FirstGeometryMaximumPenetrationExpression: NXOpen.Expression = ...
    """
    Returns  the Plane Maximum Penetration of the first geometry expresion 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstGeometryMaximumPenetrationExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    FirstGeometryPlaneToleranceFactorExpression: NXOpen.Expression = ...
    """
    Returns  the Plane Tolerance Factor of the first geometry expresion 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstGeometryPlaneToleranceFactorExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    FirstGeometryPlaneToleranceFactorSolidContactExpression: NXOpen.Expression = ...
    """
    Returns  the Plane Tolerance Factor of the first geometry for solid contact expression 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstGeometryPlaneToleranceFactorSolidContactExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ForceExponentExpression: NXOpen.Expression = ...
    """
    Returns  the force exponent expression 
    
    <hr>
    
    Getter Method
    
    Signature ``ForceExponentExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ForceModelType: BodyContactRecurdynForceModel = ...
    """
    Returns or sets  the force model type
    
    <hr>
    
    Getter Method
    
    Signature ``ForceModelType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.BodyContactRecurdynForceModel` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ForceModelType`` 
    
    :param forceModel: 
    :type forceModel: :py:class:`NXOpen.Motion.BodyContactRecurdynForceModel` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    FrictionVelocityExpression: NXOpen.Expression = ...
    """
    Returns  the friction velocity expression 
    
    <hr>
    
    Getter Method
    
    Signature ``FrictionVelocityExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    GlobalMaxPenetrationExpression: NXOpen.Expression = ...
    """
    Returns  the global Max.  
    
    Penetration expression 
    
    <hr>
    
    Getter Method
    
    Signature ``GlobalMaxPenetrationExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    LocalMaxPenetrationExpression: NXOpen.Expression = ...
    """
    Returns  the local Max.  
    
    Penetration expression 
    
    <hr>
    
    Getter Method
    
    Signature ``LocalMaxPenetrationExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    MaterialDampingExpression: NXOpen.Expression = ...
    """
    Returns  the material damping expression 
    
    <hr>
    
    Getter Method
    
    Signature ``MaterialDampingExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    MaximumStepSizeFactorExpression: NXOpen.Expression = ...
    """
    Returns  the Maximun Step Size Factor expression 
    
    <hr>
    
    Getter Method
    
    Signature ``MaximumStepSizeFactorExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    PenetrationDepthExpression: NXOpen.Expression = ...
    """
    Returns  the penetration depth expression 
    
    <hr>
    
    Getter Method
    
    Signature ``PenetrationDepthExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ReboundDampingFactorExpression: NXOpen.Expression = ...
    """
    Returns  the rebound Damping Factor expression 
    
    <hr>
    
    Getter Method
    
    Signature ``ReboundDampingFactorExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ReboundDampingFactorFlag: bool = ...
    """
    Returns or sets  the rebound Damping Factor Flag
    
    <hr>
    
    Getter Method
    
    Signature ``ReboundDampingFactorFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReboundDampingFactorFlag`` 
    
    :param reboundDampingFactorFlag: 
    :type reboundDampingFactorFlag: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SecondGeometryBoundingBufferLengthExpression: NXOpen.Expression = ...
    """
    Returns  the bounding Buffer Length expression 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondGeometryBoundingBufferLengthExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SecondGeometryMaxFacetSizeFactorExpression: NXOpen.Expression = ...
    """
    Returns  the max Facet Size Factor expression 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondGeometryMaxFacetSizeFactorExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SecondGeometryMaxFacetSizeFactorFlag: bool = ...
    """
    Returns or sets  the max Facet Size Factor Flag
    
    <hr>
    
    Getter Method
    
    Signature ``SecondGeometryMaxFacetSizeFactorFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SecondGeometryMaxFacetSizeFactorFlag`` 
    
    :param maxFacetSizeFactorFlag: 
    :type maxFacetSizeFactorFlag: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SecondGeometryMaximumPenetrationExpression: NXOpen.Expression = ...
    """
    Returns  the Plane Maximum Penetration of the second geometry expression 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondGeometryMaximumPenetrationExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SecondGeometryPlaneToleranceFactorExpression: NXOpen.Expression = ...
    """
    Returns  the Plane Tolerance Factor of the second geometry expression 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondGeometryPlaneToleranceFactorExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SecondGeometryPlaneToleranceFactorSolidContactExpression: NXOpen.Expression = ...
    """
    Returns  the Plane Tolerance Factor of the second geometry for solid contact expression 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondGeometryPlaneToleranceFactorSolidContactExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    StaticCoefficientExpression: NXOpen.Expression = ...
    """
    Returns  the coulomb coefficient expression 
    
    <hr>
    
    Getter Method
    
    Signature ``StaticCoefficientExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    StictionVelocityExpression: NXOpen.Expression = ...
    """
    Returns  the stiction velocity expression 
    
    <hr>
    
    Getter Method
    
    Signature ``StictionVelocityExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    StiffnessExpression: NXOpen.Expression = ...
    """
    Returns  the stiffness expression 
    
    <hr>
    
    Getter Method
    
    Signature ``StiffnessExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SurfaceTypeOption: BodyContactRecurdynSurfaceType = ...
    """
    Returns or sets  the surface type option
    
    <hr>
    
    Getter Method
    
    Signature ``SurfaceTypeOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.BodyContactRecurdynSurfaceType` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SurfaceTypeOption`` 
    
    :param surfaceType: 
    :type surfaceType: :py:class:`NXOpen.Motion.BodyContactRecurdynSurfaceType` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: BodyContactRecurdyn = ...  # unknown typename


class VectorForceBuilder(MotionBuilder):
    """
    Represents a :py:class:`NXOpen.Motion.VectorForceBuilder`
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.VectorForceCollection.CreateVectorForceBuilder`
    
    .. versionadded:: NX5.0.0
    """
    VObject: VObject = ...
    """
    Returns  the vobject data 
    
    <hr>
    
    Getter Method
    
    Signature ``VObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.VObject` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: VectorForceBuilder = ...  # unknown typename


class MarkerToNodeData(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents the marker to node data which is a list item in :py:class:`NXOpen.Motion.FlexBodyBuilder`
    
    .. versionadded:: NX7.5.0
    """
    
    def GetNodeLocation(self) -> 'list[float]':
        """
        Gets the node location  
        
        Signature ``GetNodeLocation()`` 
        
        :returns: 
        :rtype: list of float 
        
        .. versionadded:: NX7.5.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def SetNodeLocation(self, nodeLocation: 'list[float]') -> None:
        """
        Sets the node locations  
        
        Signature ``SetNodeLocation(nodeLocation)`` 
        
        :param nodeLocation: 
        :type nodeLocation: list of float 
        
        .. versionadded:: NX7.5.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def GetUseClosestNode(self) -> bool:
        """
        Gets the flag UseClosestNode.  
        
        Signature ``GetUseClosestNode()`` 
        
        :returns: 
        :rtype: bool 
        
        .. versionadded:: NX12.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def SetUseClosestNode(self, useClosestNode: bool) -> None:
        """
        Sets the flag UseClosestNode.  
        
        Only suppported with the SplineBeam
        
        Signature ``SetUseClosestNode(useClosestNode)`` 
        
        :param useClosestNode: 
        :type useClosestNode: bool 
        
        .. versionadded:: NX12.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Marker: NXOpen.NXObject = ...
    """
    Returns or sets  the marker or joint object 
    
    <hr>
    
    Getter Method
    
    Signature ``Marker`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Marker`` 
    
    :param marker: 
    :type marker: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    MarkerPosition: int = ...
    """
    Returns or sets  the i or j marker identity 
    
    <hr>
    
    Getter Method
    
    Signature ``MarkerPosition`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``MarkerPosition`` 
    
    :param markerPosition: 
    :type markerPosition: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Move: bool = ...
    """
    Returns or sets  whether to move the marker to node 
    
    <hr>
    
    Getter Method
    
    Signature ``Move`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Move`` 
    
    :param move: 
    :type move: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    NodeId: int = ...
    """
    Returns or sets  the node id 
    
    <hr>
    
    Getter Method
    
    Signature ``NodeId`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``NodeId`` 
    
    :param nodeID: 
    :type nodeID: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: MarkerToNodeData = ...  # unknown typename


class BushingGeneralCoefficientMoveTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BushingGeneralCoefficientMoveTypes():
    """
    Definitions move type of general type bushing coefficient 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Translational", "translational type"
       "Torsional", "torsional type"
    """
    Translational = 0  # BushingGeneralCoefficientMoveTypesMemberType
    Torsional = 1  # BushingGeneralCoefficientMoveTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BodyContactCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of 3D contact objects.  
    
    Any contact object must 
    be created and found through this class 
    To obtain an instance of this class, refer to :py:class:`NXOpen.Motion.MotionManager`
    
    .. versionadded:: NX5.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateBodyContactBuilder(self, contactobj: BodyContact) -> BodyContactBuilder:
        """
        Creates a :py:class:`NXOpen.Motion.BodyContactBuilder`  
        
        Signature ``CreateBodyContactBuilder(contactobj)`` 
        
        :param contactobj:  ":py:class:`NXOpen.Motion.BodyContact` to be edited,                                                                                               if None then create a new one 
        :type contactobj: :py:class:`NXOpen.Motion.BodyContact` 
        :returns: 
        :rtype: :py:class:`NXOpen.Motion.BodyContactBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def FindObject(self, name: str) -> BodyContact:
        """
        Finds the :py:class:`NXOpen.Motion.BodyContact` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the contact object.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Motion.BodyContact` of this name.  
        :rtype: :py:class:`NXOpen.Motion.BodyContact` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    


class MotionMethods():
    """
    Represents a :py:class:`NXOpen.Motion.MotionMethods` class  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Motion.MotionSession`
    
    .. versionadded:: NX8.0.0
    """
    
    def CopyConnectorParameters(self, sourceConnector: NXOpen.NXObject, destinationConnector: NXOpen.NXObject) -> None:
        """
        Copies the connector parameters 
        
        Signature ``CopyConnectorParameters(sourceConnector, destinationConnector)`` 
        
        :param sourceConnector:  Source connector from which parameters are copied  
        :type sourceConnector: :py:class:`NXOpen.NXObject` 
        :param destinationConnector:  Destination connector to which the parameters are copied  
        :type destinationConnector: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX8.0.0
        
        .. deprecated::  NX12.0.0
           Use :py:meth:`MotionMethods.CopyParameters` instead.
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def ModelCheck(self, listWarning: bool) -> None:
        """
        Check all motion objects 
        
        Signature ``ModelCheck(listWarning)`` 
        
        :param listWarning:  whether to display the checking result if only warnings found without error  
        :type listWarning: bool 
        
        .. versionadded:: NX8.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def CopyParameters(self, source: NXOpen.NXObject, destination: NXOpen.NXObject) -> None:
        """
        Copy parameters from source to destination.  
        
        Source and Destination must be of the same type.
        Only objects that support this command in Motion Navigator are supported. 
        
        Signature ``CopyParameters(source, destination)`` 
        
        :param source:  Source object from which parameters are copied  
        :type source: :py:class:`NXOpen.NXObject` 
        :param destination:  Destination object to which the parameters are copied  
        :type destination: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def ExportParameters(self, entity: NXOpen.NXObject, fileName: str) -> None:
        """
        Export parameters of an entity into a txt file.  
        
        Only objects that support this command in Motion Navigator are supported. 
        
        Signature ``ExportParameters(entity, fileName)`` 
        
        :param entity:  entity to export  
        :type entity: :py:class:`NXOpen.NXObject` 
        :param fileName:  file to export to  
        :type fileName: str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def ImportParameters(self, entity: NXOpen.NXObject, fileName: str) -> None:
        """
        Import parameters of an object into a txt file.  
        
        Only objects that support this command in Motion Navigator are supported. 
        
        Signature ``ImportParameters(entity, fileName)`` 
        
        :param entity:  entity to import  
        :type entity: :py:class:`NXOpen.NXObject` 
        :param fileName:  file to import from  
        :type fileName: str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    


class SelectBaseSection(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a single object selection.  
    
    .. versionadded:: NX5.0.0
    """
    
    @typing.overload
    def SetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def SetValue(self, selection: BaseSection) -> None:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.BaseSection` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: BaseSection) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.BaseSection` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: BaseSection, view: NXOpen.View, point: NXOpen.Point3d) -> None:
        """
        The object being selected with the object's view and object's point
        
        Signature ``SetValue(selection, view, point)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.BaseSection` 
        :param view:  selected object view 
        :type view: :py:class:`NXOpen.View` 
        :param point:  selected object point 
        :type point: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, snapType: NXOpen.InferSnapTypeSnapType, selection1: BaseSection, view1: NXOpen.View, point1: NXOpen.Point3d, selection2: BaseSection, view2: NXOpen.View, point2: NXOpen.Point3d) -> None:
        """
        The object being selected with the objects view and objects point and snap information.
        
        Signature ``SetValue(snapType, selection1, view1, point1, selection2, view2, point2)`` 
        
        :param snapType:   snap point type 
        :type snapType: :py:class:`NXOpen.InferSnapTypeSnapType` 
        :param selection1:  first selected object  
        :type selection1: :py:class:`NXOpen.Motion.BaseSection` 
        :param view1:  first selected object view 
        :type view1: :py:class:`NXOpen.View` 
        :param point1:  first selected object point 
        :type point1: :py:class:`NXOpen.Point3d` 
        :param selection2:  second selected object  
        :type selection2: :py:class:`NXOpen.Motion.BaseSection` 
        :param view2:  second selected object view 
        :type view2: :py:class:`NXOpen.View` 
        :param point2:  second selected object point 
        :type point2: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: BaseSection, caeSubType: NXOpen.CaeObjectTypeCaeSubType, caeSubId: int) -> None:
        """
        The object being selected with CAE set object information.
        
        Signature ``SetValue(selection, caeSubType, caeSubId)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.BaseSection` 
        :param caeSubType:  CAE set object sub type 
        :type caeSubType: :py:class:`NXOpen.CaeObjectTypeCaeSubType` 
        :param caeSubId:  CAE set object sub id 
        :type caeSubId: int 
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.SetValue`.
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def GetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def GetValue(self) -> BaseSection:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :returns:  selected object  
        :rtype: :py:class:`NXOpen.Motion.BaseSection` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self, selection: BaseSection) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.BaseSection` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the object's view and point.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, view, point). selection is a :py:class:`NXOpen.Motion.BaseSection`.   selected object view is a :py:class:`NXOpen.View`.   selected object viewpoint is a :py:class:`NXOpen.Point3d`.   selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the objects view and point and snap information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (snapType, selection1, view1, point1, selection2, view2, point2). snapType is a :py:class:`NXOpen.InferSnapTypeSnapType`.    snap point typeselection1 is a :py:class:`NXOpen.Motion.BaseSection`.   first selected object view1 is a :py:class:`NXOpen.View`.   first selected object viewpoint1 is a :py:class:`NXOpen.Point3d`.   first selected object pointselection2 is a :py:class:`NXOpen.Motion.BaseSection`.   second selected object view2 is a :py:class:`NXOpen.View`.   second selected object viewpoint2 is a :py:class:`NXOpen.Point3d`.   second selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with CAE set object information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, caeSubType, caeSubId). selection is a :py:class:`NXOpen.Motion.BaseSection`.   selected object caeSubType is a :py:class:`NXOpen.CaeObjectTypeCaeSubType`.   CAE set object sub typecaeSubId is a int.   CAE set object sub id
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.GetValue`.
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Value: BaseSection = ...
    """
    Returns or sets  the object being selected
    
    <hr>
    
    Getter Method
    
    Signature ``Value`` 
    
    :returns:  selected object  
    :rtype: :py:class:`NXOpen.Motion.BaseSection` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Value`` 
    
    :param selection:  selected object  
    :type selection: :py:class:`NXOpen.Motion.BaseSection` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SelectBaseSection = ...  # unknown typename


class OutputPortAssociationList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[OutputPortAssociation]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.Motion.OutputPortAssociation` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: OutputPortAssociation) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.Motion.OutputPortAssociation` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: OutputPortAssociation) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.Motion.OutputPortAssociation` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> OutputPortAssociation:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.Motion.OutputPortAssociation` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: OutputPortAssociation) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Motion.OutputPortAssociation` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: OutputPortAssociation, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Motion.OutputPortAssociation` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[OutputPortAssociation]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.Motion.OutputPortAssociation` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[OutputPortAssociation]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.Motion.OutputPortAssociation` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: OutputPortAssociation, object2: OutputPortAssociation) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.Motion.OutputPortAssociation` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.Motion.OutputPortAssociation` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: OutputPortAssociation) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.Motion.OutputPortAssociation` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: OutputPortAssociationList = ...  # unknown typename


class GeneralCouplerCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of 2-3 joint coupler objects   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Motion.MotionManager`
    
    .. versionadded:: NX7.5.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateGeneralCouplerBuilder(self, gcoupler: GeneralCoupler) -> GeneralCouplerBuilder:
        """
        Creates a :py:class:`NXOpen.Motion.GeneralCouplerBuilder`  
        
        Signature ``CreateGeneralCouplerBuilder(gcoupler)`` 
        
        :param gcoupler: 
        :type gcoupler: :py:class:`NXOpen.Motion.GeneralCoupler` 
        :returns: 
        :rtype: :py:class:`NXOpen.Motion.GeneralCouplerBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def FindObject(self, name: str) -> GeneralCoupler:
        """
        Finds the :py:class:`NXOpen.Motion.GeneralCoupler` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Motion.GeneralCoupler`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Motion.GeneralCoupler` with this name.  
        :rtype: :py:class:`NXOpen.Motion.GeneralCoupler` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    


class Mechatronics(MotionObject):
    """
    Represents a :py:class:`Motion.Mechatronics`.  
    
    This class
    exposes the control ports associated for its outputs and port variables. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Motion.MechatronicsBuilder`
    
    .. versionadded:: NX11.0.0
    """
    PortVariables: PortVariableCollection = ...
    """
    Returns the :py:class:`Motion.PortVariableCollection`belonging to this part 
    
    Signature ``PortVariables`` 
    
    .. versionadded:: NX11.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.PortVariableCollection`
    """
    Outputs: MechatronicsPortCollection = ...
    """
    Returns the :py:class:`Motion.MechatronicsPortCollection`belonging to this part 
    
    Signature ``Outputs`` 
    
    .. versionadded:: NX11.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.MechatronicsPortCollection`
    """
    Null: Mechatronics = ...  # unknown typename


class PackagingMeasureBuilderGeometryData_Struct():
    """
    Represents geometry data.  
    
    The direction tag covers point and vector.
    The direction tag can be smart one, but point and vector cannot.
    It is recommened to use direction rather than point and vector .
    Constructor: 
    NXOpen.Motion.PackagingMeasureBuilder.GeometryData()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    Geometry: NXOpen.DisplayableObject = ...
    """
    Geometry 
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.DisplayableObject`
    """
    Point: NXOpen.Point3d = ...
    """
    Start point 
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Point3d`
    """
    Vector: NXOpen.Vector3d = ...
    """
    Initial vector 
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Vector3d`
    """
    Direction: NXOpen.Direction = ...
    """
    Direction tag 
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Direction`
    """


class LinkDriverCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of LinkDriver objects   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Motion.MotionManager`
    
    .. versionadded:: NX11.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateLinkDriverBuilder(self, linkDriver: LinkDriver) -> LinkDriverBuilder:
        """
        Creates a :py:class:`NXOpen.Motion.LinkDriverBuilder`  
        
        Signature ``CreateLinkDriverBuilder(linkDriver)`` 
        
        :param linkDriver:  :py:class:`NXOpen.Motion.LinkDriver` to be edited  
        :type linkDriver: :py:class:`NXOpen.Motion.LinkDriver` 
        :returns:  LinkDriverBuilder object  
        :rtype: :py:class:`NXOpen.Motion.LinkDriverBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def FindObject(self, name: str) -> LinkDriver:
        """
        Finds the :py:class:`NXOpen.Motion.LinkDriver` object with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Motion.LinkDriver`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Motion.LinkDriver` with this name.  
        :rtype: :py:class:`NXOpen.Motion.LinkDriver` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    


class FlexBodyBuilderPositioningMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class FlexBodyBuilderPositioning():
    """
    Represents positioning type of flexible body 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "AbsoluteOrigin", "Positioning to absolution place"
       "ComponentPosition", "Positioning to the place where the component is in assembly"
       "ThreePointMethod", "Positioning to user defined place using three point method"
    """
    AbsoluteOrigin = 0  # FlexBodyBuilderPositioningMemberType
    ComponentPosition = 1  # FlexBodyBuilderPositioningMemberType
    ThreePointMethod = 2  # FlexBodyBuilderPositioningMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class FlexBodyBuilderSourceTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class FlexBodyBuilderSourceType():
    """
    Represents rfi file type of flexible body 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Localfolder", "File is in local folder"
       "Teamcenter", " - "
    """
    Localfolder = 0  # FlexBodyBuilderSourceTypeMemberType
    Teamcenter = 1  # FlexBodyBuilderSourceTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class FlexBodyBuilderUnitSystemTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class FlexBodyBuilderUnitSystemType():
    """
    Represents unit system 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Infered", "unit system of file"
       "MeterNewton", "(N)(m)(kg)"
       "FootPoundalF", "(lbf)(ft)(slug)"
       "MeterKilogramF", "(kgf)(m)(kgf-s^2/m)"
       "FootPoundal", "(poundal)(ft)(lbm)"
       "MillimeterMillinewton", "(mN)(mm)(kg)"
       "CentimeterCentinewton", "(cN)(cm)(kg)"
       "InchPoundF", "(lbf)(in)(lbf-s^2/in)"
       "MillimeterKilogramF", "(kgf)(mm)(kgf-s^2/mm)"
       "MillimeterNewton", "(N)(mm)(tonne)"
    """
    Infered = 0  # FlexBodyBuilderUnitSystemTypeMemberType
    MeterNewton = 1  # FlexBodyBuilderUnitSystemTypeMemberType
    FootPoundalF = 2  # FlexBodyBuilderUnitSystemTypeMemberType
    MeterKilogramF = 3  # FlexBodyBuilderUnitSystemTypeMemberType
    FootPoundal = 4  # FlexBodyBuilderUnitSystemTypeMemberType
    MillimeterMillinewton = 5  # FlexBodyBuilderUnitSystemTypeMemberType
    CentimeterCentinewton = 6  # FlexBodyBuilderUnitSystemTypeMemberType
    InchPoundF = 7  # FlexBodyBuilderUnitSystemTypeMemberType
    MillimeterKilogramF = 8  # FlexBodyBuilderUnitSystemTypeMemberType
    MillimeterNewton = 9  # FlexBodyBuilderUnitSystemTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class FlexBodyBuilder(MotionBuilder):
    """
    Represents a :py:class:`NXOpen.Motion.FlexBody` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.FlexBodyCollection.CreateFlexBodyBuilder`
    
    Default values.
    
    ================  ===============
    Property          Value
    ================  ===============
    PositioningType   AbsoluteOrigin 
    ================  ===============
    
    .. versionadded:: NX7.5.0
    """
    
    class Positioning():
        """
        Represents positioning type of flexible body 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "AbsoluteOrigin", "Positioning to absolution place"
           "ComponentPosition", "Positioning to the place where the component is in assembly"
           "ThreePointMethod", "Positioning to user defined place using three point method"
        """
        AbsoluteOrigin = 0  # FlexBodyBuilderPositioningMemberType
        ComponentPosition = 1  # FlexBodyBuilderPositioningMemberType
        ThreePointMethod = 2  # FlexBodyBuilderPositioningMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SourceType():
        """
        Represents rfi file type of flexible body 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Localfolder", "File is in local folder"
           "Teamcenter", " - "
        """
        Localfolder = 0  # FlexBodyBuilderSourceTypeMemberType
        Teamcenter = 1  # FlexBodyBuilderSourceTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class UnitSystemType():
        """
        Represents unit system 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Infered", "unit system of file"
           "MeterNewton", "(N)(m)(kg)"
           "FootPoundalF", "(lbf)(ft)(slug)"
           "MeterKilogramF", "(kgf)(m)(kgf-s^2/m)"
           "FootPoundal", "(poundal)(ft)(lbm)"
           "MillimeterMillinewton", "(mN)(mm)(kg)"
           "CentimeterCentinewton", "(cN)(cm)(kg)"
           "InchPoundF", "(lbf)(in)(lbf-s^2/in)"
           "MillimeterKilogramF", "(kgf)(mm)(kgf-s^2/mm)"
           "MillimeterNewton", "(N)(mm)(tonne)"
        """
        Infered = 0  # FlexBodyBuilderUnitSystemTypeMemberType
        MeterNewton = 1  # FlexBodyBuilderUnitSystemTypeMemberType
        FootPoundalF = 2  # FlexBodyBuilderUnitSystemTypeMemberType
        MeterKilogramF = 3  # FlexBodyBuilderUnitSystemTypeMemberType
        FootPoundal = 4  # FlexBodyBuilderUnitSystemTypeMemberType
        MillimeterMillinewton = 5  # FlexBodyBuilderUnitSystemTypeMemberType
        CentimeterCentinewton = 6  # FlexBodyBuilderUnitSystemTypeMemberType
        InchPoundF = 7  # FlexBodyBuilderUnitSystemTypeMemberType
        MillimeterKilogramF = 8  # FlexBodyBuilderUnitSystemTypeMemberType
        MillimeterNewton = 9  # FlexBodyBuilderUnitSystemTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetOffsetPoints(self) -> 'list[float]':
        """
        Gets the offset points   
        
        Signature ``GetOffsetPoints()`` 
        
        :returns: 
        :rtype: list of float 
        
        .. versionadded:: NX7.5.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def SetOffsetPoints(self, offsetPoints: 'list[float]') -> None:
        """
        Sets the offset points  
        
        Signature ``SetOffsetPoints(offsetPoints)`` 
        
        :param offsetPoints: 
        :type offsetPoints: list of float 
        
        .. versionadded:: NX7.5.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def GetOffsetOrientations(self) -> 'list[float]':
        """
        Gets the offset orientations   
        
        Signature ``GetOffsetOrientations()`` 
        
        :returns: 
        :rtype: list of float 
        
        .. versionadded:: NX7.5.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def SetOffsetOrientations(self, offsetOrientations: 'list[float]') -> None:
        """
        Sets the offset orientations  
        
        Signature ``SetOffsetOrientations(offsetOrientations)`` 
        
        :param offsetOrientations: 
        :type offsetOrientations: list of float 
        
        .. versionadded:: NX7.5.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def GetMarkerItems(self) -> 'list[MarkerToNodeData]':
        """
        Gets marker to node list Items  
        
        Signature ``GetMarkerItems()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Motion.MarkerToNodeData` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def SetMarkerItems(self, markerToNodeListItem: 'list[MarkerToNodeData]') -> None:
        """
        Sets marker to node list Items 
        
        Signature ``SetMarkerItems(markerToNodeListItem)`` 
        
        :param markerToNodeListItem: 
        :type markerToNodeListItem: list of :py:class:`NXOpen.Motion.MarkerToNodeData` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def NewListMarkerToNode(self, marker: NXOpen.NXObject, markerPosition: int, nodeID: int, move: bool, nodeLocationX: float, nodeLocationY: float, nodeLocationZ: float) -> MarkerToNodeData:
        """
        Creates a new list item  
        
        Signature ``NewListMarkerToNode(marker, markerPosition, nodeID, move, nodeLocationX, nodeLocationY, nodeLocationZ)`` 
        
        :param marker:  The marker tag 
        :type marker: :py:class:`NXOpen.NXObject` 
        :param markerPosition:  The i or j marker identity 
        :type markerPosition: int 
        :param nodeID:  The node ID  
        :type nodeID: int 
        :param move:  Whether to move the node  
        :type move: bool 
        :param nodeLocationX:  The node location X coordinate 
        :type nodeLocationX: float 
        :param nodeLocationY:  The node location Y coordinate 
        :type nodeLocationY: float 
        :param nodeLocationZ:  The node location Z coordinate 
        :type nodeLocationZ: float 
        :returns: 
        :rtype: :py:class:`NXOpen.Motion.MarkerToNodeData` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def ExportRfiRelatedResults(self, caeFileSpec: str, resultName: str) -> str:
        """
        Export rfi related results in manager mode 
        
        Signature ``ExportRfiRelatedResults(caeFileSpec, resultName)`` 
        
        :param caeFileSpec:  The manger mode file specification  
        :type caeFileSpec: str 
        :param resultName:  The result name 
        :type resultName: str 
        :returns:  The local file specification  
        :rtype: str 
        
        .. versionadded:: NX7.5.4
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    CutoffDamping: NXOpen.Expression = ...
    """
    Returns  the damping 
    
    <hr>
    
    Getter Method
    
    Signature ``CutoffDamping`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    CutoffFrequencyIncrement: NXOpen.Expression = ...
    """
    Returns  the cutoff frequency increment 
    
    <hr>
    
    Getter Method
    
    Signature ``CutoffFrequencyIncrement`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    CutoffLowerFrequency: NXOpen.Expression = ...
    """
    Returns  the cutoff lower frequency 
    
    <hr>
    
    Getter Method
    
    Signature ``CutoffLowerFrequency`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    CutoffUpperFrequency: NXOpen.Expression = ...
    """
    Returns  the cutoff upper frequency 
    
    <hr>
    
    Getter Method
    
    Signature ``CutoffUpperFrequency`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    FileTceName: str = ...
    """
    Returns or sets  the TCE RFI file name 
    
    <hr>
    
    Getter Method
    
    Signature ``FileTceName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FileTceName`` 
    
    :param fileTceName: 
    :type fileTceName: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    MassMatrix0: bool = ...
    """
    Returns or sets  the mass 0rd matrix option 
    
    <hr>
    
    Getter Method
    
    Signature ``MassMatrix0`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MassMatrix0`` 
    
    :param massMatrix0: 
    :type massMatrix0: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    MassMatrix1: bool = ...
    """
    Returns or sets  the mass 1st matrix option 
    
    <hr>
    
    Getter Method
    
    Signature ``MassMatrix1`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MassMatrix1`` 
    
    :param massMatrix1: 
    :type massMatrix1: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    MassMatrix2: bool = ...
    """
    Returns or sets  the mass 2nd matrix option 
    
    <hr>
    
    Getter Method
    
    Signature ``MassMatrix2`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MassMatrix2`` 
    
    :param massMatrix2: 
    :type massMatrix2: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    MassMatrix3: bool = ...
    """
    Returns or sets  the mass 3rd matrix option 
    
    <hr>
    
    Getter Method
    
    Signature ``MassMatrix3`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MassMatrix3`` 
    
    :param massMatrix3: 
    :type massMatrix3: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    MassMatrix4: bool = ...
    """
    Returns or sets  the mass 4th matrix option 
    
    <hr>
    
    Getter Method
    
    Signature ``MassMatrix4`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MassMatrix4`` 
    
    :param massMatrix4: 
    :type massMatrix4: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    MassScalar0: bool = ...
    """
    Returns or sets  the mass 0rd scalar option 
    
    <hr>
    
    Getter Method
    
    Signature ``MassScalar0`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MassScalar0`` 
    
    :param massScalar0: 
    :type massScalar0: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    MassScalar1: bool = ...
    """
    Returns or sets  the mass 1st scalar option 
    
    <hr>
    
    Getter Method
    
    Signature ``MassScalar1`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MassScalar1`` 
    
    :param massScalar1: 
    :type massScalar1: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    MassScalar2: bool = ...
    """
    Returns or sets  the mass 2nd scalar option 
    
    <hr>
    
    Getter Method
    
    Signature ``MassScalar2`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MassScalar2`` 
    
    :param massScalar2: 
    :type massScalar2: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    MassVector0: bool = ...
    """
    Returns or sets  the mass 0rd vector option 
    
    <hr>
    
    Getter Method
    
    Signature ``MassVector0`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MassVector0`` 
    
    :param massVector0: 
    :type massVector0: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    MassVector1: bool = ...
    """
    Returns or sets  the mass 1st vector option 
    
    <hr>
    
    Getter Method
    
    Signature ``MassVector1`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MassVector1`` 
    
    :param massVector1: 
    :type massVector1: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    MassVector2: bool = ...
    """
    Returns or sets  the mass 2nd vector option 
    
    <hr>
    
    Getter Method
    
    Signature ``MassVector2`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MassVector2`` 
    
    :param massVector2: 
    :type massVector2: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    MassVector3: bool = ...
    """
    Returns or sets  the mass 3rd vector option 
    
    <hr>
    
    Getter Method
    
    Signature ``MassVector3`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MassVector3`` 
    
    :param massVector3: 
    :type massVector3: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    MassVector4: bool = ...
    """
    Returns or sets  the mass 4th vector option 
    
    <hr>
    
    Getter Method
    
    Signature ``MassVector4`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MassVector4`` 
    
    :param massVector4: 
    :type massVector4: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Name: str = ...
    """
    Returns or sets  the flexible body object name 
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    NativeRfiFileName: str = ...
    """
    Returns or sets  the native RFI file name 
    
    <hr>
    
    Getter Method
    
    Signature ``NativeRfiFileName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NativeRfiFileName`` 
    
    :param nativeRfiFileName: 
    :type nativeRfiFileName: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    NodeTolerance: NXOpen.Expression = ...
    """
    Returns  the tolerance between marker and node coordinate 
    
    <hr>
    
    Getter Method
    
    Signature ``NodeTolerance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    PositioningType: FlexBodyBuilderPositioning = ...
    """
    Returns or sets  the positioning type 
    
    <hr>
    
    Getter Method
    
    Signature ``PositioningType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.FlexBodyBuilderPositioning` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PositioningType`` 
    
    :param positioningType: 
    :type positioningType: :py:class:`NXOpen.Motion.FlexBodyBuilderPositioning` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SelectionLink: SelectLink = ...
    """
    Returns  the selection link 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectionLink`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectLink` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SourceOption: FlexBodyBuilderSourceType = ...
    """
    Returns or sets  the file type 
    
    <hr>
    
    Getter Method
    
    Signature ``SourceOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.FlexBodyBuilderSourceType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SourceOption`` 
    
    :param sourceOption: 
    :type sourceOption: :py:class:`NXOpen.Motion.FlexBodyBuilderSourceType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    TransientTime: NXOpen.Expression = ...
    """
    Returns  the transient time 
    
    <hr>
    
    Getter Method
    
    Signature ``TransientTime`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    TreatAsRigid: bool = ...
    """
    Returns or sets  the treat as rigid option 
    
    <hr>
    
    Getter Method
    
    Signature ``TreatAsRigid`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TreatAsRigid`` 
    
    :param treatAsRigid: 
    :type treatAsRigid: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    UnitSystem: FlexBodyBuilderUnitSystemType = ...
    """
    Returns or sets  the unit system ID 
    
    <hr>
    
    Getter Method
    
    Signature ``UnitSystem`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.FlexBodyBuilderUnitSystemType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UnitSystem`` 
    
    :param unitSystemID: 
    :type unitSystemID: :py:class:`NXOpen.Motion.FlexBodyBuilderUnitSystemType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    UseFrequencyFiltering: bool = ...
    """
    Returns or sets  the use frequency filtering option 
    
    <hr>
    
    Getter Method
    
    Signature ``UseFrequencyFiltering`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseFrequencyFiltering`` 
    
    :param useFrequencyFiltering: 
    :type useFrequencyFiltering: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    UseTransientDamping: bool = ...
    """
    Returns or sets  the use transient damping option 
    
    <hr>
    
    Getter Method
    
    Signature ``UseTransientDamping`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseTransientDamping`` 
    
    :param useTransientDamping: 
    :type useTransientDamping: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: FlexBodyBuilder = ...  # unknown typename


class Packaging(NXOpen.NXObject):
    """
    This class is an abstract class and base class for :py:class:`NXOpen.Motion.PackagingMeasure`, 
    :py:class:`NXOpen.Motion.PackagingTrace` and :py:class:`NXOpen.Motion.PackagingInterference` objects.  
    
    This is an abstract class, and cannot be created.
    
    .. versionadded:: NX4.0.0
    """
    Null: Packaging = ...  # unknown typename


class PackagingTrace(Packaging):
    """
    This class represents a Packaging Trace object.  
    
    A Trace object
    is used to define a request to trace moving objects of a
    mechanism during motion animation. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Motion.PackagingTraceBuilder`
    
    .. versionadded:: NX4.0.0
    """
    Null: PackagingTrace = ...  # unknown typename


class SelectControlPort(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a single object selection.  
    
    .. versionadded:: NX5.0.0
    """
    
    @typing.overload
    def SetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def SetValue(self, selection: ControlPort) -> None:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.ControlPort` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: ControlPort) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.ControlPort` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: ControlPort, view: NXOpen.View, point: NXOpen.Point3d) -> None:
        """
        The object being selected with the object's view and object's point
        
        Signature ``SetValue(selection, view, point)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.ControlPort` 
        :param view:  selected object view 
        :type view: :py:class:`NXOpen.View` 
        :param point:  selected object point 
        :type point: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, snapType: NXOpen.InferSnapTypeSnapType, selection1: ControlPort, view1: NXOpen.View, point1: NXOpen.Point3d, selection2: ControlPort, view2: NXOpen.View, point2: NXOpen.Point3d) -> None:
        """
        The object being selected with the objects view and objects point and snap information.
        
        Signature ``SetValue(snapType, selection1, view1, point1, selection2, view2, point2)`` 
        
        :param snapType:   snap point type 
        :type snapType: :py:class:`NXOpen.InferSnapTypeSnapType` 
        :param selection1:  first selected object  
        :type selection1: :py:class:`NXOpen.Motion.ControlPort` 
        :param view1:  first selected object view 
        :type view1: :py:class:`NXOpen.View` 
        :param point1:  first selected object point 
        :type point1: :py:class:`NXOpen.Point3d` 
        :param selection2:  second selected object  
        :type selection2: :py:class:`NXOpen.Motion.ControlPort` 
        :param view2:  second selected object view 
        :type view2: :py:class:`NXOpen.View` 
        :param point2:  second selected object point 
        :type point2: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: ControlPort, caeSubType: NXOpen.CaeObjectTypeCaeSubType, caeSubId: int) -> None:
        """
        The object being selected with CAE set object information.
        
        Signature ``SetValue(selection, caeSubType, caeSubId)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.ControlPort` 
        :param caeSubType:  CAE set object sub type 
        :type caeSubType: :py:class:`NXOpen.CaeObjectTypeCaeSubType` 
        :param caeSubId:  CAE set object sub id 
        :type caeSubId: int 
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.SetValue`.
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def GetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def GetValue(self) -> ControlPort:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :returns:  selected object  
        :rtype: :py:class:`NXOpen.Motion.ControlPort` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self, selection: ControlPort) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.ControlPort` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the object's view and point.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, view, point). selection is a :py:class:`NXOpen.Motion.ControlPort`.   selected object view is a :py:class:`NXOpen.View`.   selected object viewpoint is a :py:class:`NXOpen.Point3d`.   selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the objects view and point and snap information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (snapType, selection1, view1, point1, selection2, view2, point2). snapType is a :py:class:`NXOpen.InferSnapTypeSnapType`.    snap point typeselection1 is a :py:class:`NXOpen.Motion.ControlPort`.   first selected object view1 is a :py:class:`NXOpen.View`.   first selected object viewpoint1 is a :py:class:`NXOpen.Point3d`.   first selected object pointselection2 is a :py:class:`NXOpen.Motion.ControlPort`.   second selected object view2 is a :py:class:`NXOpen.View`.   second selected object viewpoint2 is a :py:class:`NXOpen.Point3d`.   second selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with CAE set object information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, caeSubType, caeSubId). selection is a :py:class:`NXOpen.Motion.ControlPort`.   selected object caeSubType is a :py:class:`NXOpen.CaeObjectTypeCaeSubType`.   CAE set object sub typecaeSubId is a int.   CAE set object sub id
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.GetValue`.
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Value: ControlPort = ...
    """
    Returns or sets  the object being selected
    
    <hr>
    
    Getter Method
    
    Signature ``Value`` 
    
    :returns:  selected object  
    :rtype: :py:class:`NXOpen.Motion.ControlPort` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Value`` 
    
    :param selection:  selected object  
    :type selection: :py:class:`NXOpen.Motion.ControlPort` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SelectControlPort = ...  # unknown typename


class BushingSphericalCoefficientTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BushingSphericalCoefficientTypes():
    """
    Definitions of bushing spherical coefficient component type 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Stiffness", "stiffness type"
       "Damping", "damping type"
       "Preload", "preload type"
    """
    Stiffness = 0  # BushingSphericalCoefficientTypesMemberType
    Damping = 1  # BushingSphericalCoefficientTypesMemberType
    Preload = 2  # BushingSphericalCoefficientTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ScalarTorqueBuilderScalarTorqueTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ScalarTorqueBuilderScalarTorqueType():
    """
    the torque type
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Joint", "Scalar Torque Type Joint. Requires a Joint as input."
       "Link", "Scalar Torque Type Link. Requires an action and base link attachment."
    """
    Joint = 0  # ScalarTorqueBuilderScalarTorqueTypeMemberType
    Link = 1  # ScalarTorqueBuilderScalarTorqueTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ScalarTorqueBuilderDirectionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ScalarTorqueBuilderDirectionType():
    """
    the direction 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "X", "Direction X"
       "Y", "Direction Y"
       "Z", "Direction Z"
    """
    X = 0  # ScalarTorqueBuilderDirectionTypeMemberType
    Y = 1  # ScalarTorqueBuilderDirectionTypeMemberType
    Z = 2  # ScalarTorqueBuilderDirectionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ScalarTorqueBuilderAppTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ScalarTorqueBuilderAppType():
    """
    the application type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "ActionReaction", "Action-Reaction"
       "ActionOnly", "ActionOnly"
    """
    ActionReaction = 0  # ScalarTorqueBuilderAppTypeMemberType
    ActionOnly = 1  # ScalarTorqueBuilderAppTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ScalarTorqueBuilder(MotionBuilder):
    """
    Represents a :py:class:`NXOpen.Motion.ScalarTorqueBuilder`  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.ScalarTorqueCollection.CreateScalarTorqueBuilder`
    
    .. versionadded:: NX6.0.0
    """
    
    class ScalarTorqueType():
        """
        the torque type
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Joint", "Scalar Torque Type Joint. Requires a Joint as input."
           "Link", "Scalar Torque Type Link. Requires an action and base link attachment."
        """
        Joint = 0  # ScalarTorqueBuilderScalarTorqueTypeMemberType
        Link = 1  # ScalarTorqueBuilderScalarTorqueTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DirectionType():
        """
        the direction 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "X", "Direction X"
           "Y", "Direction Y"
           "Z", "Direction Z"
        """
        X = 0  # ScalarTorqueBuilderDirectionTypeMemberType
        Y = 1  # ScalarTorqueBuilderDirectionTypeMemberType
        Z = 2  # ScalarTorqueBuilderDirectionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class AppType():
        """
        the application type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "ActionReaction", "Action-Reaction"
           "ActionOnly", "ActionOnly"
        """
        ActionReaction = 0  # ScalarTorqueBuilderAppTypeMemberType
        ActionOnly = 1  # ScalarTorqueBuilderAppTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    ActionCsys: NXOpen.CoordinateSystem = ...
    """
    Returns or sets  the action csys 
    
    <hr>
    
    Getter Method
    
    Signature ``ActionCsys`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``ActionCsys`` 
    
    :param actionCsysTag: 
    :type actionCsysTag: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ActionLink: SelectLink = ...
    """
    Returns  the action link attachment.  
    
    Required in type if Torque is Link.
    
    <hr>
    
    Getter Method
    
    Signature ``ActionLink`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectLink` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ActionPoint: NXOpen.Point = ...
    """
    Returns or sets  the action point 
    
    <hr>
    
    Getter Method
    
    Signature ``ActionPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``ActionPoint`` 
    
    :param actionPointTag: 
    :type actionPointTag: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ApplicationType: ScalarTorqueBuilderAppType = ...
    """
    Returns or sets  the scalar torque application type.  
    
    Default Type is Action-Reaction. 
    
    <hr>
    
    Getter Method
    
    Signature ``ApplicationType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.ScalarTorqueBuilderAppType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``ApplicationType`` 
    
    :param appType: 
    :type appType: :py:class:`NXOpen.Motion.ScalarTorqueBuilderAppType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    BaseCsys: NXOpen.CoordinateSystem = ...
    """
    Returns or sets  the base csys 
    
    <hr>
    
    Getter Method
    
    Signature ``BaseCsys`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``BaseCsys`` 
    
    :param baseCsysTag: 
    :type baseCsysTag: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    BaseLink: SelectLink = ...
    """
    Returns  the base link attachment.  
    
    Optional in type if Torque is Link.
    
    <hr>
    
    Getter Method
    
    Signature ``BaseLink`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectLink` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    BasePoint: NXOpen.Point = ...
    """
    Returns or sets  the base point 
    
    <hr>
    
    Getter Method
    
    Signature ``BasePoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``BasePoint`` 
    
    :param basePointTag: 
    :type basePointTag: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Direction: ScalarTorqueBuilderDirectionType = ...
    """
    Returns or sets  the control Output Variable direction.  
    
    Default Control Output Variable Direction is Z direction.
    
    <hr>
    
    Getter Method
    
    Signature ``Direction`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.ScalarTorqueBuilderDirectionType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Direction`` 
    
    :param direction: 
    :type direction: :py:class:`NXOpen.Motion.ScalarTorqueBuilderDirectionType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Function: NXOpen.CAE.Function = ...
    """
    Returns or sets  the function  
    
    <hr>
    
    Getter Method
    
    Signature ``Function`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CAE.Function` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Function`` 
    
    :param function: 
    :type function: :py:class:`NXOpen.CAE.Function` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Joint: SelectJoint = ...
    """
    Returns  the joint 
    
    <hr>
    
    Getter Method
    
    Signature ``Joint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectJoint` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Name: str = ...
    """
    Returns or sets  the name 
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Profile: SelectFieldData = ...
    """
    Returns  the profile 
    
    <hr>
    
    Getter Method
    
    Signature ``Profile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectFieldData` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    TorqueType: ScalarTorqueBuilderScalarTorqueType = ...
    """
    Returns or sets  the type.  
    
    Default type is Link. 
    
    <hr>
    
    Getter Method
    
    Signature ``TorqueType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.ScalarTorqueBuilderScalarTorqueType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``TorqueType`` 
    
    :param torqueType: 
    :type torqueType: :py:class:`NXOpen.Motion.ScalarTorqueBuilderScalarTorqueType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ValueExpression: NXOpen.Expression = ...
    """
    Returns  the value expression 
    
    <hr>
    
    Getter Method
    
    Signature ``ValueExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ValueType: ForceValueTypes = ...
    """
    Returns or sets  the value type 
    
    <hr>
    
    Getter Method
    
    Signature ``ValueType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.ForceValueTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ValueType`` 
    
    :param valueType: 
    :type valueType: :py:class:`NXOpen.Motion.ForceValueTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: ScalarTorqueBuilder = ...  # unknown typename


class BushingActuatorCoefficients(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a Motion BushingActuatorCoefficients
    
    .. versionadded:: NX12.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    CylindricalActuatorCoefficients: BushingCylindricalCoefficientsComponent = ...
    """
    Returns  the cylindrical actuator coefficients.  
    
    It is used in :py:class:`Motion.BushingBuilderBushingTypes.Cylindrical <Motion.BushingBuilderBushingTypes>` case 
    
    <hr>
    
    Getter Method
    
    Signature ``CylindricalActuatorCoefficients`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.BushingCylindricalCoefficientsComponent` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    GeneralTorsionalActuatorCoefficients: BushingGeneralCoefficientsComponent = ...
    """
    Returns  the general torsional actuator coefficients.  
    
    It is used in :py:class:`Motion.BushingBuilderBushingTypes.General <Motion.BushingBuilderBushingTypes>` case 
    
    <hr>
    
    Getter Method
    
    Signature ``GeneralTorsionalActuatorCoefficients`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.BushingGeneralCoefficientsComponent` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    GeneralTranslationalActuatorCoefficients: BushingGeneralCoefficientsComponent = ...
    """
    Returns  the general translational actuator coefficients.  
    
    It is used in :py:class:`Motion.BushingBuilderBushingTypes.General <Motion.BushingBuilderBushingTypes>` case 
    
    <hr>
    
    Getter Method
    
    Signature ``GeneralTranslationalActuatorCoefficients`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.BushingGeneralCoefficientsComponent` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    SphericalActuatorCoefficients: BushingSphericalCoefficientsComponent = ...
    """
    Returns  the spherical actuator coefficients.  
    
    It is used in :py:class:`Motion.BushingBuilderBushingTypes.Spherical <Motion.BushingBuilderBushingTypes>` case 
    
    <hr>
    
    Getter Method
    
    Signature ``SphericalActuatorCoefficients`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.BushingSphericalCoefficientsComponent` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    Null: BushingActuatorCoefficients = ...  # unknown typename


class ConnectorBuilderAttachmentTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ConnectorBuilderAttachmentType():
    """
    Definitions of connector attachment type  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Link", "connector is attacted to links"
       "SliderJoint", "connector is attacted to slider joint"
       "RevoluteJoint", "connector is attacted to revolute joint"
    """
    Link = 0  # ConnectorBuilderAttachmentTypeMemberType
    SliderJoint = 1  # ConnectorBuilderAttachmentTypeMemberType
    RevoluteJoint = 2  # ConnectorBuilderAttachmentTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ConnectorBuilderApplicationDirectionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ConnectorBuilderApplicationDirection():
    """
    Definitions of application direction  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Bidirectional", "Aplication direction: Bidirectional"
       "TensionOnly", "Aplication direction: Tension Only"
       "CompressionOnly", "Aplication direction: Compression Only"
    """
    Bidirectional = 0  # ConnectorBuilderApplicationDirectionMemberType
    TensionOnly = 1  # ConnectorBuilderApplicationDirectionMemberType
    CompressionOnly = 2  # ConnectorBuilderApplicationDirectionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ConnectorBuilder(MotionBuilder):
    """
    Represents ConnectorBuilder
    
    This is an abstract class, and cannot be created.
    
    .. versionadded:: NX6.0.0
    """
    
    class AttachmentType():
        """
        Definitions of connector attachment type  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Link", "connector is attacted to links"
           "SliderJoint", "connector is attacted to slider joint"
           "RevoluteJoint", "connector is attacted to revolute joint"
        """
        Link = 0  # ConnectorBuilderAttachmentTypeMemberType
        SliderJoint = 1  # ConnectorBuilderAttachmentTypeMemberType
        RevoluteJoint = 2  # ConnectorBuilderAttachmentTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ApplicationDirection():
        """
        Definitions of application direction  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Bidirectional", "Aplication direction: Bidirectional"
           "TensionOnly", "Aplication direction: Tension Only"
           "CompressionOnly", "Aplication direction: Compression Only"
        """
        Bidirectional = 0  # ConnectorBuilderApplicationDirectionMemberType
        TensionOnly = 1  # ConnectorBuilderApplicationDirectionMemberType
        CompressionOnly = 2  # ConnectorBuilderApplicationDirectionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    ActionLink: SelectLink = ...
    """
    Returns  the action link.  
    
    Only valid if :py:class:`Motion.ConnectorBuilderAttachmentType.Link <Motion.ConnectorBuilderAttachmentType>` is set. 
    
    <hr>
    
    Getter Method
    
    Signature ``ActionLink`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectLink` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ActionPoint: NXOpen.Point = ...
    """
    Returns or sets  the action point.  
    
    Only valid if :py:class:`Motion.ConnectorBuilderAttachmentType.Link <Motion.ConnectorBuilderAttachmentType>` is set. 
    
    <hr>
    
    Getter Method
    
    Signature ``ActionPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ActionPoint`` 
    
    :param actionPoint: 
    :type actionPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Attachment: ConnectorBuilderAttachmentType = ...
    """
    Returns or sets  the attachment type 
    
    <hr>
    
    Getter Method
    
    Signature ``Attachment`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.ConnectorBuilderAttachmentType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Attachment`` 
    
    :param attachment: 
    :type attachment: :py:class:`NXOpen.Motion.ConnectorBuilderAttachmentType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Joint: SelectJoint = ...
    """
    Returns  the joint .  
    
    Only valid if :py:class:`Motion.ConnectorBuilderAttachmentType.SliderJoint <Motion.ConnectorBuilderAttachmentType>` 
    or :py:class:`Motion.ConnectorBuilderAttachmentType.RevoluteJoint <Motion.ConnectorBuilderAttachmentType>` is set. 
    
    <hr>
    
    Getter Method
    
    Signature ``Joint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectJoint` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ReactionLink: SelectLink = ...
    """
    Returns  the reaction link.  
    
    Only valid if :py:class:`Motion.ConnectorBuilderAttachmentType.Link <Motion.ConnectorBuilderAttachmentType>` is set. 
    
    <hr>
    
    Getter Method
    
    Signature ``ReactionLink`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectLink` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ReactionPoint: NXOpen.Point = ...
    """
    Returns or sets  the reaction point.  
    
    Only valid if :py:class:`Motion.ConnectorBuilderAttachmentType.Link <Motion.ConnectorBuilderAttachmentType>` is set. 
    
    <hr>
    
    Getter Method
    
    Signature ``ReactionPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReactionPoint`` 
    
    :param reactionPoint: 
    :type reactionPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: ConnectorBuilder = ...  # unknown typename


class DamperBuilder(ConnectorBuilder):
    """
    Represents a DamperBuilder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.DamperCollection.CreateDamperBuilder`
    
    .. versionadded:: NX6.0.0
    """
    CoefficientCurveProfile: SelectFieldData = ...
    """
    Returns  the coefficient profile 
    
    <hr>
    
    Getter Method
    
    Signature ``CoefficientCurveProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectFieldData` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    CoefficientExpression: NXOpen.Expression = ...
    """
    Returns  the translational coefficient expression 
    
    <hr>
    
    Getter Method
    
    Signature ``CoefficientExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    CoefficientFunction: NXOpen.CAE.Function = ...
    """
    Returns or sets  the function tag.  
    
    Only valid if :py:class:`MotionConnectorCoefficientTypes.Spline <MotionConnectorCoefficientTypes>` is set 
    
    <hr>
    
    Getter Method
    
    Signature ``CoefficientFunction`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CAE.Function` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CoefficientFunction`` 
    
    :param function: 
    :type function: :py:class:`NXOpen.CAE.Function` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    CoefficientType: ConnectorCoefficientTypes = ...
    """
    Returns or sets  the coefficient type 
    
    <hr>
    
    Getter Method
    
    Signature ``CoefficientType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.ConnectorCoefficientTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CoefficientType`` 
    
    :param coefficientType: 
    :type coefficientType: :py:class:`NXOpen.Motion.ConnectorCoefficientTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    DamperAppDirection: ConnectorBuilderApplicationDirection = ...
    """
    Returns or sets  the application direction 
    
    <hr>
    
    Getter Method
    
    Signature ``DamperAppDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.ConnectorBuilderApplicationDirection` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DamperAppDirection`` 
    
    :param appDirection: 
    :type appDirection: :py:class:`NXOpen.Motion.ConnectorBuilderApplicationDirection` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    DamperCustomizedSolver: bool = ...
    """
    Returns or sets  the option of using Customized Solver 
    
    <hr>
    
    Getter Method
    
    Signature ``DamperCustomizedSolver`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DamperCustomizedSolver`` 
    
    :param customizedSolver: 
    :type customizedSolver: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Name: str = ...
    """
    Returns or sets  the name 
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    TorsionalCoefficientExpression: NXOpen.Expression = ...
    """
    Returns  the torsional coefficient expression 
    
    <hr>
    
    Getter Method
    
    Signature ``TorsionalCoefficientExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: DamperBuilder = ...  # unknown typename


class SelectLink(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a single object selection.  
    
    .. versionadded:: NX5.0.0
    """
    
    @typing.overload
    def SetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def SetValue(self, selection: Link) -> None:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.Link` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: Link) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.Link` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: Link, view: NXOpen.View, point: NXOpen.Point3d) -> None:
        """
        The object being selected with the object's view and object's point
        
        Signature ``SetValue(selection, view, point)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.Link` 
        :param view:  selected object view 
        :type view: :py:class:`NXOpen.View` 
        :param point:  selected object point 
        :type point: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, snapType: NXOpen.InferSnapTypeSnapType, selection1: Link, view1: NXOpen.View, point1: NXOpen.Point3d, selection2: Link, view2: NXOpen.View, point2: NXOpen.Point3d) -> None:
        """
        The object being selected with the objects view and objects point and snap information.
        
        Signature ``SetValue(snapType, selection1, view1, point1, selection2, view2, point2)`` 
        
        :param snapType:   snap point type 
        :type snapType: :py:class:`NXOpen.InferSnapTypeSnapType` 
        :param selection1:  first selected object  
        :type selection1: :py:class:`NXOpen.Motion.Link` 
        :param view1:  first selected object view 
        :type view1: :py:class:`NXOpen.View` 
        :param point1:  first selected object point 
        :type point1: :py:class:`NXOpen.Point3d` 
        :param selection2:  second selected object  
        :type selection2: :py:class:`NXOpen.Motion.Link` 
        :param view2:  second selected object view 
        :type view2: :py:class:`NXOpen.View` 
        :param point2:  second selected object point 
        :type point2: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: Link, caeSubType: NXOpen.CaeObjectTypeCaeSubType, caeSubId: int) -> None:
        """
        The object being selected with CAE set object information.
        
        Signature ``SetValue(selection, caeSubType, caeSubId)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.Link` 
        :param caeSubType:  CAE set object sub type 
        :type caeSubType: :py:class:`NXOpen.CaeObjectTypeCaeSubType` 
        :param caeSubId:  CAE set object sub id 
        :type caeSubId: int 
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.SetValue`.
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def GetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def GetValue(self) -> Link:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :returns:  selected object  
        :rtype: :py:class:`NXOpen.Motion.Link` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self, selection: Link) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.Link` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the object's view and point.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, view, point). selection is a :py:class:`NXOpen.Motion.Link`.   selected object view is a :py:class:`NXOpen.View`.   selected object viewpoint is a :py:class:`NXOpen.Point3d`.   selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the objects view and point and snap information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (snapType, selection1, view1, point1, selection2, view2, point2). snapType is a :py:class:`NXOpen.InferSnapTypeSnapType`.    snap point typeselection1 is a :py:class:`NXOpen.Motion.Link`.   first selected object view1 is a :py:class:`NXOpen.View`.   first selected object viewpoint1 is a :py:class:`NXOpen.Point3d`.   first selected object pointselection2 is a :py:class:`NXOpen.Motion.Link`.   second selected object view2 is a :py:class:`NXOpen.View`.   second selected object viewpoint2 is a :py:class:`NXOpen.Point3d`.   second selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with CAE set object information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, caeSubType, caeSubId). selection is a :py:class:`NXOpen.Motion.Link`.   selected object caeSubType is a :py:class:`NXOpen.CaeObjectTypeCaeSubType`.   CAE set object sub typecaeSubId is a int.   CAE set object sub id
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.GetValue`.
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Value: Link = ...
    """
    Returns or sets  the object being selected
    
    <hr>
    
    Getter Method
    
    Signature ``Value`` 
    
    :returns:  selected object  
    :rtype: :py:class:`NXOpen.Motion.Link` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Value`` 
    
    :param selection:  selected object  
    :type selection: :py:class:`NXOpen.Motion.Link` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SelectLink = ...  # unknown typename


class SplineBeamPropertyBuilderDampingTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SplineBeamPropertyBuilderDampingTypes():
    """
    the damping type
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Viscous", "Viscous"
       "Structural", "Structural"
    """
    Viscous = 0  # SplineBeamPropertyBuilderDampingTypesMemberType
    Structural = 1  # SplineBeamPropertyBuilderDampingTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SplineBeamPropertyBuilder(MotionBuilder):
    """
    Represents a :py:class:`Motion.SplineBeamPropertyBuilder` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.SplineBeamPropertyCollection.CreateSplineBeamPropertyBuilder`
    
    Default values.
    
    ======================================  ================================================
    Property                                Value
    ======================================  ================================================
    AsyTimoshenkoCorrection.Value           0 
    --------------------------------------  ------------------------------------------------
    AszTimoshenkoCorrection.Value           0 
    --------------------------------------  ------------------------------------------------
    CustomizedMaterial.Density.Value        7.8e-6 (millimeters part), 7.3e-4 (inches part) 
    --------------------------------------  ------------------------------------------------
    CustomizedMaterial.PoissonRatio.Value   0.3 
    --------------------------------------  ------------------------------------------------
    CustomizedMaterial.YoungModulus.Value   2e+8 (millimeters part), 2.9e+7 (inches part) 
    --------------------------------------  ------------------------------------------------
    DampingRatio.Value                      0 
    --------------------------------------  ------------------------------------------------
    DampingType                             Viscous 
    ======================================  ================================================
    
    .. versionadded:: NX12.0.0
    """
    
    class DampingTypes():
        """
        the damping type
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Viscous", "Viscous"
           "Structural", "Structural"
        """
        Viscous = 0  # SplineBeamPropertyBuilderDampingTypesMemberType
        Structural = 1  # SplineBeamPropertyBuilderDampingTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AsyTimoshenkoCorrection: NXOpen.Expression = ...
    """
    Returns  the ASY Timoshenko correction 
    
    <hr>
    
    Getter Method
    
    Signature ``AsyTimoshenkoCorrection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    AszTimoshenkoCorrection: NXOpen.Expression = ...
    """
    Returns  the ASZ Timoshenko correction 
    
    <hr>
    
    Getter Method
    
    Signature ``AszTimoshenkoCorrection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    CustomizedMaterial: CustomizedMaterialBuilder = ...
    """
    Returns  the customized material 
    
    <hr>
    
    Getter Method
    
    Signature ``CustomizedMaterial`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.CustomizedMaterialBuilder` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    DampingRatio: NXOpen.Expression = ...
    """
    Returns  the damping ratio 
    
    <hr>
    
    Getter Method
    
    Signature ``DampingRatio`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    DampingType: SplineBeamPropertyBuilderDampingTypes = ...
    """
    Returns or sets  the damping method 
    
    <hr>
    
    Getter Method
    
    Signature ``DampingType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SplineBeamPropertyBuilderDampingTypes` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``DampingType`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Motion.SplineBeamPropertyBuilderDampingTypes` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    IsBeamCrossDamping: bool = ...
    """
    Returns or sets  the beam cross damping flag 
    
    <hr>
    
    Getter Method
    
    Signature ``IsBeamCrossDamping`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``IsBeamCrossDamping`` 
    
    :param type: 
    :type type: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Name: str = ...
    """
    Returns or sets  the name of the spline beam object 
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: SplineBeamPropertyBuilder = ...  # unknown typename


class PhysicsConversionBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Motion.PhysicsConversionBuilder` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.MotionSession.CreatePhysicsConversionBuilder`
    
    .. versionadded:: NX8.0.0
    """
    
    def ActiveAll(self) -> None:
        """
        The active button.  
        
        Call this method to make all physics items active. 
        
        Signature ``ActiveAll()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def DeactiveAll(self) -> None:
        """
        The deactive button.  
        
        Call this method to make all physics items inactive. 
        
        Signature ``DeactiveAll()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def GetPhysics(self) -> tuple:
        """
        The physics data.  
        
        Call this method to get the physics data. 
        
        Signature ``GetPhysics()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (physicsProto, partOccurrence). physicsProto is a list of :py:class:`NXOpen.NXObject`. partOccurrence is a list of :py:class:`NXOpen.Assemblies.Component`. 
        
        .. versionadded:: NX8.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def UpdateStatus(self, physicsProto: 'list[NXOpen.NXObject]', partOccurrence: 'list[NXOpen.Assemblies.Component]', active: bool) -> None:
        """
        The data update accordingly.  
        
        Call this method to make part of the physics items active or inactive. 
        
        Signature ``UpdateStatus(physicsProto, partOccurrence, active)`` 
        
        :param physicsProto: 
        :type physicsProto: list of :py:class:`NXOpen.NXObject` 
        :param partOccurrence: 
        :type partOccurrence: list of :py:class:`NXOpen.Assemblies.Component` 
        :param active: 
        :type active: bool 
        
        .. versionadded:: NX8.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    Null: PhysicsConversionBuilder = ...  # unknown typename


class ControlInputCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Control Input objects   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Motion.MotionManager`
    
    .. versionadded:: NX11.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateControlInputBuilder(self, controlinput: ControlInput) -> ControlInputBuilder:
        """
        Creates a :py:class:`NXOpen.Motion.ControlInputBuilder`  
        
        Signature ``CreateControlInputBuilder(controlinput)`` 
        
        :param controlinput: 
        :type controlinput: :py:class:`NXOpen.Motion.ControlInput` 
        :returns: 
        :rtype: :py:class:`NXOpen.Motion.ControlInputBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def FindObject(self, name: str) -> ControlInput:
        """
        Finds the :py:class:`NXOpen.Motion.ControlInput` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Motion.ControlInput`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Motion.ControlInput` with this name.  
        :rtype: :py:class:`NXOpen.Motion.ControlInput` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    


class PMDCMotorCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of motion pmdc motor   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Motion.MotionManager`
    
    .. versionadded:: NX6.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreatePmdcMotorBuilder(self, pmdcMotor: PMDCMotor) -> PMDCMotorBuilder:
        """
        Return  :py:class:`NXOpen.Motion.PMDCMotorBuilder` object   
        
        Signature ``CreatePmdcMotorBuilder(pmdcMotor)`` 
        
        :param pmdcMotor:  :py:class:`NXOpen.Motion.PMDCMotor` to be edited,                                                                      if None then create a new one  
        :type pmdcMotor: :py:class:`NXOpen.Motion.PMDCMotor` 
        :returns:  PMDCMotorBuilder object  
        :rtype: :py:class:`NXOpen.Motion.PMDCMotorBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: nx_motion_motor ("NX Motion Motor")
        """
        ...
    
    
    def FindObject(self, name: str) -> PMDCMotor:
        """
        Finds the :py:class:`NXOpen.Motion.PMDCMotor` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name: 
        :type name: str 
        :returns: 
        :rtype: :py:class:`NXOpen.Motion.PMDCMotor` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: nx_motion_motor ("NX Motion Motor")
        """
        ...
    


class VectorForce(MotionObject, IGraphSource):
    """
    Represents a vector force   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Motion.VectorForceBuilder`
    
    .. versionadded:: NX5.0.0
    """
    Null: VectorForce = ...  # unknown typename


class BodyContactSphereToCADCoulombFrictionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BodyContactSphereToCADCoulombFriction():
    """
    the enum for friction option  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Off", " - "
       "On", " - "
    """
    Off = 0  # BodyContactSphereToCADCoulombFrictionMemberType
    On = 1  # BodyContactSphereToCADCoulombFrictionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BodyContactSphereToCAD(NXOpen.NXObject):
    """
    Represents a :py:class:`NXOpen.Motion.BodyContactSphereToCAD`   
    
    .. versionadded:: NX12.0.0
    """
    
    class CoulombFriction():
        """
        the enum for friction option  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Off", " - "
           "On", " - "
        """
        Off = 0  # BodyContactSphereToCADCoulombFrictionMemberType
        On = 1  # BodyContactSphereToCADCoulombFrictionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    BodyAngleTolerance: NXOpen.Expression = ...
    """
    Returns  the action angle tolerance 
    
    <hr>
    
    Getter Method
    
    Signature ``BodyAngleTolerance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    BodyDistanceTolerance: NXOpen.Expression = ...
    """
    Returns  the action distance tolerance 
    
    <hr>
    
    Getter Method
    
    Signature ``BodyDistanceTolerance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    BodyEnableMaxFacetSize: bool = ...
    """
    Returns or sets  the action enable max facet size 
    
    <hr>
    
    Getter Method
    
    Signature ``BodyEnableMaxFacetSize`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BodyEnableMaxFacetSize`` 
    
    :param actionEnableMaxFacetSize: 
    :type actionEnableMaxFacetSize: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    BodyMaxFacetSize: NXOpen.Expression = ...
    """
    Returns  the action max facet size 
    
    <hr>
    
    Getter Method
    
    Signature ``BodyMaxFacetSize`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    CoulombFrictionOption: BodyContactSphereToCADCoulombFriction = ...
    """
    Returns or sets  the coulomb friction option 
    
    <hr>
    
    Getter Method
    
    Signature ``CoulombFrictionOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.BodyContactSphereToCADCoulombFriction` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CoulombFrictionOption`` 
    
    :param coulombFrictionOption: 
    :type coulombFrictionOption: :py:class:`NXOpen.Motion.BodyContactSphereToCADCoulombFriction` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    DynamicCoefficient: NXOpen.Expression = ...
    """
    Returns  the dynamic coefficient 
    
    <hr>
    
    Getter Method
    
    Signature ``DynamicCoefficient`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    ForceExponent: NXOpen.Expression = ...
    """
    Returns  the force exponent 
    
    <hr>
    
    Getter Method
    
    Signature ``ForceExponent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    FrictionVelocity: NXOpen.Expression = ...
    """
    Returns  the friction velocity 
    
    <hr>
    
    Getter Method
    
    Signature ``FrictionVelocity`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    MaterialDamping: NXOpen.Expression = ...
    """
    Returns  the material damping 
    
    <hr>
    
    Getter Method
    
    Signature ``MaterialDamping`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    MaxPenetrationDepth: NXOpen.Expression = ...
    """
    Returns  the max penetration depth 
    
    <hr>
    
    Getter Method
    
    Signature ``MaxPenetrationDepth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    PartialSphereAngle: NXOpen.Expression = ...
    """
    Returns  the partial sphere angle
    
    <hr>
    
    Getter Method
    
    Signature ``PartialSphereAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    PartialSphereOption: bool = ...
    """
    Returns or sets  the partial sphere option
    
    <hr>
    
    Getter Method
    
    Signature ``PartialSphereOption`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PartialSphereOption`` 
    
    :param partialSphereOption: 
    :type partialSphereOption: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    PartialSphereVector: NXOpen.Direction = ...
    """
    Returns or sets  the partial sphere vector
    
    <hr>
    
    Getter Method
    
    Signature ``PartialSphereVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PartialSphereVector`` 
    
    :param partialSphereVector: 
    :type partialSphereVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SphereMaxFacetSize: NXOpen.Expression = ...
    """
    Returns  the sphere max facet size
    
    <hr>
    
    Getter Method
    
    Signature ``SphereMaxFacetSize`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    SphereRadius: NXOpen.Expression = ...
    """
    Returns  the sphere radius
    
    <hr>
    
    Getter Method
    
    Signature ``SphereRadius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    StaticCoefficient: NXOpen.Expression = ...
    """
    Returns  the static coefficient 
    
    <hr>
    
    Getter Method
    
    Signature ``StaticCoefficient`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    StictionVelocity: NXOpen.Expression = ...
    """
    Returns  the stiction velocity 
    
    <hr>
    
    Getter Method
    
    Signature ``StictionVelocity`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    Stiffness: NXOpen.Expression = ...
    """
    Returns  the stiffness 
    
    <hr>
    
    Getter Method
    
    Signature ``Stiffness`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    SuperElementIncrement: int = ...
    """
    Returns or sets  the first super element increment 
    
    <hr>
    
    Getter Method
    
    Signature ``SuperElementIncrement`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``SuperElementIncrement`` 
    
    :param superElementIncrement: 
    :type superElementIncrement: int 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SuperElementLink: SelectLink = ...
    """
    Returns  the first super element link 
    
    <hr>
    
    Getter Method
    
    Signature ``SuperElementLink`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectLink` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SuperElementReportInstance: int = ...
    """
    Returns or sets  the super element report instance 
    
    <hr>
    
    Getter Method
    
    Signature ``SuperElementReportInstance`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``SuperElementReportInstance`` 
    
    :param superElementReportInstance: 
    :type superElementReportInstance: int 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    TessellationFile: str = ...
    """
    Returns or sets  the tessellation  file
    
    <hr>
    
    Getter Method
    
    Signature ``TessellationFile`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``TessellationFile`` 
    
    :param fileName: 
    :type fileName: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    UseTessellationFile: bool = ...
    """
    Returns or sets  the tessellation file option
    
    <hr>
    
    Getter Method
    
    Signature ``UseTessellationFile`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``UseTessellationFile`` 
    
    :param fileOption: 
    :type fileOption: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: BodyContactSphereToCAD = ...  # unknown typename


class MotionSolutionBuilderSolutionTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MotionSolutionBuilderSolutionTypes():
    """
    Solution type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Normal", "Normal run"
       "Articulation", "Articulation run"
       "Spreadsheet", "Spreadsheet run"
       "Flexbody", "Flexible Body Dynamics run"
    """
    Normal = 0  # MotionSolutionBuilderSolutionTypesMemberType
    Articulation = 1  # MotionSolutionBuilderSolutionTypesMemberType
    Spreadsheet = 2  # MotionSolutionBuilderSolutionTypesMemberType
    Flexbody = 3  # MotionSolutionBuilderSolutionTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MotionSolutionBuilderAnalysisTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MotionSolutionBuilderAnalysisTypes():
    """
    Analysis type
    The LMS Solver does not support :py:class:`NXOpen.Motion.MotionSolutionBuilderAnalysisTypes.Control <NXOpen.Motion.MotionSolutionBuilderAnalysisTypes>`.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Dynamic", "Dynamic or Kinematic analysis"
       "Static", "Static analysis"
       "Control", " - "
    """
    Dynamic = 0  # MotionSolutionBuilderAnalysisTypesMemberType
    Static = 1  # MotionSolutionBuilderAnalysisTypesMemberType
    Control = 2  # MotionSolutionBuilderAnalysisTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MotionSolutionBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Motion.MotionSolutionBuilder`
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.MotionSolutionCollection.CreateSolutionBuilder`
    
    .. versionadded:: NX5.0.0
    """
    
    class SolutionTypes():
        """
        Solution type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Normal", "Normal run"
           "Articulation", "Articulation run"
           "Spreadsheet", "Spreadsheet run"
           "Flexbody", "Flexible Body Dynamics run"
        """
        Normal = 0  # MotionSolutionBuilderSolutionTypesMemberType
        Articulation = 1  # MotionSolutionBuilderSolutionTypesMemberType
        Spreadsheet = 2  # MotionSolutionBuilderSolutionTypesMemberType
        Flexbody = 3  # MotionSolutionBuilderSolutionTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class AnalysisTypes():
        """
        Analysis type
        The LMS Solver does not support :py:class:`NXOpen.Motion.MotionSolutionBuilderAnalysisTypes.Control <NXOpen.Motion.MotionSolutionBuilderAnalysisTypes>`.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Dynamic", "Dynamic or Kinematic analysis"
           "Static", "Static analysis"
           "Control", " - "
        """
        Dynamic = 0  # MotionSolutionBuilderAnalysisTypesMemberType
        Static = 1  # MotionSolutionBuilderAnalysisTypesMemberType
        Control = 2  # MotionSolutionBuilderAnalysisTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AdamsSolverProperty: AdamsSolverProperty = ...
    """
    Returns or sets  the Adams Solver property 
    
    <hr>
    
    Getter Method
    
    Signature ``AdamsSolverProperty`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.AdamsSolverProperty` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AdamsSolverProperty`` 
    
    :param adamsSolverProperty: 
    :type adamsSolverProperty: :py:class:`NXOpen.Motion.AdamsSolverProperty` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    AnalysisType: MotionSolutionBuilderAnalysisTypes = ...
    """
    Returns or sets  the analysis type 
    
    <hr>
    
    Getter Method
    
    Signature ``AnalysisType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.MotionSolutionBuilderAnalysisTypes` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AnalysisType`` 
    
    :param analysisType: 
    :type analysisType: :py:class:`NXOpen.Motion.MotionSolutionBuilderAnalysisTypes` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Description: str = ...
    """
    Returns or sets  the description 
    
    <hr>
    
    Getter Method
    
    Signature ``Description`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Description`` 
    
    :param description: 
    :type description: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    GravityValueExpression: NXOpen.Expression = ...
    """
    Returns  the gravity value expression
    
    <hr>
    
    Getter Method
    
    Signature ``GravityValueExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    GravityVector: NXOpen.Direction = ...
    """
    Returns or sets  the gravity vector 
    
    <hr>
    
    Getter Method
    
    Signature ``GravityVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GravityVector`` 
    
    :param gravityVector: 
    :type gravityVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    IsSkipStep: bool = ...
    """
    Returns or sets  the skipped steps option
    
    <hr>
    
    Getter Method
    
    Signature ``IsSkipStep`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsSkipStep`` 
    
    :param isSkipStep: 
    :type isSkipStep: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    LmsSolverProperty: LmsSolverProperty = ...
    """
    Returns or sets  the LMS Solver property 
    
    <hr>
    
    Getter Method
    
    Signature ``LmsSolverProperty`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.LmsSolverProperty` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LmsSolverProperty`` 
    
    :param lmsSolverProperty: 
    :type lmsSolverProperty: :py:class:`NXOpen.Motion.LmsSolverProperty` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Name: str = ...
    """
    Returns or sets  the name 
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    RecurdynSolverProperty: RecurdynSolverProperty = ...
    """
    Returns or sets  the Recurdyn Solver property 
    
    <hr>
    
    Getter Method
    
    Signature ``RecurdynSolverProperty`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.RecurdynSolverProperty` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RecurdynSolverProperty`` 
    
    :param recurdynSolverProperty: 
    :type recurdynSolverProperty: :py:class:`NXOpen.Motion.RecurdynSolverProperty` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SkipSteps: str = ...
    """
    Returns or sets  the skipped steps
    
    <hr>
    
    Getter Method
    
    Signature ``SkipSteps`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SkipSteps`` 
    
    :param skipSteps: 
    :type skipSteps: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SolutionType: MotionSolutionBuilderSolutionTypes = ...
    """
    Returns or sets  the solution type 
    
    <hr>
    
    Getter Method
    
    Signature ``SolutionType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.MotionSolutionBuilderSolutionTypes` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SolutionType`` 
    
    :param solutionType: 
    :type solutionType: :py:class:`NXOpen.Motion.MotionSolutionBuilderSolutionTypes` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    StaticAnalysis: bool = ...
    """
    Returns or sets  the Static Analysis option
    
    <hr>
    
    Getter Method
    
    Signature ``StaticAnalysis`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StaticAnalysis`` 
    
    :param staticAnalysis: 
    :type staticAnalysis: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Step: int = ...
    """
    Returns or sets  the step 
    
    <hr>
    
    Getter Method
    
    Signature ``Step`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Step`` 
    
    :param step: 
    :type step: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    TimeExpression: NXOpen.Expression = ...
    """
    Returns  the time expression 
    
    <hr>
    
    Getter Method
    
    Signature ``TimeExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: MotionSolutionBuilder = ...  # unknown typename


class PortAssociation(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`Motion.PortAssociation`.  
    
    This class
    contains the basic port information needed by InputPortAssociation and OutputPortAssociation items
    
    .. versionadded:: NX11.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Name: str = ...
    """
    Returns or sets  the mechatronics port name 
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Offset: NXOpen.Expression = ...
    """
    Returns  the offset 
    
    <hr>
    
    Getter Method
    
    Signature ``Offset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ScaleFactor: NXOpen.Expression = ...
    """
    Returns  the scale factor 
    
    <hr>
    
    Getter Method
    
    Signature ``ScaleFactor`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: PortAssociation = ...  # unknown typename


class InputPortAssociation(PortAssociation):
    """
    Represents a :py:class:`Motion.InputPortAssociation`.  
    
    This class
    contains the port association for the inputs of a mechatronics element 
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.MechatronicsBuilder.NewInputListItem`
    
    .. versionadded:: NX11.0.0
    """
    AssociatedPortName: str = ...
    """
    Returns  the created and associated port name 
    
    <hr>
    
    Getter Method
    
    Signature ``AssociatedPortName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Port: ControlPort = ...
    """
    Returns or sets  the associated port 
    
    <hr>
    
    Getter Method
    
    Signature ``Port`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.ControlPort` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Port`` 
    
    :param port: 
    :type port: :py:class:`NXOpen.Motion.ControlPort` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: InputPortAssociation = ...  # unknown typename


class SelectJoint(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a single object selection.  
    
    .. versionadded:: NX5.0.0
    """
    
    @typing.overload
    def SetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def SetValue(self, selection: Joint) -> None:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.Joint` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: Joint) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.Joint` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: Joint, view: NXOpen.View, point: NXOpen.Point3d) -> None:
        """
        The object being selected with the object's view and object's point
        
        Signature ``SetValue(selection, view, point)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.Joint` 
        :param view:  selected object view 
        :type view: :py:class:`NXOpen.View` 
        :param point:  selected object point 
        :type point: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, snapType: NXOpen.InferSnapTypeSnapType, selection1: Joint, view1: NXOpen.View, point1: NXOpen.Point3d, selection2: Joint, view2: NXOpen.View, point2: NXOpen.Point3d) -> None:
        """
        The object being selected with the objects view and objects point and snap information.
        
        Signature ``SetValue(snapType, selection1, view1, point1, selection2, view2, point2)`` 
        
        :param snapType:   snap point type 
        :type snapType: :py:class:`NXOpen.InferSnapTypeSnapType` 
        :param selection1:  first selected object  
        :type selection1: :py:class:`NXOpen.Motion.Joint` 
        :param view1:  first selected object view 
        :type view1: :py:class:`NXOpen.View` 
        :param point1:  first selected object point 
        :type point1: :py:class:`NXOpen.Point3d` 
        :param selection2:  second selected object  
        :type selection2: :py:class:`NXOpen.Motion.Joint` 
        :param view2:  second selected object view 
        :type view2: :py:class:`NXOpen.View` 
        :param point2:  second selected object point 
        :type point2: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: Joint, caeSubType: NXOpen.CaeObjectTypeCaeSubType, caeSubId: int) -> None:
        """
        The object being selected with CAE set object information.
        
        Signature ``SetValue(selection, caeSubType, caeSubId)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.Joint` 
        :param caeSubType:  CAE set object sub type 
        :type caeSubType: :py:class:`NXOpen.CaeObjectTypeCaeSubType` 
        :param caeSubId:  CAE set object sub id 
        :type caeSubId: int 
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.SetValue`.
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def GetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def GetValue(self) -> Joint:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :returns:  selected object  
        :rtype: :py:class:`NXOpen.Motion.Joint` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self, selection: Joint) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.Joint` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the object's view and point.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, view, point). selection is a :py:class:`NXOpen.Motion.Joint`.   selected object view is a :py:class:`NXOpen.View`.   selected object viewpoint is a :py:class:`NXOpen.Point3d`.   selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the objects view and point and snap information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (snapType, selection1, view1, point1, selection2, view2, point2). snapType is a :py:class:`NXOpen.InferSnapTypeSnapType`.    snap point typeselection1 is a :py:class:`NXOpen.Motion.Joint`.   first selected object view1 is a :py:class:`NXOpen.View`.   first selected object viewpoint1 is a :py:class:`NXOpen.Point3d`.   first selected object pointselection2 is a :py:class:`NXOpen.Motion.Joint`.   second selected object view2 is a :py:class:`NXOpen.View`.   second selected object viewpoint2 is a :py:class:`NXOpen.Point3d`.   second selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with CAE set object information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, caeSubType, caeSubId). selection is a :py:class:`NXOpen.Motion.Joint`.   selected object caeSubType is a :py:class:`NXOpen.CaeObjectTypeCaeSubType`.   CAE set object sub typecaeSubId is a int.   CAE set object sub id
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.GetValue`.
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Value: Joint = ...
    """
    Returns or sets  the object being selected
    
    <hr>
    
    Getter Method
    
    Signature ``Value`` 
    
    :returns:  selected object  
    :rtype: :py:class:`NXOpen.Motion.Joint` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Value`` 
    
    :param selection:  selected object  
    :type selection: :py:class:`NXOpen.Motion.Joint` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SelectJoint = ...  # unknown typename


class LoadTransfer(MotionObject):
    """
    Represents a Motion Load Transfer class   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Motion.LoadTransferBuilder`
    
    .. versionadded:: NX9.0.0
    """
    Null: LoadTransfer = ...  # unknown typename


class AdoptionPair(NXOpen.NXObject):
    """
    Represents a adoption pair object  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.AdoptionPairCollection.CreatePair`
    
    .. versionadded:: NX11.0.0
    """
    Adoption: MotionObject = ...
    """
    Returns  an adoption object
    
    <hr>
    
    Getter Method
    
    Signature ``Adoption`` 
    
    :returns:  adoption motion object  
    :rtype: :py:class:`NXOpen.Motion.MotionObject` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Source: NXOpen.NXObject = ...
    """
    Returns  a source object
    
    <hr>
    
    Getter Method
    
    Signature ``Source`` 
    
    :returns:  source assembly object  
    :rtype: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: AdoptionPair = ...  # unknown typename


class SelectTirePropertyTno(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a single object selection.  
    
    .. versionadded:: NX5.0.0
    """
    
    @typing.overload
    def SetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def SetValue(self, selection: TirePropertyTno) -> None:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.TirePropertyTno` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: TirePropertyTno) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.TirePropertyTno` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: TirePropertyTno, view: NXOpen.View, point: NXOpen.Point3d) -> None:
        """
        The object being selected with the object's view and object's point
        
        Signature ``SetValue(selection, view, point)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.TirePropertyTno` 
        :param view:  selected object view 
        :type view: :py:class:`NXOpen.View` 
        :param point:  selected object point 
        :type point: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, snapType: NXOpen.InferSnapTypeSnapType, selection1: TirePropertyTno, view1: NXOpen.View, point1: NXOpen.Point3d, selection2: TirePropertyTno, view2: NXOpen.View, point2: NXOpen.Point3d) -> None:
        """
        The object being selected with the objects view and objects point and snap information.
        
        Signature ``SetValue(snapType, selection1, view1, point1, selection2, view2, point2)`` 
        
        :param snapType:   snap point type 
        :type snapType: :py:class:`NXOpen.InferSnapTypeSnapType` 
        :param selection1:  first selected object  
        :type selection1: :py:class:`NXOpen.Motion.TirePropertyTno` 
        :param view1:  first selected object view 
        :type view1: :py:class:`NXOpen.View` 
        :param point1:  first selected object point 
        :type point1: :py:class:`NXOpen.Point3d` 
        :param selection2:  second selected object  
        :type selection2: :py:class:`NXOpen.Motion.TirePropertyTno` 
        :param view2:  second selected object view 
        :type view2: :py:class:`NXOpen.View` 
        :param point2:  second selected object point 
        :type point2: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: TirePropertyTno, caeSubType: NXOpen.CaeObjectTypeCaeSubType, caeSubId: int) -> None:
        """
        The object being selected with CAE set object information.
        
        Signature ``SetValue(selection, caeSubType, caeSubId)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.TirePropertyTno` 
        :param caeSubType:  CAE set object sub type 
        :type caeSubType: :py:class:`NXOpen.CaeObjectTypeCaeSubType` 
        :param caeSubId:  CAE set object sub id 
        :type caeSubId: int 
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.SetValue`.
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def GetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def GetValue(self) -> TirePropertyTno:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :returns:  selected object  
        :rtype: :py:class:`NXOpen.Motion.TirePropertyTno` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self, selection: TirePropertyTno) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.TirePropertyTno` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the object's view and point.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, view, point). selection is a :py:class:`NXOpen.Motion.TirePropertyTno`.   selected object view is a :py:class:`NXOpen.View`.   selected object viewpoint is a :py:class:`NXOpen.Point3d`.   selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the objects view and point and snap information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (snapType, selection1, view1, point1, selection2, view2, point2). snapType is a :py:class:`NXOpen.InferSnapTypeSnapType`.    snap point typeselection1 is a :py:class:`NXOpen.Motion.TirePropertyTno`.   first selected object view1 is a :py:class:`NXOpen.View`.   first selected object viewpoint1 is a :py:class:`NXOpen.Point3d`.   first selected object pointselection2 is a :py:class:`NXOpen.Motion.TirePropertyTno`.   second selected object view2 is a :py:class:`NXOpen.View`.   second selected object viewpoint2 is a :py:class:`NXOpen.Point3d`.   second selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with CAE set object information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, caeSubType, caeSubId). selection is a :py:class:`NXOpen.Motion.TirePropertyTno`.   selected object caeSubType is a :py:class:`NXOpen.CaeObjectTypeCaeSubType`.   CAE set object sub typecaeSubId is a int.   CAE set object sub id
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.GetValue`.
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Value: TirePropertyTno = ...
    """
    Returns or sets  the object being selected
    
    <hr>
    
    Getter Method
    
    Signature ``Value`` 
    
    :returns:  selected object  
    :rtype: :py:class:`NXOpen.Motion.TirePropertyTno` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Value`` 
    
    :param selection:  selected object  
    :type selection: :py:class:`NXOpen.Motion.TirePropertyTno` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SelectTirePropertyTno = ...  # unknown typename


class TirePropertyMotorcycleCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Motion Motorcycle Tire Property elements   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Motion.MotionManager`
    
    .. versionadded:: NX11.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateTirePropertyMotorcycleBuilder(self, tireProperty: TirePropertyMotorcycle) -> TirePropertyMotorcycleBuilder:
        """
        Return  :py:class:`NXOpen.Motion.TirePropertyMotorcycleBuilder` object   
        
        Signature ``CreateTirePropertyMotorcycleBuilder(tireProperty)`` 
        
        :param tireProperty:  :py:class:`NXOpen.Motion.TirePropertyMotorcycle`                                                                                                                to be edited, if None then create a new one  
        :type tireProperty: :py:class:`NXOpen.Motion.TirePropertyMotorcycle` 
        :returns:  TirePropertyMotorcycleBuilder object  
        :rtype: :py:class:`NXOpen.Motion.TirePropertyMotorcycleBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def FindObject(self, name: str) -> TirePropertyMotorcycle:
        """
        Finds the :py:class:`NXOpen.Motion.TirePropertyMotorcycle` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Motion.TirePropertyMotorcycle`  
        :type name: str 
        :returns:  :py:class:`NXOpen.Motion.TirePropertyMotorcycle` with this name  
        :rtype: :py:class:`NXOpen.Motion.TirePropertyMotorcycle` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    


class PackagingBuilder(NXOpen.Builder):
    """
    This class an abstract class and base class for :py:class:`NXOpen.Motion.PackagingMeasureBuilder`, 
    :py:class:`NXOpen.Motion.PackagingTraceBuilder` and :py:class:`NXOpen.Motion.PackagingInterferenceBuilder`.  
    
    It to be used in the creation and editing of subobjects of :py:class:`NXOpen.Motion.Packaging` .
    This is an abstract class, and cannot be created.
    
    .. versionadded:: NX4.0.0
    """
    
    def GetList1(self) -> 'list[NXOpen.DisplayableObject]':
        """
        Returns geometry list 1 of :py:class:`NXOpen.Motion.Packaging` object.  
        
        Interference and Measure can have one or two lists defined.
        If the user defines only one list, then interference or measure
        checks will be done between each of the objects in list 1.
        Trace only uses one list definition.  
        
        Signature ``GetList1()`` 
        
        :returns:  The list pointer  
        :rtype: list of :py:class:`NXOpen.DisplayableObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def SetList1(self, list1: 'list[NXOpen.DisplayableObject]') -> None:
        """
        Sets geometry list 1.  
        
        Signature ``SetList1(list1)`` 
        
        :param list1:  The list pointer  
        :type list1: list of :py:class:`NXOpen.DisplayableObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    Enable: bool = ...
    """
    Returns or sets  the enable flag of :py:class:`NXOpen.Motion.Packaging` object.  
    
    This attribute indicates whether the packaging option is to be executed 
    during analysis post-processing. If TRUE, the packaging option is executed. 
    
    <hr>
    
    Getter Method
    
    Signature ``Enable`` 
    
    :returns:  Enable flag of :py:class:`NXOpen.Motion.Packaging` object.  
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Enable`` 
    
    :param enable:  Enable flag of :py:class:`NXOpen.Motion.Packaging` object.  
    :type enable: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Name: str = ...
    """
    Returns or sets  the name of :py:class:`NXOpen.Motion.Packaging` object.  
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns:  The Name of :py:class:`NXOpen.Motion.Packaging` object.  
    :rtype: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name:  The Name of :py:class:`NXOpen.Motion.Packaging` object.  
    :type name: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: PackagingBuilder = ...  # unknown typename


class PackagingMeasureBuilderMeasureTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PackagingMeasureBuilderMeasureType():
    """
    Measure type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "MinimumDistance", "Measure minimum distance between objects."
       "Angle", "Measure angle between lines or linear edges."
    """
    MinimumDistance = 0  # PackagingMeasureBuilderMeasureTypeMemberType
    Angle = 1  # PackagingMeasureBuilderMeasureTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PackagingMeasureBuilderMeasureConditionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PackagingMeasureBuilderMeasureCondition():
    """
    Measure condition 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "LessThan", "Stop event defined by minimum measurement less than threshold value."
       "GreaterThan", "Stop event defined by minimum measurement greater than threshold value."
       "EqualTo", "Stop event defined by minimum measurement equal to threshold (target) value."
    """
    LessThan = 0  # PackagingMeasureBuilderMeasureConditionMemberType
    GreaterThan = 1  # PackagingMeasureBuilderMeasureConditionMemberType
    EqualTo = 2  # PackagingMeasureBuilderMeasureConditionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PackagingMeasureBuilder(PackagingBuilder):
    """
    This is the builder class to create or edit a Measure object.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.PackagingCollection.CreateMeasureBuilder`
    
    .. versionadded:: NX4.0.0
    """
    
    class MeasureType():
        """
        Measure type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "MinimumDistance", "Measure minimum distance between objects."
           "Angle", "Measure angle between lines or linear edges."
        """
        MinimumDistance = 0  # PackagingMeasureBuilderMeasureTypeMemberType
        Angle = 1  # PackagingMeasureBuilderMeasureTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class MeasureCondition():
        """
        Measure condition 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "LessThan", "Stop event defined by minimum measurement less than threshold value."
           "GreaterThan", "Stop event defined by minimum measurement greater than threshold value."
           "EqualTo", "Stop event defined by minimum measurement equal to threshold (target) value."
        """
        LessThan = 0  # PackagingMeasureBuilderMeasureConditionMemberType
        GreaterThan = 1  # PackagingMeasureBuilderMeasureConditionMemberType
        EqualTo = 2  # PackagingMeasureBuilderMeasureConditionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class GeometryData():
        """
        Represents geometry data.  
        
        The direction tag covers point and vector.
        The direction tag can be smart one, but point and vector cannot.
        It is recommened to use direction rather than point and vector .
        Constructor: 
        NXOpen.Motion.PackagingMeasureBuilder.GeometryData()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        Geometry: NXOpen.DisplayableObject = ...
        """
        Geometry 
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.DisplayableObject`
        """
        Point: NXOpen.Point3d = ...
        """
        Start point 
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Point3d`
        """
        Vector: NXOpen.Vector3d = ...
        """
        Initial vector 
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Vector3d`
        """
        Direction: NXOpen.Direction = ...
        """
        Direction tag 
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Direction`
        """
    
    
    def GetList2(self) -> 'list[NXOpen.DisplayableObject]':
        """
        Returns the geometry list 2 of :py:class:`NXOpen.Motion.PackagingMeasure` object.  
        
        Measure can have one or two lists defined.  If the user
        defines two lists, then measurements will be done between
        each object in list 1 against each object in list 2.  
        
        Signature ``GetList2()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.DisplayableObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def SetList2(self, list2: 'list[NXOpen.DisplayableObject]') -> None:
        """
        Sets the geometry list 2.  
        
        Signature ``SetList2(list2)`` 
        
        :param list2: 
        :type list2: list of :py:class:`NXOpen.DisplayableObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def GetSourceList(self) -> 'list[PackagingMeasureBuilderGeometryData_Struct]':
        """
        Gets the source geometry data.  
        
        Signature ``GetSourceList()`` 
        
        :returns:  Source geometry data  
        :rtype: list of :py:class:`NXOpen.Motion.PackagingMeasureBuilderGeometryData_Struct` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def SetSourceList(self, sourceGeometryData: 'list[PackagingMeasureBuilderGeometryData_Struct]') -> None:
        """
        Sets the source geometry data.  
        
        Signature ``SetSourceList(sourceGeometryData)`` 
        
        :param sourceGeometryData:  Source geometry data  
        :type sourceGeometryData: list of :py:class:`NXOpen.Motion.PackagingMeasureBuilderGeometryData_Struct` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def GetTargetList(self) -> 'list[PackagingMeasureBuilderGeometryData_Struct]':
        """
        Gets the target geometry data.  
        
        Signature ``GetTargetList()`` 
        
        :returns:  Target geometry data  
        :rtype: list of :py:class:`NXOpen.Motion.PackagingMeasureBuilderGeometryData_Struct` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def SetTargetList(self, targetGeometryData: 'list[PackagingMeasureBuilderGeometryData_Struct]') -> None:
        """
        Sets the target geometry data.  
        
        Signature ``SetTargetList(targetGeometryData)`` 
        
        :param targetGeometryData:  Target geometry data  
        :type targetGeometryData: list of :py:class:`NXOpen.Motion.PackagingMeasureBuilderGeometryData_Struct` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    Condition: PackagingMeasureBuilderMeasureCondition = ...
    """
    Returns or sets  the measure condition defined at :py:class:`NXOpen.Motion.PackagingMeasureBuilderMeasureCondition` 
    
    <hr>
    
    Getter Method
    
    Signature ``Condition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.PackagingMeasureBuilderMeasureCondition` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Condition`` 
    
    :param condition: 
    :type condition: :py:class:`NXOpen.Motion.PackagingMeasureBuilderMeasureCondition` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    MsType: PackagingMeasureBuilderMeasureType = ...
    """
    Returns or sets  the Measure type defined at :py:class:`NXOpen.Motion.PackagingMeasureBuilderMeasureType` 
    
    <hr>
    
    Getter Method
    
    Signature ``MsType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.PackagingMeasureBuilderMeasureType` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``MsType`` 
    
    :param mType: 
    :type mType: :py:class:`NXOpen.Motion.PackagingMeasureBuilderMeasureType` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    StopOnEvent: bool = ...
    """
    Returns or sets  the Stop_On_Event flag of :py:class:`NXOpen.Motion.PackagingMeasure` object 
    
    <hr>
    
    Getter Method
    
    Signature ``StopOnEvent`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``StopOnEvent`` 
    
    :param stopOnEvent: 
    :type stopOnEvent: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ThresholdAngleExpression: NXOpen.Expression = ...
    """
    Returns  the Measure angular threshold expression value 
    
    <hr>
    
    Getter Method
    
    Signature ``ThresholdAngleExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ThresholdExpression: NXOpen.Expression = ...
    """
    Returns  the Measure threshold expression value 
    
    <hr>
    
    Getter Method
    
    Signature ``ThresholdExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ToleranceAngleExpression: NXOpen.Expression = ...
    """
    Returns  the Measure angular tolerance expression value 
    
    <hr>
    
    Getter Method
    
    Signature ``ToleranceAngleExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ToleranceExpression: NXOpen.Expression = ...
    """
    Returns  the Measure tolerance expression value 
    
    <hr>
    
    Getter Method
    
    Signature ``ToleranceExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: PackagingMeasureBuilder = ...  # unknown typename


class FlexBodyCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of flexible body objects   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Motion.MotionManager`
    
    .. versionadded:: NX7.5.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateFlexBodyBuilder(self, flexbody: FlexBody) -> FlexBodyBuilder:
        """
        Creates a :py:class:`NXOpen.Motion.FlexBodyBuilder`  
        
        Signature ``CreateFlexBodyBuilder(flexbody)`` 
        
        :param flexbody: 
        :type flexbody: :py:class:`NXOpen.Motion.FlexBody` 
        :returns: 
        :rtype: :py:class:`NXOpen.Motion.FlexBodyBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def FindObject(self, name: str) -> FlexBody:
        """
        Finds the :py:class:`NXOpen.Motion.FlexBody` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Motion.FlexBody`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Motion.FlexBody` with this name.  
        :rtype: :py:class:`NXOpen.Motion.FlexBody` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    


class Coupler(MotionObject):
    """
    Represents a motion coupler object   
    
    This is an abstract class, and cannot be created.
    
    .. versionadded:: NX6.0.0
    """
    Null: Coupler = ...  # unknown typename


class CouplerGear(Coupler):
    """
    Represents a motion gear object   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Motion.CouplerGearBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: CouplerGear = ...  # unknown typename


class TextBasedElementCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Text Based Element objects   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Motion.MotionManager`
    
    .. versionadded:: NX12.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateTextBasedElementBuilder(self, textBasedElement: TextBasedElement) -> TextBasedElementBuilder:
        """
        Creates a :py:class:`NXOpen.Motion.TextBasedElementBuilder`  
        
        Signature ``CreateTextBasedElementBuilder(textBasedElement)`` 
        
        :param textBasedElement:  :py:class:`NXOpen.Motion.TextBasedElement` to be edited  
        :type textBasedElement: :py:class:`NXOpen.Motion.TextBasedElement` 
        :returns:  TextBasedElementBuilder object  
        :rtype: :py:class:`NXOpen.Motion.TextBasedElementBuilder` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def FindObject(self, name: str) -> TextBasedElement:
        """
        Finds the :py:class:`NXOpen.Motion.TextBasedElement` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Motion.TextBasedElement`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Motion.TextBasedElement` with this name.  
        :rtype: :py:class:`NXOpen.Motion.TextBasedElement` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    


class SubmechanismPositionerBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`Motion.SubmechanismPositioner` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.SubmechanismPositionerCollection.CreatePositionerBuilder`
    
    .. versionadded:: NX12.0.0
    """
    ChildCsys: NXOpen.SelectCoordinateSystem = ...
    """
    Returns  the child coordinate system.  
    
    A coordinate system defined in the submechanism to position. During positioning,
    the submechanism containing the child coordinate system will move to overlap it with 
    the parent coordinate system.
    
    <hr>
    
    Getter Method
    
    Signature ``ChildCsys`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectCoordinateSystem` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Name: str = ...
    """
    Returns or sets  the unique name assigned to the submechanism positioner 
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ParentCsys: NXOpen.SelectCoordinateSystem = ...
    """
    Returns  the parent coordinate system.  
    
    A coordinate system defined in the motion assembly or in another submechanism different 
    from the submechanism to position. The parent coordinate system will not move during the
    positioning.
    
    <hr>
    
    Getter Method
    
    Signature ``ParentCsys`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectCoordinateSystem` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Submechanism: NXOpen.Assemblies.SelectComponent = ...
    """
    Returns  the submechanism to position.  
    
    The Submechanism positioner will create an associative positioning to for the submechanism.
    The associatvie positioning will move the sumbemchanism so that the child CSYS overlaps
    with the parent CSYS. 
    
    <hr>
    
    Getter Method
    
    Signature ``Submechanism`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Assemblies.SelectComponent` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: SubmechanismPositionerBuilder = ...  # unknown typename


class SelectMarker(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a single object selection.  
    
    .. versionadded:: NX5.0.0
    """
    
    @typing.overload
    def SetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def SetValue(self, selection: Marker) -> None:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.Marker` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: Marker) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.Marker` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: Marker, view: NXOpen.View, point: NXOpen.Point3d) -> None:
        """
        The object being selected with the object's view and object's point
        
        Signature ``SetValue(selection, view, point)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.Marker` 
        :param view:  selected object view 
        :type view: :py:class:`NXOpen.View` 
        :param point:  selected object point 
        :type point: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, snapType: NXOpen.InferSnapTypeSnapType, selection1: Marker, view1: NXOpen.View, point1: NXOpen.Point3d, selection2: Marker, view2: NXOpen.View, point2: NXOpen.Point3d) -> None:
        """
        The object being selected with the objects view and objects point and snap information.
        
        Signature ``SetValue(snapType, selection1, view1, point1, selection2, view2, point2)`` 
        
        :param snapType:   snap point type 
        :type snapType: :py:class:`NXOpen.InferSnapTypeSnapType` 
        :param selection1:  first selected object  
        :type selection1: :py:class:`NXOpen.Motion.Marker` 
        :param view1:  first selected object view 
        :type view1: :py:class:`NXOpen.View` 
        :param point1:  first selected object point 
        :type point1: :py:class:`NXOpen.Point3d` 
        :param selection2:  second selected object  
        :type selection2: :py:class:`NXOpen.Motion.Marker` 
        :param view2:  second selected object view 
        :type view2: :py:class:`NXOpen.View` 
        :param point2:  second selected object point 
        :type point2: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: Marker, caeSubType: NXOpen.CaeObjectTypeCaeSubType, caeSubId: int) -> None:
        """
        The object being selected with CAE set object information.
        
        Signature ``SetValue(selection, caeSubType, caeSubId)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.Marker` 
        :param caeSubType:  CAE set object sub type 
        :type caeSubType: :py:class:`NXOpen.CaeObjectTypeCaeSubType` 
        :param caeSubId:  CAE set object sub id 
        :type caeSubId: int 
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.SetValue`.
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def GetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def GetValue(self) -> Marker:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :returns:  selected object  
        :rtype: :py:class:`NXOpen.Motion.Marker` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self, selection: Marker) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.Marker` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the object's view and point.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, view, point). selection is a :py:class:`NXOpen.Motion.Marker`.   selected object view is a :py:class:`NXOpen.View`.   selected object viewpoint is a :py:class:`NXOpen.Point3d`.   selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the objects view and point and snap information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (snapType, selection1, view1, point1, selection2, view2, point2). snapType is a :py:class:`NXOpen.InferSnapTypeSnapType`.    snap point typeselection1 is a :py:class:`NXOpen.Motion.Marker`.   first selected object view1 is a :py:class:`NXOpen.View`.   first selected object viewpoint1 is a :py:class:`NXOpen.Point3d`.   first selected object pointselection2 is a :py:class:`NXOpen.Motion.Marker`.   second selected object view2 is a :py:class:`NXOpen.View`.   second selected object viewpoint2 is a :py:class:`NXOpen.Point3d`.   second selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with CAE set object information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, caeSubType, caeSubId). selection is a :py:class:`NXOpen.Motion.Marker`.   selected object caeSubType is a :py:class:`NXOpen.CaeObjectTypeCaeSubType`.   CAE set object sub typecaeSubId is a int.   CAE set object sub id
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.GetValue`.
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Value: Marker = ...
    """
    Returns or sets  the object being selected
    
    <hr>
    
    Getter Method
    
    Signature ``Value`` 
    
    :returns:  selected object  
    :rtype: :py:class:`NXOpen.Motion.Marker` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Value`` 
    
    :param selection:  selected object  
    :type selection: :py:class:`NXOpen.Motion.Marker` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SelectMarker = ...  # unknown typename


class SelectTirePropertyFt(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a single object selection.  
    
    .. versionadded:: NX5.0.0
    """
    
    @typing.overload
    def SetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def SetValue(self, selection: TirePropertyFt) -> None:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.TirePropertyFt` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: TirePropertyFt) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.TirePropertyFt` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: TirePropertyFt, view: NXOpen.View, point: NXOpen.Point3d) -> None:
        """
        The object being selected with the object's view and object's point
        
        Signature ``SetValue(selection, view, point)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.TirePropertyFt` 
        :param view:  selected object view 
        :type view: :py:class:`NXOpen.View` 
        :param point:  selected object point 
        :type point: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, snapType: NXOpen.InferSnapTypeSnapType, selection1: TirePropertyFt, view1: NXOpen.View, point1: NXOpen.Point3d, selection2: TirePropertyFt, view2: NXOpen.View, point2: NXOpen.Point3d) -> None:
        """
        The object being selected with the objects view and objects point and snap information.
        
        Signature ``SetValue(snapType, selection1, view1, point1, selection2, view2, point2)`` 
        
        :param snapType:   snap point type 
        :type snapType: :py:class:`NXOpen.InferSnapTypeSnapType` 
        :param selection1:  first selected object  
        :type selection1: :py:class:`NXOpen.Motion.TirePropertyFt` 
        :param view1:  first selected object view 
        :type view1: :py:class:`NXOpen.View` 
        :param point1:  first selected object point 
        :type point1: :py:class:`NXOpen.Point3d` 
        :param selection2:  second selected object  
        :type selection2: :py:class:`NXOpen.Motion.TirePropertyFt` 
        :param view2:  second selected object view 
        :type view2: :py:class:`NXOpen.View` 
        :param point2:  second selected object point 
        :type point2: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: TirePropertyFt, caeSubType: NXOpen.CaeObjectTypeCaeSubType, caeSubId: int) -> None:
        """
        The object being selected with CAE set object information.
        
        Signature ``SetValue(selection, caeSubType, caeSubId)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.TirePropertyFt` 
        :param caeSubType:  CAE set object sub type 
        :type caeSubType: :py:class:`NXOpen.CaeObjectTypeCaeSubType` 
        :param caeSubId:  CAE set object sub id 
        :type caeSubId: int 
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.SetValue`.
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def GetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def GetValue(self) -> TirePropertyFt:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :returns:  selected object  
        :rtype: :py:class:`NXOpen.Motion.TirePropertyFt` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self, selection: TirePropertyFt) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.TirePropertyFt` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the object's view and point.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, view, point). selection is a :py:class:`NXOpen.Motion.TirePropertyFt`.   selected object view is a :py:class:`NXOpen.View`.   selected object viewpoint is a :py:class:`NXOpen.Point3d`.   selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the objects view and point and snap information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (snapType, selection1, view1, point1, selection2, view2, point2). snapType is a :py:class:`NXOpen.InferSnapTypeSnapType`.    snap point typeselection1 is a :py:class:`NXOpen.Motion.TirePropertyFt`.   first selected object view1 is a :py:class:`NXOpen.View`.   first selected object viewpoint1 is a :py:class:`NXOpen.Point3d`.   first selected object pointselection2 is a :py:class:`NXOpen.Motion.TirePropertyFt`.   second selected object view2 is a :py:class:`NXOpen.View`.   second selected object viewpoint2 is a :py:class:`NXOpen.Point3d`.   second selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with CAE set object information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, caeSubType, caeSubId). selection is a :py:class:`NXOpen.Motion.TirePropertyFt`.   selected object caeSubType is a :py:class:`NXOpen.CaeObjectTypeCaeSubType`.   CAE set object sub typecaeSubId is a int.   CAE set object sub id
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.GetValue`.
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Value: TirePropertyFt = ...
    """
    Returns or sets  the object being selected
    
    <hr>
    
    Getter Method
    
    Signature ``Value`` 
    
    :returns:  selected object  
    :rtype: :py:class:`NXOpen.Motion.TirePropertyFt` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Value`` 
    
    :param selection:  selected object  
    :type selection: :py:class:`NXOpen.Motion.TirePropertyFt` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SelectTirePropertyFt = ...  # unknown typename


class TirePropertyCd(TireProperty):
    """
    CDTIRE Tire Property 
    This is an object that contains parameters needed for the CDTIRE Tire model   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Motion.TirePropertyCdBuilder`
    
    .. versionadded:: NX11.0.0
    """
    
    def CopyParameters(self, source: TirePropertyCd) -> None:
        """
        Copy parameters from another :py:class:`Motion.TirePropertyCd` 
        
        Signature ``CopyParameters(source)`` 
        
        :param source: 
        :type source: :py:class:`NXOpen.Motion.TirePropertyCd` 
        
        .. versionadded:: NX11.0.0
        
        .. deprecated::  NX12.0.0
           Use :py:meth:`MotionMethods.CopyParameters` instead.
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    Null: TirePropertyCd = ...  # unknown typename


class MotorBuilder(MotionBuilder):
    """
    This builder class is used to create or edit :py:class:`NXOpen.Motion.Motor`   
    
    This is an abstract class, and cannot be created.
    
    .. versionadded:: NX6.0.0
    """
    Null: MotorBuilder = ...  # unknown typename


class ControlOutputBuilderControlOutputTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ControlOutputBuilderControlOutputType():
    """
    Control Output type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Link", "Control Output Type Link. Requires an action link attachment. Can have a base link attachment."
       "JointOrConstraint", "Control Output Type Joint or Constraint. Requires a Joint or Point on Curve Constraint as input."
    """
    Link = 0  # ControlOutputBuilderControlOutputTypeMemberType
    JointOrConstraint = 1  # ControlOutputBuilderControlOutputTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ControlOutputBuilderVariableTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ControlOutputBuilderVariableType():
    """
    Output Variable type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Force", "Output Variable type Force"
       "Torque", "Output Variable type Torque."
       "ActionTorque", "Output Variable type Action Torque. Valid only in control output has universal joint as input."
       "BaseTorque", "Output Variable type Base Torque. Valid only in control output has universal joint as input."
    """
    Force = 0  # ControlOutputBuilderVariableTypeMemberType
    Torque = 1  # ControlOutputBuilderVariableTypeMemberType
    ActionTorque = 2  # ControlOutputBuilderVariableTypeMemberType
    BaseTorque = 3  # ControlOutputBuilderVariableTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ControlOutputBuilderDirectionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ControlOutputBuilderDirectionType():
    """
    Output Variable Direction 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "X", "Output Variable Direction X"
       "Y", "Output Variable Direction Y"
       "Z", "Output Variable Direction Z"
    """
    X = 0  # ControlOutputBuilderDirectionTypeMemberType
    Y = 1  # ControlOutputBuilderDirectionTypeMemberType
    Z = 2  # ControlOutputBuilderDirectionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ControlOutputBuilder(MotionBuilder):
    """
    Represents a :py:class:`Motion.ControlOutput` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.ControlOutputCollection.CreateControlOutputBuilder`
    
    Default values.
    
    ===========  ======
    Property     Value
    ===========  ======
    Direction    Z 
    -----------  ------
    OutputType   Link 
    -----------  ------
    Variable     Force 
    ===========  ======
    
    .. versionadded:: NX11.0.0
    """
    
    class ControlOutputType():
        """
        Control Output type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Link", "Control Output Type Link. Requires an action link attachment. Can have a base link attachment."
           "JointOrConstraint", "Control Output Type Joint or Constraint. Requires a Joint or Point on Curve Constraint as input."
        """
        Link = 0  # ControlOutputBuilderControlOutputTypeMemberType
        JointOrConstraint = 1  # ControlOutputBuilderControlOutputTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class VariableType():
        """
        Output Variable type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Force", "Output Variable type Force"
           "Torque", "Output Variable type Torque."
           "ActionTorque", "Output Variable type Action Torque. Valid only in control output has universal joint as input."
           "BaseTorque", "Output Variable type Base Torque. Valid only in control output has universal joint as input."
        """
        Force = 0  # ControlOutputBuilderVariableTypeMemberType
        Torque = 1  # ControlOutputBuilderVariableTypeMemberType
        ActionTorque = 2  # ControlOutputBuilderVariableTypeMemberType
        BaseTorque = 3  # ControlOutputBuilderVariableTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DirectionType():
        """
        Output Variable Direction 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "X", "Output Variable Direction X"
           "Y", "Output Variable Direction Y"
           "Z", "Output Variable Direction Z"
        """
        X = 0  # ControlOutputBuilderDirectionTypeMemberType
        Y = 1  # ControlOutputBuilderDirectionTypeMemberType
        Z = 2  # ControlOutputBuilderDirectionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    ActionLinkAttachment: LinkAttachmentData = ...
    """
    Returns  the action link attachment.  
    
    Required in type of Control Output is Link.
    
    <hr>
    
    Getter Method
    
    Signature ``ActionLinkAttachment`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.LinkAttachmentData` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    BaseLinkAttachment: LinkAttachmentData = ...
    """
    Returns  the base link attachment.  
    
    Used if the type of Control Output is Link. 
    
    <hr>
    
    Getter Method
    
    Signature ``BaseLinkAttachment`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.LinkAttachmentData` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Direction: ControlOutputBuilderDirectionType = ...
    """
    Returns or sets  the control Output Variable direction.  
    
    Default Control Output Variable Direction is Z direction.
    
    <hr>
    
    Getter Method
    
    Signature ``Direction`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.ControlOutputBuilderDirectionType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Direction`` 
    
    :param direction: 
    :type direction: :py:class:`NXOpen.Motion.ControlOutputBuilderDirectionType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    JointSelection: SelectJoint = ...
    """
    Returns  the joint selection.  
    
    Required if the type of Control Output is Joint/Constraint. 
    
    <hr>
    
    Getter Method
    
    Signature ``JointSelection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectJoint` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Name: str = ...
    """
    Returns or sets  the name of the control output element.  
    
    Must be unique across all motion elements. An unique name is set by default.
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    OutputType: ControlOutputBuilderControlOutputType = ...
    """
    Returns or sets  the Control Output type.  
    
    Default Control Output Type is Link. 
    
    <hr>
    
    Getter Method
    
    Signature ``OutputType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.ControlOutputBuilderControlOutputType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``OutputType`` 
    
    :param outputType: 
    :type outputType: :py:class:`NXOpen.Motion.ControlOutputBuilderControlOutputType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    PortSelection: SelectControlPort = ...
    """
    Returns  the control output port
    
    <hr>
    
    Getter Method
    
    Signature ``PortSelection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectControlPort` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Variable: ControlOutputBuilderVariableType = ...
    """
    Returns or sets  the control Output Variable type.  
    
    Default Control Output Variable Type is Force. 
    
    <hr>
    
    Getter Method
    
    Signature ``Variable`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.ControlOutputBuilderVariableType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Variable`` 
    
    :param variable: 
    :type variable: :py:class:`NXOpen.Motion.ControlOutputBuilderVariableType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: ControlOutputBuilder = ...  # unknown typename


class RoadCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Road objects   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Motion.MotionManager`
    
    .. versionadded:: NX11.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateRoadBuilder(self, road: Road) -> RoadBuilder:
        """
        Creates a :py:class:`NXOpen.Motion.RoadBuilder`  
        
        Signature ``CreateRoadBuilder(road)`` 
        
        :param road:  :py:class:`NXOpen.Motion.Road` to be edited  
        :type road: :py:class:`NXOpen.Motion.Road` 
        :returns:  RoadBuilder object  
        :rtype: :py:class:`NXOpen.Motion.RoadBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindObject(self, name: str) -> Road:
        """
        Finds the :py:class:`NXOpen.Motion.Road` object with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  Name of the Road object.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Motion.Road` object with this name.  
        :rtype: :py:class:`NXOpen.Motion.Road` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    


class TirePropertyBuilder(MotionBuilder):
    """
    Represents a Builder base class for Tire Properties   
    
    This is an abstract class, and cannot be created.
    
    .. versionadded:: NX11.0.0
    """
    Null: TirePropertyBuilder = ...  # unknown typename


class TirePropertyTnoBuilderTrackSideTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TirePropertyTnoBuilderTrackSideType():
    """
    The Track Side type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Left", " - "
       "Right", " - "
    """
    Left = 0  # TirePropertyTnoBuilderTrackSideTypeMemberType
    Right = 1  # TirePropertyTnoBuilderTrackSideTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TirePropertyTnoBuilderIswitchDefinitionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TirePropertyTnoBuilderIswitchDefinitionType():
    """
    The Iswitch Definition type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Detailed", " - "
       "Integer", " - "
    """
    Detailed = 0  # TirePropertyTnoBuilderIswitchDefinitionTypeMemberType
    Integer = 1  # TirePropertyTnoBuilderIswitchDefinitionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TirePropertyTnoBuilderTireSideTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TirePropertyTnoBuilderTireSideType():
    """
    The Tire Side type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Left", " - "
       "Right", " - "
       "Symmetric", " - "
       "Mirrored", " - "
    """
    Left = 0  # TirePropertyTnoBuilderTireSideTypeMemberType
    Right = 1  # TirePropertyTnoBuilderTireSideTypeMemberType
    Symmetric = 2  # TirePropertyTnoBuilderTireSideTypeMemberType
    Mirrored = 3  # TirePropertyTnoBuilderTireSideTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TirePropertyTnoBuilderSlipForcesTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TirePropertyTnoBuilderSlipForcesType():
    """
    The Slip Forces type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NoMagicFormula", " - "
       "Longitudinal", " - "
       "Lateral", " - "
       "Uncombined", " - "
       "Combined", " - "
       "TurnSlip", " - "
    """
    NoMagicFormula = 0  # TirePropertyTnoBuilderSlipForcesTypeMemberType
    Longitudinal = 1  # TirePropertyTnoBuilderSlipForcesTypeMemberType
    Lateral = 2  # TirePropertyTnoBuilderSlipForcesTypeMemberType
    Uncombined = 3  # TirePropertyTnoBuilderSlipForcesTypeMemberType
    Combined = 4  # TirePropertyTnoBuilderSlipForcesTypeMemberType
    TurnSlip = 5  # TirePropertyTnoBuilderSlipForcesTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TirePropertyTnoBuilderDynamicsTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TirePropertyTnoBuilderDynamicsType():
    """
    The Dynamics type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "SteadyState", " - "
       "RelaxationLinear", " - "
       "RelaxationNonLinear", " - "
       "RigidRing", " - "
       "RigidRingWithInitStatics", " - "
    """
    SteadyState = 0  # TirePropertyTnoBuilderDynamicsTypeMemberType
    RelaxationLinear = 1  # TirePropertyTnoBuilderDynamicsTypeMemberType
    RelaxationNonLinear = 2  # TirePropertyTnoBuilderDynamicsTypeMemberType
    RigidRing = 3  # TirePropertyTnoBuilderDynamicsTypeMemberType
    RigidRingWithInitStatics = 4  # TirePropertyTnoBuilderDynamicsTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TirePropertyTnoBuilderContactMethodTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TirePropertyTnoBuilderContactMethodType():
    """
    The Contact Method type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "SmoothRoad", " - "
       "CircularCrossSection", " - "
       "MovingRoad", " - "
       "Road2D", " - "
       "Road3D", " - "
    """
    SmoothRoad = 0  # TirePropertyTnoBuilderContactMethodTypeMemberType
    CircularCrossSection = 1  # TirePropertyTnoBuilderContactMethodTypeMemberType
    MovingRoad = 2  # TirePropertyTnoBuilderContactMethodTypeMemberType
    Road2D = 3  # TirePropertyTnoBuilderContactMethodTypeMemberType
    Road3D = 4  # TirePropertyTnoBuilderContactMethodTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TirePropertyTnoBuilder(TirePropertyBuilder):
    """
    Represents a Builder for Motion TNO Tire Property.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.TirePropertyTnoCollection.CreateTirePropertyTnoBuilder`
    
    Default values.
    
    ==============================  ==========================================
    Property                        Value
    ==============================  ==========================================
    ContactMethod                   SmoothRoad 
    ------------------------------  ------------------------------------------
    Dynamics                        SteadyState 
    ------------------------------  ------------------------------------------
    Iswitch.Value                   0 (millimeters part), 0 (inches part) 
    ------------------------------  ------------------------------------------
    IswitchDefinition               Detailed 
    ------------------------------  ------------------------------------------
    Lkx.Value                       1.0 (millimeters part), 1.0 (inches part) 
    ------------------------------  ------------------------------------------
    Lky.Value                       1.0 (millimeters part), 1.0 (inches part) 
    ------------------------------  ------------------------------------------
    Lkyc.Value                      1.0 (millimeters part), 1.0 (inches part) 
    ------------------------------  ------------------------------------------
    Lkzc.Value                      1.0 (millimeters part), 1.0 (inches part) 
    ------------------------------  ------------------------------------------
    Lmux.Value                      1.0 (millimeters part), 1.0 (inches part) 
    ------------------------------  ------------------------------------------
    Lmuy.Value                      1.0 (millimeters part), 1.0 (inches part) 
    ------------------------------  ------------------------------------------
    Ltr.Value                       1.0 (millimeters part), 1.0 (inches part) 
    ------------------------------  ------------------------------------------
    SlipForces                      NoMagicFormula 
    ------------------------------  ------------------------------------------
    StaticHold                      1 
    ------------------------------  ------------------------------------------
    StaticRadius.Value              0.0 (millimeters part), 0.0 (inches part) 
    ------------------------------  ------------------------------------------
    StaticVerticalStiffness.Value   0.0 (millimeters part), 0.0 (inches part) 
    ------------------------------  ------------------------------------------
    TireSide                        Left 
    ------------------------------  ------------------------------------------
    TrackSide                       Left 
    ------------------------------  ------------------------------------------
    VerticalDamping.Value           1.0 (millimeters part), 1.0 (inches part) 
    ------------------------------  ------------------------------------------
    VerticalStiffness.Value         1.0 (millimeters part), 1.0 (inches part) 
    ==============================  ==========================================
    
    .. versionadded:: NX11.0.0
    """
    
    class TrackSideType():
        """
        The Track Side type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Left", " - "
           "Right", " - "
        """
        Left = 0  # TirePropertyTnoBuilderTrackSideTypeMemberType
        Right = 1  # TirePropertyTnoBuilderTrackSideTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class IswitchDefinitionType():
        """
        The Iswitch Definition type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Detailed", " - "
           "Integer", " - "
        """
        Detailed = 0  # TirePropertyTnoBuilderIswitchDefinitionTypeMemberType
        Integer = 1  # TirePropertyTnoBuilderIswitchDefinitionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class TireSideType():
        """
        The Tire Side type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Left", " - "
           "Right", " - "
           "Symmetric", " - "
           "Mirrored", " - "
        """
        Left = 0  # TirePropertyTnoBuilderTireSideTypeMemberType
        Right = 1  # TirePropertyTnoBuilderTireSideTypeMemberType
        Symmetric = 2  # TirePropertyTnoBuilderTireSideTypeMemberType
        Mirrored = 3  # TirePropertyTnoBuilderTireSideTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SlipForcesType():
        """
        The Slip Forces type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NoMagicFormula", " - "
           "Longitudinal", " - "
           "Lateral", " - "
           "Uncombined", " - "
           "Combined", " - "
           "TurnSlip", " - "
        """
        NoMagicFormula = 0  # TirePropertyTnoBuilderSlipForcesTypeMemberType
        Longitudinal = 1  # TirePropertyTnoBuilderSlipForcesTypeMemberType
        Lateral = 2  # TirePropertyTnoBuilderSlipForcesTypeMemberType
        Uncombined = 3  # TirePropertyTnoBuilderSlipForcesTypeMemberType
        Combined = 4  # TirePropertyTnoBuilderSlipForcesTypeMemberType
        TurnSlip = 5  # TirePropertyTnoBuilderSlipForcesTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DynamicsType():
        """
        The Dynamics type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "SteadyState", " - "
           "RelaxationLinear", " - "
           "RelaxationNonLinear", " - "
           "RigidRing", " - "
           "RigidRingWithInitStatics", " - "
        """
        SteadyState = 0  # TirePropertyTnoBuilderDynamicsTypeMemberType
        RelaxationLinear = 1  # TirePropertyTnoBuilderDynamicsTypeMemberType
        RelaxationNonLinear = 2  # TirePropertyTnoBuilderDynamicsTypeMemberType
        RigidRing = 3  # TirePropertyTnoBuilderDynamicsTypeMemberType
        RigidRingWithInitStatics = 4  # TirePropertyTnoBuilderDynamicsTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ContactMethodType():
        """
        The Contact Method type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "SmoothRoad", " - "
           "CircularCrossSection", " - "
           "MovingRoad", " - "
           "Road2D", " - "
           "Road3D", " - "
        """
        SmoothRoad = 0  # TirePropertyTnoBuilderContactMethodTypeMemberType
        CircularCrossSection = 1  # TirePropertyTnoBuilderContactMethodTypeMemberType
        MovingRoad = 2  # TirePropertyTnoBuilderContactMethodTypeMemberType
        Road2D = 3  # TirePropertyTnoBuilderContactMethodTypeMemberType
        Road3D = 4  # TirePropertyTnoBuilderContactMethodTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    ContactMethod: TirePropertyTnoBuilderContactMethodType = ...
    """
    Returns or sets  the contact method.  
    
    <hr>
    
    Getter Method
    
    Signature ``ContactMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.TirePropertyTnoBuilderContactMethodType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``ContactMethod`` 
    
    :param contactMethod: 
    :type contactMethod: :py:class:`NXOpen.Motion.TirePropertyTnoBuilderContactMethodType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Dynamics: TirePropertyTnoBuilderDynamicsType = ...
    """
    Returns or sets  the dynamics type.  
    
    <hr>
    
    Getter Method
    
    Signature ``Dynamics`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.TirePropertyTnoBuilderDynamicsType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Dynamics`` 
    
    :param dynamics: 
    :type dynamics: :py:class:`NXOpen.Motion.TirePropertyTnoBuilderDynamicsType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Iswitch: NXOpen.Expression = ...
    """
    Returns  the Iswitch.  
    
    It is a Tire model usage flag. 
    
    <hr>
    
    Getter Method
    
    Signature ``Iswitch`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    IswitchDefinition: TirePropertyTnoBuilderIswitchDefinitionType = ...
    """
    Returns or sets  the iswitch definition.  
    
    If set to Detailed, 4 parameters are used to specify iswitch:
    Tire Side, Slip Forces, Dynamics, and Contact Method. Otherwise it is specified
    as an integer value. 
    
    <hr>
    
    Getter Method
    
    Signature ``IswitchDefinition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.TirePropertyTnoBuilderIswitchDefinitionType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``IswitchDefinition`` 
    
    :param iswitchDef: 
    :type iswitchDef: :py:class:`NXOpen.Motion.TirePropertyTnoBuilderIswitchDefinitionType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Lkx: NXOpen.Expression = ...
    """
    Returns  the LKX scaling coefficient.  
    
    <hr>
    
    Getter Method
    
    Signature ``Lkx`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Lky: NXOpen.Expression = ...
    """
    Returns  the LKY scaling coefficient.  
    
    <hr>
    
    Getter Method
    
    Signature ``Lky`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Lkyc: NXOpen.Expression = ...
    """
    Returns  the LKYC scaling coefficient.  
    
    <hr>
    
    Getter Method
    
    Signature ``Lkyc`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Lkzc: NXOpen.Expression = ...
    """
    Returns  the LKZC scaling coefficient.  
    
    <hr>
    
    Getter Method
    
    Signature ``Lkzc`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Lmux: NXOpen.Expression = ...
    """
    Returns  the LMUX scaling coefficient.  
    
    <hr>
    
    Getter Method
    
    Signature ``Lmux`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Lmuy: NXOpen.Expression = ...
    """
    Returns  the LMUY scaling coefficient.  
    
    <hr>
    
    Getter Method
    
    Signature ``Lmuy`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Ltr: NXOpen.Expression = ...
    """
    Returns  the LTR scaling coefficient.  
    
    <hr>
    
    Getter Method
    
    Signature ``Ltr`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Name: str = ...
    """
    Returns or sets  the name.  
    
    It is a uniqe name within tire properties.
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SlipForces: TirePropertyTnoBuilderSlipForcesType = ...
    """
    Returns or sets  the slip forces type.  
    
    <hr>
    
    Getter Method
    
    Signature ``SlipForces`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.TirePropertyTnoBuilderSlipForcesType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``SlipForces`` 
    
    :param slipForces: 
    :type slipForces: :py:class:`NXOpen.Motion.TirePropertyTnoBuilderSlipForcesType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    StaticHold: bool = ...
    """
    Returns or sets  the static hold.  
    
    It is ussed for static analysis only.
    If set to true, holds the tire in position. 
    
    <hr>
    
    Getter Method
    
    Signature ``StaticHold`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``StaticHold`` 
    
    :param staticHold: 
    :type staticHold: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    StaticRadius: NXOpen.Expression = ...
    """
    Returns  the Static Radius.  
    
    It is used for static analysis only. 
    Specifies the tire radius only used in static equilibrating force calculations. 
    
    <hr>
    
    Getter Method
    
    Signature ``StaticRadius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    StaticVerticalStiffness: NXOpen.Expression = ...
    """
    Returns  the static vertical stiffness.  
    
    It specifies the vertical stiffness only used in static equilibrating force calculations.
    
    <hr>
    
    Getter Method
    
    Signature ``StaticVerticalStiffness`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    TireSide: TirePropertyTnoBuilderTireSideType = ...
    """
    Returns or sets  the tire side.  
    
    <hr>
    
    Getter Method
    
    Signature ``TireSide`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.TirePropertyTnoBuilderTireSideType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``TireSide`` 
    
    :param tireSide: 
    :type tireSide: :py:class:`NXOpen.Motion.TirePropertyTnoBuilderTireSideType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    TnoFile: str = ...
    """
    Returns or sets  the TNO file.  
    
    This is a file containing information describing the TNO tire.
    
    <hr>
    
    Getter Method
    
    Signature ``TnoFile`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``TnoFile`` 
    
    :param fileName: 
    :type fileName: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    TrackSide: TirePropertyTnoBuilderTrackSideType = ...
    """
    Returns or sets  the track side.  
    
    Only used in combination with a 'Road Profile' Road Element
    that specifies road height vs. traveled distance. The *.rdf road profile file
    contains 2 tracks, a left track for left wheels and a right track for right wheels. 
    
    <hr>
    
    Getter Method
    
    Signature ``TrackSide`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.TirePropertyTnoBuilderTrackSideType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``TrackSide`` 
    
    :param trackSide: 
    :type trackSide: :py:class:`NXOpen.Motion.TirePropertyTnoBuilderTrackSideType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    VerticalDamping: NXOpen.Expression = ...
    """
    Returns  the Vertical Damping scaling coefficient.  
    
    <hr>
    
    Getter Method
    
    Signature ``VerticalDamping`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    VerticalStiffness: NXOpen.Expression = ...
    """
    Returns  the Vertical Stiffness scaling coefficient.  
    
    <hr>
    
    Getter Method
    
    Signature ``VerticalStiffness`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: TirePropertyTnoBuilder = ...  # unknown typename


class Segment(NXOpen.NXObject):
    """
    Represents a segment, only creation is supported   
    
    This is created by road.
    
    .. versionadded:: NX11.0.0
    """
    Null: Segment = ...  # unknown typename


class LoadTransferBuilder(MotionBuilder):
    """
    Represents a :py:class:`NXOpen.Motion.LoadTransferBuilder`   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.LoadTransferCollection.CreateLoadTransferBuilder`
    
    Default values.
    
    ============  =====
    Property      Value
    ============  =====
    VectorScale   1.0 
    ============  =====
    
    .. versionadded:: NX9.0.0
    """
    
    def GetRecordedSteps(self) -> 'list[int]':
        """
        Returns recorded steps 
        
        Signature ``GetRecordedSteps()`` 
        
        :returns: 
        :rtype: list of int 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def SetRecordedSteps(self, steps: 'list[int]') -> None:
        """
        Sets recorded steps
        
        Signature ``SetRecordedSteps(steps)`` 
        
        :param steps: 
        :type steps: list of int 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def CreateGraphObjects(self) -> 'list[Graph]':
        """
        Creates graph objects 
        
        Signature ``CreateGraphObjects()`` 
        
        :returns:  The :py:class:`NXOpen.Motion.Graph` object array  
        :rtype: list of :py:class:`NXOpen.Motion.Graph` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def StoreGraphInAfu(self, afu: str) -> None:
        """
        Stores graph objects in afu file 
        
        Signature ``StoreGraphInAfu(afu)`` 
        
        :param afu:  The name of the AFU file to store the graph results  
        :type afu: str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    Link: NXOpen.SelectNXObjectList = ...
    """
    Returns  the link 
    
    <hr>
    
    Getter Method
    
    Signature ``Link`` 
    
    :returns:  :py:class:`NXOpen.SelectObjectList` contains link or link geometries 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    VectorScale: float = ...
    """
    Returns or sets  the vector scale 
    
    <hr>
    
    Getter Method
    
    Signature ``VectorScale`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``VectorScale`` 
    
    :param vectorScale: 
    :type vectorScale: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: LoadTransferBuilder = ...  # unknown typename


class SplineBeamCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of SplineBeams   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Motion.MotionManager`
    
    .. versionadded:: NX12.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateSplineBeamBuilder(self, splineBeam: SplineBeam) -> SplineBeamBuilder:
        """
        Creates a :py:class:`Motion.SplineBeamBuilder`  
        
        Signature ``CreateSplineBeamBuilder(splineBeam)`` 
        
        :param splineBeam:  :py:class:`NXOpen.Motion.SplineBeam`                                                                                                       to be edited, if None then create a new one  
        :type splineBeam: :py:class:`NXOpen.Motion.SplineBeam` 
        :returns:  SplineBeamBuilder object  
        :rtype: :py:class:`NXOpen.Motion.SplineBeamBuilder` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def FindObject(self, name: str) -> SplineBeam:
        """
        Finds the :py:class:`NXOpen.Motion.SplineBeam` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Motion.SplineBeam`  
        :type name: str 
        :returns:  :py:class:`NXOpen.Motion.SplineBeam` with this name  
        :rtype: :py:class:`NXOpen.Motion.SplineBeam` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    


class CustomizedMaterialBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`Motion.CustomizedMaterialBuilder`.  
    
    .. versionadded:: NX12.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Density: NXOpen.Expression = ...
    """
    Returns  the density 
    
    <hr>
    
    Getter Method
    
    Signature ``Density`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    IsCustomizedMaterial: bool = ...
    """
    Returns or sets  the customized material flag 
    
    <hr>
    
    Getter Method
    
    Signature ``IsCustomizedMaterial`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``IsCustomizedMaterial`` 
    
    :param type: 
    :type type: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Material: NXOpen.PhysicalMaterial = ...
    """
    Returns or sets  the material 
    
    <hr>
    
    Getter Method
    
    Signature ``Material`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.PhysicalMaterial` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Material`` 
    
    :param material: 
    :type material: :py:class:`NXOpen.PhysicalMaterial` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    PoissonRatio: NXOpen.Expression = ...
    """
    Returns  the Poisson ratio 
    
    <hr>
    
    Getter Method
    
    Signature ``PoissonRatio`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    YoungModulus: NXOpen.Expression = ...
    """
    Returns  the Young modulus 
    
    <hr>
    
    Getter Method
    
    Signature ``YoungModulus`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: CustomizedMaterialBuilder = ...  # unknown typename


class BaseSectionBuilder(MotionBuilder):
    """
    Represents a :py:class:`Motion.BaseSectionBuilder`.  
    
    Not support KF.
    
    .. versionadded:: NX12.0.0
    """
    Name: str = ...
    """
    Returns or sets  the name of the base section object 
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: BaseSectionBuilder = ...  # unknown typename


class UserDefinedSectionBuilder(BaseSectionBuilder):
    """
    Represents a :py:class:`Motion.UserDefinedSectionBuilder`.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.BaseSectionCollection.CreateUserDefinedSectionBuilder`
    
    .. versionadded:: NX12.0.0
    """
    Area: NXOpen.Expression = ...
    """
    Returns  the area 
    
    <hr>
    
    Getter Method
    
    Signature ``Area`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    InertiaIyy: NXOpen.Expression = ...
    """
    Returns  the inertia Iyy
    
    <hr>
    
    Getter Method
    
    Signature ``InertiaIyy`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    InertiaIzy: NXOpen.Expression = ...
    """
    Returns  the inertia Izy 
    
    <hr>
    
    Getter Method
    
    Signature ``InertiaIzy`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    InertiaIzz: NXOpen.Expression = ...
    """
    Returns  the inertia Izz 
    
    <hr>
    
    Getter Method
    
    Signature ``InertiaIzz`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    InertiaJ: NXOpen.Expression = ...
    """
    Returns  the inertia J 
    
    <hr>
    
    Getter Method
    
    Signature ``InertiaJ`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: UserDefinedSectionBuilder = ...  # unknown typename


class LinkBuilder(MotionBuilder):
    """
    Represents a :py:class:`NXOpen.Motion.LinkBuilder`
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.LinkCollection.CreateLinkBuilder`
    
    .. versionadded:: NX5.0.0
    """
    Fixed: bool = ...
    """
    Returns or sets  the link fixed to the ground 
    
    <hr>
    
    Getter Method
    
    Signature ``Fixed`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Fixed`` 
    
    :param fixed: 
    :type fixed: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Geometries: NXOpen.SelectNXObjectList = ...
    """
    Returns  the geometries 
    
    <hr>
    
    Getter Method
    
    Signature ``Geometries`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    InitialVelocity: LinkInitialVelocity = ...
    """
    Returns  the initial velocity 
    
    <hr>
    
    Getter Method
    
    Signature ``InitialVelocity`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.LinkInitialVelocity` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    MassProperty: LinkMassProperty = ...
    """
    Returns  the mass property 
    
    <hr>
    
    Getter Method
    
    Signature ``MassProperty`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.LinkMassProperty` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Name: str = ...
    """
    Returns or sets  the name 
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: LinkBuilder = ...  # unknown typename


class Motor(MotionObject):
    """
    Represents a motion motor base object class   
    
    This is an abstract class, and cannot be created.
    
    .. versionadded:: NX6.0.0
    """
    Null: Motor = ...  # unknown typename


class LinkInitialVelocityAngularVelocityTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LinkInitialVelocityAngularVelocityType():
    """
    Defines rotate type of initial velocity.
    If :py:class:`NXOpen.Motion.LinkInitialVelocityAngularVelocityType.Magnitude <NXOpen.Motion.LinkInitialVelocityAngularVelocityType>` is set, :py:meth:`NXOpen.Motion.LinkInitialVelocity.RotateVector` 
    and :py:meth:`NXOpen.Motion.LinkInitialVelocity.RotateExpression` is valid.If :py:class:`NXOpen.Motion.LinkInitialVelocityAngularVelocityType.Component <NXOpen.Motion.LinkInitialVelocityAngularVelocityType>` 
    is selected, :py:meth:`NXOpen.Motion.LinkInitialVelocity.RotateCsys` , :py:meth:`NXOpen.Motion.LinkInitialVelocity.WxExpression`, 
    :py:meth:`NXOpen.Motion.LinkInitialVelocity.WyExpression`,and :py:meth:`NXOpen.Motion.LinkInitialVelocity.WzExpression` is valid. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Magnitude", "Magnitude type define rotate vector"
       "Component", "Component type define rotate csys"
    """
    Magnitude = 0  # LinkInitialVelocityAngularVelocityTypeMemberType
    Component = 1  # LinkInitialVelocityAngularVelocityTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LinkInitialVelocity(NXOpen.TaggedObject):
    """
    Represents a :py:class:`NXOpen.Motion.LinkInitialVelocity`
    
    .. versionadded:: NX5.0.0
    """
    
    class AngularVelocityType():
        """
        Defines rotate type of initial velocity.
        If :py:class:`NXOpen.Motion.LinkInitialVelocityAngularVelocityType.Magnitude <NXOpen.Motion.LinkInitialVelocityAngularVelocityType>` is set, :py:meth:`NXOpen.Motion.LinkInitialVelocity.RotateVector` 
        and :py:meth:`NXOpen.Motion.LinkInitialVelocity.RotateExpression` is valid.If :py:class:`NXOpen.Motion.LinkInitialVelocityAngularVelocityType.Component <NXOpen.Motion.LinkInitialVelocityAngularVelocityType>` 
        is selected, :py:meth:`NXOpen.Motion.LinkInitialVelocity.RotateCsys` , :py:meth:`NXOpen.Motion.LinkInitialVelocity.WxExpression`, 
        :py:meth:`NXOpen.Motion.LinkInitialVelocity.WyExpression`,and :py:meth:`NXOpen.Motion.LinkInitialVelocity.WzExpression` is valid. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Magnitude", "Magnitude type define rotate vector"
           "Component", "Component type define rotate csys"
        """
        Magnitude = 0  # LinkInitialVelocityAngularVelocityTypeMemberType
        Component = 1  # LinkInitialVelocityAngularVelocityTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    RotateCsys: NXOpen.CoordinateSystem = ...
    """
    Returns or sets  the rotate csys.  
    
    Only valid if :py:class:`NXOpen.Motion.LinkInitialVelocityAngularVelocityType.Component <NXOpen.Motion.LinkInitialVelocityAngularVelocityType>` is set. 
    
    <hr>
    
    Getter Method
    
    Signature ``RotateCsys`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RotateCsys`` 
    
    :param rotateCsys: 
    :type rotateCsys: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    RotateExpression: NXOpen.Expression = ...
    """
    Returns  the rotate magnitue expression.  
    
    Only valid if :py:class:`NXOpen.Motion.LinkInitialVelocityAngularVelocityType.Magnitude <NXOpen.Motion.LinkInitialVelocityAngularVelocityType>` is set. 
    
    <hr>
    
    Getter Method
    
    Signature ``RotateExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    RotateType: LinkInitialVelocityAngularVelocityType = ...
    """
    Returns or sets  the rotate type 
    
    <hr>
    
    Getter Method
    
    Signature ``RotateType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.LinkInitialVelocityAngularVelocityType` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RotateType`` 
    
    :param rotateType: 
    :type rotateType: :py:class:`NXOpen.Motion.LinkInitialVelocityAngularVelocityType` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    RotateVector: NXOpen.Direction = ...
    """
    Returns or sets  the rotate vector.  
    
    Only valid if :py:class:`NXOpen.Motion.LinkInitialVelocityAngularVelocityType.Magnitude <NXOpen.Motion.LinkInitialVelocityAngularVelocityType>` is set. 
    
    <hr>
    
    Getter Method
    
    Signature ``RotateVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RotateVector`` 
    
    :param rotateVector: 
    :type rotateVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    TranslateExpression: NXOpen.Expression = ...
    """
    Returns  the translate magnitue expression.  
    
    <hr>
    
    Getter Method
    
    Signature ``TranslateExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    TranslateVector: NXOpen.Direction = ...
    """
    Returns or sets  the translate vector 
    
    <hr>
    
    Getter Method
    
    Signature ``TranslateVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TranslateVector`` 
    
    :param translateVector: 
    :type translateVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    WxExpression: NXOpen.Expression = ...
    """
    Returns  the component of rotation about X axis.  
    
    Only valid if :py:class:`NXOpen.Motion.LinkInitialVelocityAngularVelocityType.Component <NXOpen.Motion.LinkInitialVelocityAngularVelocityType>` is set. 
    
    <hr>
    
    Getter Method
    
    Signature ``WxExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    WyExpression: NXOpen.Expression = ...
    """
    Returns  the component of rotation about Y axis.  
    
    Only valid if :py:class:`NXOpen.Motion.LinkInitialVelocityAngularVelocityType.Component <NXOpen.Motion.LinkInitialVelocityAngularVelocityType>` is set. 
    
    <hr>
    
    Getter Method
    
    Signature ``WyExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    WzExpression: NXOpen.Expression = ...
    """
    Returns  the component of rotation about Z axis.  
    
    Only valid if :py:class:`NXOpen.Motion.LinkInitialVelocityAngularVelocityType.Component <NXOpen.Motion.LinkInitialVelocityAngularVelocityType>` is set. 
    
    <hr>
    
    Getter Method
    
    Signature ``WzExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: LinkInitialVelocity = ...  # unknown typename


class AdvancedSolutionBuilder(MotionBuilder):
    """
    Represents a :py:class:`NXOpen.Motion.AdvancedSolution` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.MotionSolutionCollection.CreateAdvancedSolutionBuilder`
    
    .. versionadded:: NX12.0.0
    """
    Definition: str = ...
    """
    Returns or sets  the definition of text based element - MDF definition 
    
    <hr>
    
    Getter Method
    
    Signature ``Definition`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Definition`` 
    
    :param definition: 
    :type definition: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: AdvancedSolutionBuilder = ...  # unknown typename


class BaseSectionCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of BaseSections   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Motion.MotionManager`
    
    .. versionadded:: NX12.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateUserDefinedSectionBuilder(self, userDefinedSection: UserDefinedSection) -> UserDefinedSectionBuilder:
        """
        Creates a :py:class:`Motion.UserDefinedSectionBuilder`  
        
        Signature ``CreateUserDefinedSectionBuilder(userDefinedSection)`` 
        
        :param userDefinedSection:  :py:class:`NXOpen.Motion.UserDefinedSection`                                                                                                                   to be edited, if None then create a new one  
        :type userDefinedSection: :py:class:`NXOpen.Motion.UserDefinedSection` 
        :returns:  UserDefinedSectionBuilder object  
        :rtype: :py:class:`NXOpen.Motion.UserDefinedSectionBuilder` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def CreateStandardSectionBuilder(self, standardSection: StandardSection) -> StandardSectionBuilder:
        """
        Creates a :py:class:`Motion.StandardSectionBuilder`  
        
        Signature ``CreateStandardSectionBuilder(standardSection)`` 
        
        :param standardSection:  :py:class:`NXOpen.Motion.StandardSection`                                                                                                                   to be edited, if None then create a new one  
        :type standardSection: :py:class:`NXOpen.Motion.StandardSection` 
        :returns:  StandardSectionBuilder object  
        :rtype: :py:class:`NXOpen.Motion.StandardSectionBuilder` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def FindObject(self, name: str) -> BaseSection:
        """
        Finds the :py:class:`NXOpen.Motion.BaseSection` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Motion.BaseSection`  
        :type name: str 
        :returns:  :py:class:`NXOpen.Motion.BaseSection` with this name  
        :rtype: :py:class:`NXOpen.Motion.BaseSection` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    


class GraphBuilderRequestChoicesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class GraphBuilderRequestChoices():
    """
    Request attribute of the curve data. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Displacement", "Displacement"
       "Velocity", "Velocity"
       "Acceleration", "Acceleration"
       "Force", "Force"
       "MotorDriver", "Motor Driver"
    """
    Displacement = 0  # GraphBuilderRequestChoicesMemberType
    Velocity = 1  # GraphBuilderRequestChoicesMemberType
    Acceleration = 2  # GraphBuilderRequestChoicesMemberType
    Force = 3  # GraphBuilderRequestChoicesMemberType
    MotorDriver = 4  # GraphBuilderRequestChoicesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class GraphBuilderComponentChoicesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class GraphBuilderComponentChoices():
    """
    Component attribute of the curve data. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Mag", "Magnitude"
       "X", "X"
       "Y", "Y"
       "Z", "Z"
       "Amag", "Angular Magnitude"
       "Xy", "XY"
       "Yz", "YZ"
       "Zx", "ZX"
       "InputVoltage", "Input Voltage"
       "ElectricCurrent", "Electric Current"
       "ElectricTorque", "Electric Torque"
       "SignalChart", "Signal Chart"
    """
    Mag = 0  # GraphBuilderComponentChoicesMemberType
    X = 1  # GraphBuilderComponentChoicesMemberType
    Y = 2  # GraphBuilderComponentChoicesMemberType
    Z = 3  # GraphBuilderComponentChoicesMemberType
    Amag = 4  # GraphBuilderComponentChoicesMemberType
    Xy = 5  # GraphBuilderComponentChoicesMemberType
    Yz = 6  # GraphBuilderComponentChoicesMemberType
    Zx = 7  # GraphBuilderComponentChoicesMemberType
    InputVoltage = 8  # GraphBuilderComponentChoicesMemberType
    ElectricCurrent = 9  # GraphBuilderComponentChoicesMemberType
    ElectricTorque = 10  # GraphBuilderComponentChoicesMemberType
    SignalChart = 11  # GraphBuilderComponentChoicesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class GraphBuilderCsysChoicesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class GraphBuilderCsysChoices():
    """
    Csys attribute of the curve data. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Relative", "Relative"
       "Absolute", "Absolute"
    """
    Relative = 0  # GraphBuilderCsysChoicesMemberType
    Absolute = 1  # GraphBuilderCsysChoicesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class GraphBuilderXAxisTypeChoicesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class GraphBuilderXAxisTypeChoices():
    """
    X axis type choice. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "DefaultTime", "Time"
       "UserDefined", "User defined"
    """
    DefaultTime = 0  # GraphBuilderXAxisTypeChoicesMemberType
    UserDefined = 1  # GraphBuilderXAxisTypeChoicesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class GraphBuilderPlotStyleChoicesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class GraphBuilderPlotStyleChoices():
    """
    Plot output type  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Ftk", "To FTK"
       "Spreadsheet", "To Spreadsheet"
    """
    Ftk = 0  # GraphBuilderPlotStyleChoicesMemberType
    Spreadsheet = 1  # GraphBuilderPlotStyleChoicesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class GraphBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Motion.GraphBuilder`,
    only creation is supported
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.GraphManager.CreateGraphBuilder`
    
    .. versionadded:: NX5.0.0
    
    .. deprecated::  NX11.0.0
       Use :py:class:`Motion.GraphObjectBuilder` instead.
    """
    
    class CurveData():
        """
        Contains the structure of curve associated with curve data.  
        
        .
        Constructor: 
        NXOpen.Motion.GraphBuilder.CurveData()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        MotionObject: NXOpen.NXObject = ...
        """
        Attribute object 
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.NXObject`
        """
        RequestIndex: int = ...
        """
        Attribute request choice 
        <hr>
        
        Field Value
        Type:int
        """
        ComponentIndex: int = ...
        """
        Attribute component choice 
        <hr>
        
        Field Value
        Type:int
        """
        RequestCsysIndex: int = ...
        """
        Attribute csys choice 
        <hr>
        
        Field Value
        Type:int
        """
    
    
    class RequestChoices():
        """
        Request attribute of the curve data. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Displacement", "Displacement"
           "Velocity", "Velocity"
           "Acceleration", "Acceleration"
           "Force", "Force"
           "MotorDriver", "Motor Driver"
        """
        Displacement = 0  # GraphBuilderRequestChoicesMemberType
        Velocity = 1  # GraphBuilderRequestChoicesMemberType
        Acceleration = 2  # GraphBuilderRequestChoicesMemberType
        Force = 3  # GraphBuilderRequestChoicesMemberType
        MotorDriver = 4  # GraphBuilderRequestChoicesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ComponentChoices():
        """
        Component attribute of the curve data. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Mag", "Magnitude"
           "X", "X"
           "Y", "Y"
           "Z", "Z"
           "Amag", "Angular Magnitude"
           "Xy", "XY"
           "Yz", "YZ"
           "Zx", "ZX"
           "InputVoltage", "Input Voltage"
           "ElectricCurrent", "Electric Current"
           "ElectricTorque", "Electric Torque"
           "SignalChart", "Signal Chart"
        """
        Mag = 0  # GraphBuilderComponentChoicesMemberType
        X = 1  # GraphBuilderComponentChoicesMemberType
        Y = 2  # GraphBuilderComponentChoicesMemberType
        Z = 3  # GraphBuilderComponentChoicesMemberType
        Amag = 4  # GraphBuilderComponentChoicesMemberType
        Xy = 5  # GraphBuilderComponentChoicesMemberType
        Yz = 6  # GraphBuilderComponentChoicesMemberType
        Zx = 7  # GraphBuilderComponentChoicesMemberType
        InputVoltage = 8  # GraphBuilderComponentChoicesMemberType
        ElectricCurrent = 9  # GraphBuilderComponentChoicesMemberType
        ElectricTorque = 10  # GraphBuilderComponentChoicesMemberType
        SignalChart = 11  # GraphBuilderComponentChoicesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class CsysChoices():
        """
        Csys attribute of the curve data. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Relative", "Relative"
           "Absolute", "Absolute"
        """
        Relative = 0  # GraphBuilderCsysChoicesMemberType
        Absolute = 1  # GraphBuilderCsysChoicesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class XAxisTypeChoices():
        """
        X axis type choice. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "DefaultTime", "Time"
           "UserDefined", "User defined"
        """
        DefaultTime = 0  # GraphBuilderXAxisTypeChoicesMemberType
        UserDefined = 1  # GraphBuilderXAxisTypeChoicesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class PlotStyleChoices():
        """
        Plot output type  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Ftk", "To FTK"
           "Spreadsheet", "To Spreadsheet"
        """
        Ftk = 0  # GraphBuilderPlotStyleChoicesMemberType
        Spreadsheet = 1  # GraphBuilderPlotStyleChoicesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetMotionObjects(self) -> 'list[NXOpen.NXObject]':
        """
        Get the motion objects  
        
        Signature ``GetMotionObjects()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def SetMotionObjects(self, motionObjects: 'list[NXOpen.NXObject]') -> None:
        """
        Set the motion objects 
        
        Signature ``SetMotionObjects(motionObjects)`` 
        
        :param motionObjects: 
        :type motionObjects: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def GetObject(self) -> NXOpen.NXObject:
        """
        Returns the object currently being edited by this builder.  
        
        If
        a new object is being created, and the builder has not yet
        been commited, returns None.
        
        Signature ``GetObject()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveUpYCurves(self, selectedIndices: 'list[int]') -> None:
        """
        Move up the curves in the y curve list by one step 
        
        Signature ``MoveUpYCurves(selectedIndices)`` 
        
        :param selectedIndices:  a list of y curve indeces  
        :type selectedIndices: list of int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def MoveDownYCurves(self, selectedIndices: 'list[int]') -> None:
        """
        Move down the curves in the y curve list by one step 
        
        Signature ``MoveDownYCurves(selectedIndices)`` 
        
        :param selectedIndices:  a list of y curve indeces  
        :type selectedIndices: list of int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def GetYCurves(self) -> 'list[GraphBuilderCurveData_Struct]':
        """
        Get the defined y curves  
        
        Signature ``GetYCurves()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Motion.GraphBuilderCurveData_Struct` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def AddYCurves(self, curves: 'list[GraphBuilderCurveData_Struct]') -> None:
        """
        Add curves to the end of y curve list 
        
        Signature ``AddYCurves(curves)`` 
        
        :param curves: 
        :type curves: list of :py:class:`NXOpen.Motion.GraphBuilderCurveData_Struct` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def RemoveYCurve(self, yCurve: GraphBuilderCurveData_Struct) -> None:
        """
        Remove the curve from the y curve list 
        
        Signature ``RemoveYCurve(yCurve)`` 
        
        :param yCurve: 
        :type yCurve: :py:class:`NXOpen.Motion.GraphBuilderCurveData_Struct` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def SetXCurve(self, newCurve: GraphBuilderCurveData_Struct) -> None:
        """
        Set x curve 
        
        Signature ``SetXCurve(newCurve)`` 
        
        :param newCurve: 
        :type newCurve: :py:class:`NXOpen.Motion.GraphBuilderCurveData_Struct` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    AfuFile: str = ...
    """
    Returns or sets  the afu file name 
    
    <hr>
    
    Getter Method
    
    Signature ``AfuFile`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``AfuFile`` 
    
    :param fileName: 
    :type fileName: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Component: GraphBuilderComponentChoices = ...
    """
    Returns or sets  the component 
    
    <hr>
    
    Getter Method
    
    Signature ``Component`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.GraphBuilderComponentChoices` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Component`` 
    
    :param component: 
    :type component: :py:class:`NXOpen.Motion.GraphBuilderComponentChoices` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    CoordinateSystemType: GraphBuilderCsysChoices = ...
    """
    Returns or sets  the csystype 
    
    <hr>
    
    Getter Method
    
    Signature ``CoordinateSystemType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.GraphBuilderCsysChoices` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``CoordinateSystemType`` 
    
    :param coordinateSystemType: 
    :type coordinateSystemType: :py:class:`NXOpen.Motion.GraphBuilderCsysChoices` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    GraphTitle: str = ...
    """
    Returns or sets  the graph title 
    
    <hr>
    
    Getter Method
    
    Signature ``GraphTitle`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``GraphTitle`` 
    
    :param graphTitle: 
    :type graphTitle: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Mode: int = ...
    """
    Returns or sets  the mode id
    
    <hr>
    
    Getter Method
    
    Signature ``Mode`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Mode`` 
    
    :param modeID: 
    :type modeID: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ModeRequest: GraphBuilderRequestChoices = ...
    """
    Returns or sets  the mode request 
    
    <hr>
    
    Getter Method
    
    Signature ``ModeRequest`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.GraphBuilderRequestChoices` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``ModeRequest`` 
    
    :param modeRequest: 
    :type modeRequest: :py:class:`NXOpen.Motion.GraphBuilderRequestChoices` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Object: NXOpen.NXObject = ...
    """
    Returns or sets  the object selected from motion objects 
    
    <hr>
    
    Getter Method
    
    Signature ``Object`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Object`` 
    
    :param object: 
    :type object: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    PlotEnable: bool = ...
    """
    Returns or sets  the plot enable flag 
    
    <hr>
    
    Getter Method
    
    Signature ``PlotEnable`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``PlotEnable`` 
    
    :param plotEnable: 
    :type plotEnable: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    PlotStyle: GraphBuilderPlotStyleChoices = ...
    """
    Returns or sets  the plot style choice 
    
    <hr>
    
    Getter Method
    
    Signature ``PlotStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.GraphBuilderPlotStyleChoices` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``PlotStyle`` 
    
    :param plotStyle: 
    :type plotStyle: :py:class:`NXOpen.Motion.GraphBuilderPlotStyleChoices` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Request: GraphBuilderRequestChoices = ...
    """
    Returns or sets  the request 
    
    <hr>
    
    Getter Method
    
    Signature ``Request`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.GraphBuilderRequestChoices` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Request`` 
    
    :param request: 
    :type request: :py:class:`NXOpen.Motion.GraphBuilderRequestChoices` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    StoreEnable: bool = ...
    """
    Returns or sets  the store enable flag 
    
    <hr>
    
    Getter Method
    
    Signature ``StoreEnable`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``StoreEnable`` 
    
    :param storeEnable: 
    :type storeEnable: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    XAxisType: GraphBuilderXAxisTypeChoices = ...
    """
    Returns or sets  the x axis type 
    
    <hr>
    
    Getter Method
    
    Signature ``XAxisType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.GraphBuilderXAxisTypeChoices` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``XAxisType`` 
    
    :param xAxisType: 
    :type xAxisType: :py:class:`NXOpen.Motion.GraphBuilderXAxisTypeChoices` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    XCurve: GraphBuilderCurveData_Struct = ...
    """
    Returns  the x curve 
    
    <hr>
    
    Getter Method
    
    Signature ``XCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.GraphBuilderCurveData_Struct` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: GraphBuilder = ...  # unknown typename


class BodyContactBuilderContactTypeOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BodyContactBuilderContactTypeOption():
    """
    the contact type (3D Contact or Sphere to CAD Contact) 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "CADToCADContact", " - "
       "SphereToCADContact", " - "
    """
    CADToCADContact = 0  # BodyContactBuilderContactTypeOptionMemberType
    SphereToCADContact = 1  # BodyContactBuilderContactTypeOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BodyContactBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Motion.BodyContactBuilder`   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.BodyContactCollection.CreateBodyContactBuilder`
    
    Default values.
    
    ==================================================================================  ==============================================================
    Property                                                                            Value
    ==================================================================================  ==============================================================
    AdamsParameters.CoulombFrictionOption                                               Off 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    AdamsParameters.DynamicCoefficientExpression.Value                                  0.2 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    AdamsParameters.ForceExponentExpression.Value                                       2.0 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    AdamsParameters.ForceModelType                                                      Impact 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    AdamsParameters.FrictionVelocityExpression.Value                                    0.1 (millimeters part), 0.003937 (inches part) 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    AdamsParameters.MaterialDampingExpression.Value                                     10000.0 (millimeters part), 57.0993 (inches part) 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    AdamsParameters.PenetrationDepthExpression.Value                                    0.01 (millimeters part), 0.0003937 (inches part) 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    AdamsParameters.RestitutionCoefficentExpression.Value                               0.85 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    AdamsParameters.StaticCoefficientExpression.Value                                   0.3 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    AdamsParameters.StictionVelocityExpression.Value                                    0.01 (millimeters part), 0.0003937 (inches part) 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    AdamsParameters.StiffnessExpression.Value                                           100000000.0 (millimeters part), 570993.142 (inches part) 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    LmsParameters.ActionAngleTolerance.Value                                            25 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    LmsParameters.ActionDistanceTolerance.Value                                         0.0 (millimeters part), 0.0 (inches part) 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    LmsParameters.ActionEnableMaxFacetSize                                              0 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    LmsParameters.ActionMaxFacetSize.Value                                              1000 (millimeters part), 39.370078740157 (inches part) 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    LmsParameters.ActionUseTessellationFile                                             0 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    LmsParameters.BaseAngleTolerance.Value                                              25 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    LmsParameters.BaseDistanceTolerance.Value                                           0.0 (millimeters part), 0.0 (inches part) 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    LmsParameters.BaseEnableMaxFacetSize                                                0 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    LmsParameters.BaseMaxFacetSize.Value                                                1000 (millimeters part), 39.370078740157 (inches part) 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    LmsParameters.BaseUseTessellationFile                                               0 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    LmsParameters.CoulombFrictionOption                                                 Off 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    LmsParameters.DynamicCoefficient.Value                                              0.2 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    LmsParameters.ForceExponent.Value                                                   2.0 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    LmsParameters.ForceModel                                                            Auto 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    LmsParameters.ForceModelTolerance.Value                                             5.0 (millimeters part), 0.196850393700787 (inches part) 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    LmsParameters.FrictionVelocity.Value                                                0.1 (millimeters part), 0.003937 (inches part) 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    LmsParameters.MaterialDamping.Value                                                 10000.0 (millimeters part),57.1014715473270000 (inches part) 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    LmsParameters.MaxPenetrationDepth.Value                                             0.0254 (millimeters part), 0.001 (inches part) 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    LmsParameters.StaticCoefficient.Value                                               0.3 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    LmsParameters.StictionVelocity.Value                                                0.01 (millimeters part), 0.0003937 (inches part) 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    LmsParameters.Stiffness.Value                                                       100000000.0 (millimeters part), 571014.71547327 (inches part) 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    RecurdynParameters.BufferRadiusFactorExpression.Value                               1.2 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    RecurdynParameters.ContactTypeOption                                                Solid 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    RecurdynParameters.CoulombFrictionOption                                            Off 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    RecurdynParameters.DynamicCoefficientExpression.Value                               0.2 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    RecurdynParameters.FirstGeometryBoundingBufferLengthExpression.Value                20 (millimeters part),0.7874 (inches part) 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    RecurdynParameters.FirstGeometryMaxFacetSizeFactorExpression.Value                  2.0 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    RecurdynParameters.FirstGeometryMaxFacetSizeFactorFlag                              False 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    RecurdynParameters.FirstGeometryMaximumPenetrationExpression.Value                  1.0 (millimeters part), 0.03937 (inches part) 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    RecurdynParameters.FirstGeometryPlaneToleranceFactorExpression.Value                5.0 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    RecurdynParameters.FirstGeometryPlaneToleranceFactorSolidContactExpression.Value    3.0 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    RecurdynParameters.ForceExponentExpression.Value                                    2.0 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    RecurdynParameters.ForceModelType                                                   Impact 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    RecurdynParameters.FrictionVelocityExpression.Value                                 0.1 (millimeters part), 0.003937 (inches part) 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    RecurdynParameters.GlobalMaxPenetrationExpression.Value                             10.0 (millimeters part),0.3937 (inches part) 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    RecurdynParameters.LocalMaxPenetrationExpression.Value                              0.0 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    RecurdynParameters.MaterialDampingExpression.Value                                  10000.0 (millimeters part),57.0993 (inches part) 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    RecurdynParameters.MaximumStepSizeFactorExpression.Value                            10.0 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    RecurdynParameters.PenetrationDepthExpression.Value                                 0.01 (millimeters part), 0.0003937 (inches part) 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    RecurdynParameters.ReboundDampingFactorExpression.Value                             0.25 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    RecurdynParameters.ReboundDampingFactorFlag                                         True 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    RecurdynParameters.SecondGeometryBoundingBufferLengthExpression.Value               20 (millimeters part),0.7874 (inches part) 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    RecurdynParameters.SecondGeometryMaxFacetSizeFactorExpression.Value                 2.0 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    RecurdynParameters.SecondGeometryMaxFacetSizeFactorFlag                             False 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    RecurdynParameters.SecondGeometryMaximumPenetrationExpression.Value                 1.0 (millimeters part), 0.03937 (inches part) 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    RecurdynParameters.SecondGeometryPlaneToleranceFactorExpression.Value               5.0 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    RecurdynParameters.SecondGeometryPlaneToleranceFactorSolidContactExpression.Value   3.0 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    RecurdynParameters.StaticCoefficientExpression.Value                                0.3 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    RecurdynParameters.StictionVelocityExpression.Value                                 0.01 (millimeters part), 0.0003937 (inches part) 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    RecurdynParameters.StiffnessExpression.Value                                        100000000.0 (millimeters part), 570993.142 (inches part) 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    RecurdynParameters.SurfaceTypeOption                                                Faceted 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    SphereToCadParameters.BodyAngleTolerance.Value                                      25 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    SphereToCadParameters.BodyDistanceTolerance.Value                                   0.0 (millimeters part), 0.0 (inches part) 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    SphereToCadParameters.BodyEnableMaxFacetSize                                        0 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    SphereToCadParameters.BodyMaxFacetSize.Value                                        1000 (millimeters part), 39.370078740157 (inches part) 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    SphereToCadParameters.CoulombFrictionOption                                         Off 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    SphereToCadParameters.DynamicCoefficient.Value                                      0.2 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    SphereToCadParameters.ForceExponent.Value                                           2.0 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    SphereToCadParameters.FrictionVelocity.Value                                        0.1 (millimeters part), 0.003937 (inches part) 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    SphereToCadParameters.MaterialDamping.Value                                         10000.0 (millimeters part),57.1014715473270000 (inches part) 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    SphereToCadParameters.MaxPenetrationDepth.Value                                     0.0254 (millimeters part), 0.001 (inches part) 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    SphereToCadParameters.SphereRadius.Value                                            1000.0 (millimeters part), 39.370078740157 (inches part) 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    SphereToCadParameters.StaticCoefficient.Value                                       0.3 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    SphereToCadParameters.StictionVelocity.Value                                        0.01 (millimeters part), 0.0003937 (inches part) 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    SphereToCadParameters.Stiffness.Value                                               100000000.0 (millimeters part), 571014.71547327 (inches part) 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    SphereToCadParameters.SuperElementIncrement                                         1 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    SphereToCadParameters.SuperElementReportInstance                                    1 
    ----------------------------------------------------------------------------------  --------------------------------------------------------------
    SphereToCadParameters.UseTessellationFile                                           0 
    ==================================================================================  ==============================================================
    
    .. versionadded:: NX5.0.0
    """
    
    class ContactTypeOption():
        """
        the contact type (3D Contact or Sphere to CAD Contact) 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "CADToCADContact", " - "
           "SphereToCADContact", " - "
        """
        CADToCADContact = 0  # BodyContactBuilderContactTypeOptionMemberType
        SphereToCADContact = 1  # BodyContactBuilderContactTypeOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AdamsParameters: BodyContactAdams = ...
    """
    Returns the 3D BodyContact's subobject (the adams parameters)  
    
    <hr>
    
    Getter Method
    
    Signature ``AdamsParameters`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.BodyContactAdams` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    ContactType: BodyContactBuilderContactTypeOption = ...
    """
    Returns or sets  the type: 3D contact or Sphere to CAD
    
    <hr>
    
    Getter Method
    
    Signature ``ContactType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.BodyContactBuilderContactTypeOption` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``ContactType`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Motion.BodyContactBuilderContactTypeOption` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    FirstContactGeometry: NXOpen.SelectNXObjectList = ...
    """
    Returns  the selection of the first contact geometry 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstContactGeometry`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    LmsParameters: BodyContactLms = ...
    """
    Returns  the 3D BodyContact's subobject (the lms parameters) 
    
    <hr>
    
    Getter Method
    
    Signature ``LmsParameters`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.BodyContactLms` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Name: str = ...
    """
    Returns or sets  the name 
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    RecurdynParameters: BodyContactRecurdyn = ...
    """
    Returns  the 3D BodyContact's subobject (the recurdyn parameters) 
    
    <hr>
    
    Getter Method
    
    Signature ``RecurdynParameters`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.BodyContactRecurdyn` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    SecondContactGeometry: NXOpen.SelectNXObjectList = ...
    """
    Returns  the selection of the second contact geometry 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondContactGeometry`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    SphereCenter: NXOpen.Point = ...
    """
    Returns or sets  the selection of sphere center for Sphere To CAD 
    
    <hr>
    
    Getter Method
    
    Signature ``SphereCenter`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``SphereCenter`` 
    
    :param sphereCenter: 
    :type sphereCenter: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SphereLink: SelectLink = ...
    """
    Returns  the selection of sphere link for Sphere To CAD 
    
    <hr>
    
    Getter Method
    
    Signature ``SphereLink`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectLink` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SphereToCadParameters: BodyContactSphereToCAD = ...
    """
    Returns  the 3D BodyContact's subobject (the sphere to cad parameters) 
    
    <hr>
    
    Getter Method
    
    Signature ``SphereToCadParameters`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.BodyContactSphereToCAD` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    Null: BodyContactBuilder = ...  # unknown typename


class FlexBody(MotionObject, IGraphSource):
    """
    Represents the Motion FlexBody class.  
    
    It must be associated
    with a Motion Link. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Motion.FlexBodyBuilder`
    
    .. versionadded:: NX7.5.0
    """
    
    def GetNormalModeById(self, modeId: int) -> NormalModeProperty:
        """
        Gets normal mode for given mode ID  
        
        Signature ``GetNormalModeById(modeId)`` 
        
        :param modeId: 
        :type modeId: int 
        :returns: 
        :rtype: :py:class:`NXOpen.Motion.NormalModeProperty` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def GetNormalModes(self) -> 'list[NormalModeProperty]':
        """
        Gets all normal modes  
        
        Signature ``GetNormalModes()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Motion.NormalModeProperty` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def Activate(self, activate: bool) -> None:
        """
        Sets activate or deactivate status for all normal modes 
        
        Signature ``Activate(activate)`` 
        
        :param activate: 
        :type activate: bool 
        
        .. versionadded:: NX7.5.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def SetDampingFactors(self, viscousDamping: float, hystereticDamping: float) -> None:
        """
        Sets damping factors for all normal modes 
        
        Signature ``SetDampingFactors(viscousDamping, hystereticDamping)`` 
        
        :param viscousDamping: 
        :type viscousDamping: float 
        :param hystereticDamping: 
        :type hystereticDamping: float 
        
        .. versionadded:: NX7.5.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def GetPhysicalDampingSettings(self) -> FlexPhysicalDampingSettings:
        """
        Gets the physical damping setting object  
        
        Signature ``GetPhysicalDampingSettings()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Motion.FlexPhysicalDampingSettings` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    NormalModeCount: int = ...
    """
    Returns  the count of normal modes 
    
    <hr>
    
    Getter Method
    
    Signature ``NormalModeCount`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: FlexBody = ...  # unknown typename


class InputPortAssociationList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[InputPortAssociation]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.Motion.InputPortAssociation` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: InputPortAssociation) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.Motion.InputPortAssociation` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: InputPortAssociation) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.Motion.InputPortAssociation` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> InputPortAssociation:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.Motion.InputPortAssociation` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: InputPortAssociation) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Motion.InputPortAssociation` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: InputPortAssociation, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Motion.InputPortAssociation` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[InputPortAssociation]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.Motion.InputPortAssociation` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[InputPortAssociation]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.Motion.InputPortAssociation` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: InputPortAssociation, object2: InputPortAssociation) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.Motion.InputPortAssociation` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.Motion.InputPortAssociation` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: InputPortAssociation) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.Motion.InputPortAssociation` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: InputPortAssociationList = ...  # unknown typename


class MarkerBuilder(NXOpen.Builder):
    """
    Represents a builder of Marker   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.MarkerCollection.CreateMarkerBuilder`
    
    Default values.
    
    =============  =====
    Property       Value
    =============  =====
    DisplayScale   1 
    =============  =====
    
    .. versionadded:: NX6.0.0
    """
    Csys: NXOpen.CoordinateSystem = ...
    """
    Returns or sets  the csys 
    
    <hr>
    
    Getter Method
    
    Signature ``Csys`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Csys`` 
    
    :param csys: 
    :type csys: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    DisplayScale: float = ...
    """
    Returns or sets  the display scale 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayScale`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayScale`` 
    
    :param displayScale: 
    :type displayScale: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Name: str = ...
    """
    Returns or sets  the name 
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    OriginPoint: NXOpen.Point = ...
    """
    Returns or sets  the origin point 
    
    <hr>
    
    Getter Method
    
    Signature ``OriginPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OriginPoint`` 
    
    :param originPoint: 
    :type originPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SelectLink: NXOpen.SelectNXObject = ...
    """
    Returns  the select link 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectLink`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: MarkerBuilder = ...  # unknown typename


class BushingDampingCoefficients(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a Motion BushingDampingCoefficients
    
    .. versionadded:: NX12.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    CylindricalDampingCoefficients: BushingCylindricalCoefficientsComponent = ...
    """
    Returns  the cylindrical damping coefficients.  
    
    It is used in :py:class:`Motion.BushingBuilderBushingTypes.Cylindrical <Motion.BushingBuilderBushingTypes>` case 
    
    <hr>
    
    Getter Method
    
    Signature ``CylindricalDampingCoefficients`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.BushingCylindricalCoefficientsComponent` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    GeneralTorsionalDampingCoefficients: BushingGeneralCoefficientsComponent = ...
    """
    Returns  the general torsional damping coefficients.  
    
    It is used in :py:class:`Motion.BushingBuilderBushingTypes.General <Motion.BushingBuilderBushingTypes>` case 
    
    <hr>
    
    Getter Method
    
    Signature ``GeneralTorsionalDampingCoefficients`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.BushingGeneralCoefficientsComponent` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    GeneralTranslationalDampingCoefficients: BushingGeneralCoefficientsComponent = ...
    """
    Returns  the general translational damping coefficients.  
    
    It is used in :py:class:`Motion.BushingBuilderBushingTypes.General <Motion.BushingBuilderBushingTypes>` case 
    
    <hr>
    
    Getter Method
    
    Signature ``GeneralTranslationalDampingCoefficients`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.BushingGeneralCoefficientsComponent` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    SphericalDampingCoefficients: BushingSphericalCoefficientsComponent = ...
    """
    Returns  the spherical damping coefficients.  
    
    It is used in :py:class:`Motion.BushingBuilderBushingTypes.Spherical <Motion.BushingBuilderBushingTypes>` case 
    
    <hr>
    
    Getter Method
    
    Signature ``SphericalDampingCoefficients`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.BushingSphericalCoefficientsComponent` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    Null: BushingDampingCoefficients = ...  # unknown typename


class NormalModeProperty(NXOpen.NXObject):
    """
    Represents the properties of one normal mode   
    
    .. versionadded:: NX7.5.0
    """
    Active: bool = ...
    """
    Returns or sets  the activate status for each normal mode 
    
    <hr>
    
    Getter Method
    
    Signature ``Active`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Active`` 
    
    :param active: 
    :type active: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Frequency: float = ...
    """
    Returns  the natural frequency of the normal mode 
    
    <hr>
    
    Getter Method
    
    Signature ``Frequency`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Hysteretic: float = ...
    """
    Returns or sets  the hysteretic factor 
    
    <hr>
    
    Getter Method
    
    Signature ``Hysteretic`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Hysteretic`` 
    
    :param hysteretic: 
    :type hysteretic: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Mass: float = ...
    """
    Returns  the mass of the normal mode 
    
    <hr>
    
    Getter Method
    
    Signature ``Mass`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ModeId: int = ...
    """
    Returns  the mode ID 
    
    <hr>
    
    Getter Method
    
    Signature ``ModeId`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    PhysicalHysteretic: float = ...
    """
    Returns  the physical hysteretic factor 
    
    <hr>
    
    Getter Method
    
    Signature ``PhysicalHysteretic`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    PhysicalViscous: float = ...
    """
    Returns  the physical viscous factor 
    
    <hr>
    
    Getter Method
    
    Signature ``PhysicalViscous`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    RxMass: float = ...
    """
    Returns  the percent mass of Rx direction component 
    
    <hr>
    
    Getter Method
    
    Signature ``RxMass`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    RyMass: float = ...
    """
    Returns  the percent mass of Ry direction component 
    
    <hr>
    
    Getter Method
    
    Signature ``RyMass`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    RzMass: float = ...
    """
    Returns  the percent mass of Rz direction component 
    
    <hr>
    
    Getter Method
    
    Signature ``RzMass`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Stiffness: float = ...
    """
    Returns  the stiffness of the normal mode 
    
    <hr>
    
    Getter Method
    
    Signature ``Stiffness`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Viscous: float = ...
    """
    Returns or sets  the viscous factor 
    
    <hr>
    
    Getter Method
    
    Signature ``Viscous`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Viscous`` 
    
    :param viscous: 
    :type viscous: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    XMass: float = ...
    """
    Returns  the percent mass of X direction component 
    
    <hr>
    
    Getter Method
    
    Signature ``XMass`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    YMass: float = ...
    """
    Returns  the percent mass of Y direction component 
    
    <hr>
    
    Getter Method
    
    Signature ``YMass`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ZMass: float = ...
    """
    Returns  the percent mass of Z direction component 
    
    <hr>
    
    Getter Method
    
    Signature ``ZMass`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: NormalModeProperty = ...  # unknown typename


class TirePropertyBasic(TireProperty):
    """
    Basic Tire Property element.
    
    This is an object that contains parameters needed for the Basic Tire model 
    To create or edit an instance of this class, use :py:class:`NXOpen.Motion.TirePropertyBasicBuilder`
    
    .. versionadded:: NX11.0.0
    """
    
    def CopyParameters(self, source: TirePropertyBasic) -> None:
        """
        Copy parameters from another :py:class:`Motion.TirePropertyBasic` 
        
        Signature ``CopyParameters(source)`` 
        
        :param source: 
        :type source: :py:class:`NXOpen.Motion.TirePropertyBasic` 
        
        .. versionadded:: NX11.0.0
        
        .. deprecated::  NX12.0.0
           Use :py:meth:`MotionMethods.CopyParameters` instead.
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    Null: TirePropertyBasic = ...  # unknown typename


class MotionFunction(NXOpen.CAE.Function, IGraphSource):
    """
    Represents a Motion Function Object   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.CAE.FunctionBuilder`
    
    .. versionadded:: NX11.0.0
    """
    Null: MotionFunction = ...  # unknown typename


class PointOnCurveCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of point on curve objects   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Motion.MotionManager`
    
    .. versionadded:: NX6.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreatePointOnCurveBuilder(self, pointOnCurve: PointOnCurve) -> PointOnCurveBuilder:
        """
        Creates a :py:class:`NXOpen.Motion.PointOnCurveBuilder`  
        
        Signature ``CreatePointOnCurveBuilder(pointOnCurve)`` 
        
        :param pointOnCurve:  :py:class:`NXOpen.Motion.PointOnCurve` to be edited, if None then create a new one  
        :type pointOnCurve: :py:class:`NXOpen.Motion.PointOnCurve` 
        :returns: 
        :rtype: :py:class:`NXOpen.Motion.PointOnCurveBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def FindObject(self, name: str) -> PointOnCurve:
        """
        Finds the :py:class:`NXOpen.Motion.PointOnCurve` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Motion.PointOnCurve`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Motion.PointOnCurve` with this name.  
        :rtype: :py:class:`NXOpen.Motion.PointOnCurve` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    


class SignalChartBuilderTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SignalChartBuilderType():
    """
    SignalChart type  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "OpenLoop", "Open loop"
       "ClosedLoop", "Closed loop"
    """
    OpenLoop = 0  # SignalChartBuilderTypeMemberType
    ClosedLoop = 1  # SignalChartBuilderTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SignalChartBuilder(MotionBuilder):
    """
    Represents a :py:class:`NXOpen.Motion.SignalChartBuilder`   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.SignalChartCollection.CreateSignalChartBuilder`
    
    .. versionadded:: NX6.0.0
    """
    
    class Type():
        """
        SignalChart type  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "OpenLoop", "Open loop"
           "ClosedLoop", "Closed loop"
        """
        OpenLoop = 0  # SignalChartBuilderTypeMemberType
        ClosedLoop = 1  # SignalChartBuilderTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def NewListItemExpression(self, sensor: MotionSensor, alwaysEvaluated: bool, timeSensor: int, condition: int, threshold: NXOpen.Expression, delayTime: NXOpen.Expression, signal: NXOpen.Expression) -> SignalChartListItem:
        """
        Creates a new list item including expression  
        
        Signature ``NewListItemExpression(sensor, alwaysEvaluated, timeSensor, condition, threshold, delayTime, signal)`` 
        
        :param sensor:  sensor  
        :type sensor: :py:class:`NXOpen.Motion.MotionSensor` 
        :param alwaysEvaluated:  always evaluted  
        :type alwaysEvaluated: bool 
        :param timeSensor:  time sensor  
        :type timeSensor: int 
        :param condition:  condition  
        :type condition: int 
        :param threshold:  threshold  
        :type threshold: :py:class:`NXOpen.Expression` 
        :param delayTime:  delay time  
        :type delayTime: :py:class:`NXOpen.Expression` 
        :param signal:  signal  
        :type signal: :py:class:`NXOpen.Expression` 
        :returns: 
        :rtype: :py:class:`NXOpen.Motion.SignalChartListItem` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_motion_motor ("NX Motion Motor")
        """
        ...
    
    ClosedSignalList: SignalChartListItemList = ...
    """
    Returns  the closed siganl list 
    
    <hr>
    
    Getter Method
    
    Signature ``ClosedSignalList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SignalChartListItemList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_motion_motor ("NX Motion Motor")
    """
    InitialSignalExpression: NXOpen.Expression = ...
    """
    Returns   the initial Signal Expression
    
    <hr>
    
    Getter Method
    
    Signature ``InitialSignalExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_motion_motor ("NX Motion Motor")
    """
    Name: str = ...
    """
    Returns or sets   the name 
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_motion_motor ("NX Motion Motor")
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_motion_motor ("NX Motion Motor")
    """
    OpenSignalFunction: NXOpen.CAE.Function = ...
    """
    Returns or sets  the open signal function 
    
    <hr>
    
    Getter Method
    
    Signature ``OpenSignalFunction`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CAE.Function` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_motion_motor ("NX Motion Motor")
    
    <hr>
    
    Setter Method
    
    Signature ``OpenSignalFunction`` 
    
    :param openSignalFunction: 
    :type openSignalFunction: :py:class:`NXOpen.CAE.Function` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_motion_motor ("NX Motion Motor")
    """
    SignalChartType: SignalChartBuilderType = ...
    """
    Returns or sets  the SignalChart type 
    
    <hr>
    
    Getter Method
    
    Signature ``SignalChartType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SignalChartBuilderType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_motion_motor ("NX Motion Motor")
    
    <hr>
    
    Setter Method
    
    Signature ``SignalChartType`` 
    
    :param signalchartType: 
    :type signalchartType: :py:class:`NXOpen.Motion.SignalChartBuilderType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_motion_motor ("NX Motion Motor")
    """
    Null: SignalChartBuilder = ...  # unknown typename


class LmsSolverPropertyDynamicAccelerationMethodsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LmsSolverPropertyDynamicAccelerationMethods():
    """
    dynamic acceleration method 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Banded", " - "
       "Harwell", " - "
       "Iterative", " - "
    """
    Banded = 0  # LmsSolverPropertyDynamicAccelerationMethodsMemberType
    Harwell = 1  # LmsSolverPropertyDynamicAccelerationMethodsMemberType
    Iterative = 2  # LmsSolverPropertyDynamicAccelerationMethodsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LmsSolverPropertyDynamicInitialVelocityMethodsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LmsSolverPropertyDynamicInitialVelocityMethods():
    """
    dynamic initial velocity method 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Qr", " - "
       "MoorePenrosePseudoinverse", " - "
       "MinimumKineticEnergy", " - "
    """
    Qr = 0  # LmsSolverPropertyDynamicInitialVelocityMethodsMemberType
    MoorePenrosePseudoinverse = 1  # LmsSolverPropertyDynamicInitialVelocityMethodsMemberType
    MinimumKineticEnergy = 2  # LmsSolverPropertyDynamicInitialVelocityMethodsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LmsSolverPropertyStaticJacobianTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LmsSolverPropertyStaticJacobianTypes():
    """
    static jacobian type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Exact", " - "
       "Finite", " - "
    """
    Exact = 0  # LmsSolverPropertyStaticJacobianTypesMemberType
    Finite = 1  # LmsSolverPropertyStaticJacobianTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LmsSolverPropertyRoadHeightAdjustmentTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LmsSolverPropertyRoadHeightAdjustmentTypes():
    """
    road height adjustment type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", " - "
       "Road", " - "
       "Vehicle", " - "
    """
    NotSet = 0  # LmsSolverPropertyRoadHeightAdjustmentTypesMemberType
    Road = 1  # LmsSolverPropertyRoadHeightAdjustmentTypesMemberType
    Vehicle = 2  # LmsSolverPropertyRoadHeightAdjustmentTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LmsSolverProperty(NXOpen.TaggedObject):
    """
    Represents a :py:class:`NXOpen.Motion.LmsSolverProperty`   
    
    .. versionadded:: NX10.0.0
    """
    
    class DynamicAccelerationMethods():
        """
        dynamic acceleration method 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Banded", " - "
           "Harwell", " - "
           "Iterative", " - "
        """
        Banded = 0  # LmsSolverPropertyDynamicAccelerationMethodsMemberType
        Harwell = 1  # LmsSolverPropertyDynamicAccelerationMethodsMemberType
        Iterative = 2  # LmsSolverPropertyDynamicAccelerationMethodsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DynamicInitialVelocityMethods():
        """
        dynamic initial velocity method 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Qr", " - "
           "MoorePenrosePseudoinverse", " - "
           "MinimumKineticEnergy", " - "
        """
        Qr = 0  # LmsSolverPropertyDynamicInitialVelocityMethodsMemberType
        MoorePenrosePseudoinverse = 1  # LmsSolverPropertyDynamicInitialVelocityMethodsMemberType
        MinimumKineticEnergy = 2  # LmsSolverPropertyDynamicInitialVelocityMethodsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class StaticJacobianTypes():
        """
        static jacobian type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Exact", " - "
           "Finite", " - "
        """
        Exact = 0  # LmsSolverPropertyStaticJacobianTypesMemberType
        Finite = 1  # LmsSolverPropertyStaticJacobianTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class RoadHeightAdjustmentTypes():
        """
        road height adjustment type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", " - "
           "Road", " - "
           "Vehicle", " - "
        """
        NotSet = 0  # LmsSolverPropertyRoadHeightAdjustmentTypesMemberType
        Road = 1  # LmsSolverPropertyRoadHeightAdjustmentTypesMemberType
        Vehicle = 2  # LmsSolverPropertyRoadHeightAdjustmentTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AssemblyTolerance: NXOpen.Expression = ...
    """
    Returns  the assembly tolerance 
    
    <hr>
    
    Getter Method
    
    Signature ``AssemblyTolerance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    DoubleArraySize: int = ...
    """
    Returns or sets  the double array size 
    
    <hr>
    
    Getter Method
    
    Signature ``DoubleArraySize`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DoubleArraySize`` 
    
    :param doubleArraySize: 
    :type doubleArraySize: int 
    
    .. versionadded:: NX10.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    DynamicInitialVelocityMethod: int = ...
    """
    Returns or sets  the dynamic initial velocity method 
    
    <hr>
    
    Getter Method
    
    Signature ``DynamicInitialVelocityMethod`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DynamicInitialVelocityMethod`` 
    
    :param dynamicInitialVelocityMethod: 
    :type dynamicInitialVelocityMethod: int 
    
    .. versionadded:: NX10.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    DynamicIntegrationTolerance: NXOpen.Expression = ...
    """
    Returns  the dynamic integration tolerance 
    
    <hr>
    
    Getter Method
    
    Signature ``DynamicIntegrationTolerance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    DynamicMaxIntegrationStep: NXOpen.Expression = ...
    """
    Returns  the dynamic max interation step 
    
    <hr>
    
    Getter Method
    
    Signature ``DynamicMaxIntegrationStep`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    DynamicSolutionTolerance: NXOpen.Expression = ...
    """
    Returns  the dynamic solution tolerance 
    
    <hr>
    
    Getter Method
    
    Signature ``DynamicSolutionTolerance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    DynamicSolverAccelerationMethod: int = ...
    """
    Returns or sets  the dynamic solver acceleration method 
    
    <hr>
    
    Getter Method
    
    Signature ``DynamicSolverAccelerationMethod`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DynamicSolverAccelerationMethod`` 
    
    :param dynamicSolverAccelerationMethod: 
    :type dynamicSolverAccelerationMethod: int 
    
    .. versionadded:: NX10.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    IntArraySize: int = ...
    """
    Returns or sets  the integer array size 
    
    <hr>
    
    Getter Method
    
    Signature ``IntArraySize`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IntArraySize`` 
    
    :param intArraySize: 
    :type intArraySize: int 
    
    .. versionadded:: NX10.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    KinematicSolutionTolerance: NXOpen.Expression = ...
    """
    Returns  the kinematic solution tolerance 
    
    <hr>
    
    Getter Method
    
    Signature ``KinematicSolutionTolerance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    LuTolerance: NXOpen.Expression = ...
    """
    Returns  the lu tolerance 
    
    <hr>
    
    Getter Method
    
    Signature ``LuTolerance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    RoadHeightAdjustment: LmsSolverPropertyRoadHeightAdjustmentTypes = ...
    """
    Returns or sets  the road height adjustment 
    
    <hr>
    
    Getter Method
    
    Signature ``RoadHeightAdjustment`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.LmsSolverPropertyRoadHeightAdjustmentTypes` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RoadHeightAdjustment`` 
    
    :param roadHeightAdjustment: 
    :type roadHeightAdjustment: :py:class:`NXOpen.Motion.LmsSolverPropertyRoadHeightAdjustmentTypes` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    StaticForceTolerance: NXOpen.Expression = ...
    """
    Returns  the static force tolerance 
    
    <hr>
    
    Getter Method
    
    Signature ``StaticForceTolerance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    StaticJacobianType: int = ...
    """
    Returns or sets  the static jacobian type 
    
    <hr>
    
    Getter Method
    
    Signature ``StaticJacobianType`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StaticJacobianType`` 
    
    :param staticJacobianType: 
    :type staticJacobianType: int 
    
    .. versionadded:: NX10.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    StaticQuasiIteration: int = ...
    """
    Returns or sets  the static quasi iteration 
    
    <hr>
    
    Getter Method
    
    Signature ``StaticQuasiIteration`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StaticQuasiIteration`` 
    
    :param staticQuasiIteration: 
    :type staticQuasiIteration: int 
    
    .. versionadded:: NX10.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    StaticSolutionTolerance: NXOpen.Expression = ...
    """
    Returns  the static solution tolerance 
    
    <hr>
    
    Getter Method
    
    Signature ``StaticSolutionTolerance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    StaticStepSize: NXOpen.Expression = ...
    """
    Returns  the static step size 
    
    <hr>
    
    Getter Method
    
    Signature ``StaticStepSize`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Null: LmsSolverProperty = ...  # unknown typename


class PortVariableCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of ports used to expose results on Mechatronics port variables   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Motion.Mechatronics`
    
    .. versionadded:: NX11.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def FindObject(self, name: str) -> ControlPort:
        """
        Finds the :py:class:`Motion.ControlPort` variable with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name: 
        :type name: str 
        :returns: 
        :rtype: :py:class:`NXOpen.Motion.ControlPort` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    


class SpringCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of motion spring   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Motion.MotionManager`
    
    .. versionadded:: NX6.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateSpringBuilder(self, spring: Spring) -> SpringBuilder:
        """
        Return  :py:class:`NXOpen.Motion.SpringBuilder` object   
        
        Signature ``CreateSpringBuilder(spring)`` 
        
        :param spring:  :py:class:`NXOpen.Motion.Spring` to be edited,                                                                               if None then create a new one  
        :type spring: :py:class:`NXOpen.Motion.Spring` 
        :returns:  SpringBuilder object  
        :rtype: :py:class:`NXOpen.Motion.SpringBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def FindObject(self, name: str) -> Spring:
        """
        Finds the :py:class:`NXOpen.Motion.Spring` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name: 
        :type name: str 
        :returns: 
        :rtype: :py:class:`NXOpen.Motion.Spring` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    


class TirePropertyTnoCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Motion Tno Tire Property elements   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Motion.MotionManager`
    
    .. versionadded:: NX11.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateTirePropertyTnoBuilder(self, tireProperty: TirePropertyTno) -> TirePropertyTnoBuilder:
        """
        Return  :py:class:`NXOpen.Motion.TirePropertyTnoBuilder` object   
        
        Signature ``CreateTirePropertyTnoBuilder(tireProperty)`` 
        
        :param tireProperty:  :py:class:`NXOpen.Motion.TirePropertyTno`                                                                                                                to be edited, if None then create a new one  
        :type tireProperty: :py:class:`NXOpen.Motion.TirePropertyTno` 
        :returns:  TirePropertyTnoBuilder object  
        :rtype: :py:class:`NXOpen.Motion.TirePropertyTnoBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def FindObject(self, name: str) -> TirePropertyTno:
        """
        Finds the :py:class:`NXOpen.Motion.TirePropertyTno` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Motion.TirePropertyTno`  
        :type name: str 
        :returns:  :py:class:`NXOpen.Motion.TirePropertyTno` with this name  
        :rtype: :py:class:`NXOpen.Motion.TirePropertyTno` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    


class DriverOperationTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DriverOperationType():
    """
    Driver operation type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Undefined", "Undefined"
       "Constant", "Constant; Deprecated in NX11.0; use type_polynomial instead"
       "Polynomial", "Polynomial"
       "Harmonic", "Harmonic"
       "Function", "Function"
       "Articulation", "Articulation"
       "Motor", "Motor"
       "Control", "Control"
       "Profile", "Profile"
    """
    Undefined = 0  # DriverOperationTypeMemberType
    Constant = 1  # DriverOperationTypeMemberType
    Polynomial = 1  # DriverOperationTypeMemberType
    Harmonic = 2  # DriverOperationTypeMemberType
    Function = 3  # DriverOperationTypeMemberType
    Articulation = 4  # DriverOperationTypeMemberType
    Motor = 5  # DriverOperationTypeMemberType
    Control = 6  # DriverOperationTypeMemberType
    Profile = 7  # DriverOperationTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DriverOperationIntegrationTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DriverOperationIntegrationType():
    """
    Integration type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Displacement", "Displacement"
       "Velocity", "Velocity"
       "Acceleration", "Acceleration"
    """
    Displacement = 0  # DriverOperationIntegrationTypeMemberType
    Velocity = 1  # DriverOperationIntegrationTypeMemberType
    Acceleration = 2  # DriverOperationIntegrationTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DriverOperation(NXOpen.TaggedObject):
    """
    Represents a :py:class:`NXOpen.Motion.DriverOperation`   
    
    .. versionadded:: NX5.0.0
    """
    
    class Type():
        """
        Driver operation type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Undefined", "Undefined"
           "Constant", "Constant; Deprecated in NX11.0; use type_polynomial instead"
           "Polynomial", "Polynomial"
           "Harmonic", "Harmonic"
           "Function", "Function"
           "Articulation", "Articulation"
           "Motor", "Motor"
           "Control", "Control"
           "Profile", "Profile"
        """
        Undefined = 0  # DriverOperationTypeMemberType
        Constant = 1  # DriverOperationTypeMemberType
        Polynomial = 1  # DriverOperationTypeMemberType
        Harmonic = 2  # DriverOperationTypeMemberType
        Function = 3  # DriverOperationTypeMemberType
        Articulation = 4  # DriverOperationTypeMemberType
        Motor = 5  # DriverOperationTypeMemberType
        Control = 6  # DriverOperationTypeMemberType
        Profile = 7  # DriverOperationTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class IntegrationType():
        """
        Integration type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Displacement", "Displacement"
           "Velocity", "Velocity"
           "Acceleration", "Acceleration"
        """
        Displacement = 0  # DriverOperationIntegrationTypeMemberType
        Velocity = 1  # DriverOperationIntegrationTypeMemberType
        Acceleration = 2  # DriverOperationIntegrationTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AccelerationExpression: NXOpen.Expression = ...
    """
    Returns  the acceleration expression 
    
    <hr>
    
    Getter Method
    
    Signature ``AccelerationExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    AmplitudeExpression: NXOpen.Expression = ...
    """
    Returns  the amplitude expression 
    
    <hr>
    
    Getter Method
    
    Signature ``AmplitudeExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ControlPort: SelectControlPort = ...
    """
    Returns  the control port
    
    <hr>
    
    Getter Method
    
    Signature ``ControlPort`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectControlPort` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    DisplacementExpression: NXOpen.Expression = ...
    """
    Returns  the displacement expression 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplacementExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    FrequencyExpression: NXOpen.Expression = ...
    """
    Returns  the frequency expression
    
    <hr>
    
    Getter Method
    
    Signature ``FrequencyExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Function: NXOpen.NXObject = ...
    """
    Returns or sets  the function  
    
    <hr>
    
    Getter Method
    
    Signature ``Function`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Function`` 
    
    :param function: 
    :type function: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    HarmonicDisplacementExpression: NXOpen.Expression = ...
    """
    Returns  the harmonic displacement expression 
    
    <hr>
    
    Getter Method
    
    Signature ``HarmonicDisplacementExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    InitialDisplacementExpression: NXOpen.Expression = ...
    """
    Returns  the initial displacement expression
    
    <hr>
    
    Getter Method
    
    Signature ``InitialDisplacementExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    InitialVelocityExpression: NXOpen.Expression = ...
    """
    Returns  the initial velocity expression
    
    <hr>
    
    Getter Method
    
    Signature ``InitialVelocityExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    IntegrationTypeOption: DriverOperationIntegrationType = ...
    """
    Returns or sets  the integration type option 
    
    <hr>
    
    Getter Method
    
    Signature ``IntegrationTypeOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.DriverOperationIntegrationType` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IntegrationTypeOption`` 
    
    :param integrationTypeOption: 
    :type integrationTypeOption: :py:class:`NXOpen.Motion.DriverOperationIntegrationType` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    JerkExpression: NXOpen.Expression = ...
    """
    Returns  the jerk expression 
    
    <hr>
    
    Getter Method
    
    Signature ``JerkExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    Motor: PMDCMotor = ...
    """
    Returns or sets  the motor  
    
    <hr>
    
    Getter Method
    
    Signature ``Motor`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.PMDCMotor` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Motor`` 
    
    :param motor: 
    :type motor: :py:class:`NXOpen.Motion.PMDCMotor` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    PhaseAngleExpression: NXOpen.Expression = ...
    """
    Returns  the phase angle expression
    
    <hr>
    
    Getter Method
    
    Signature ``PhaseAngleExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Profile: NXOpen.SelectNXObject = ...
    """
    Returns  the profile
    
    <hr>
    
    Getter Method
    
    Signature ``Profile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX11.0.1
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SignalChart: SignalChart = ...
    """
    Returns or sets  the signal chart  
    
    <hr>
    
    Getter Method
    
    Signature ``SignalChart`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SignalChart` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SignalChart`` 
    
    :param signalChart: 
    :type signalChart: :py:class:`NXOpen.Motion.SignalChart` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    TypeOption: DriverOperationType = ...
    """
    Returns or sets  the type option 
    
    <hr>
    
    Getter Method
    
    Signature ``TypeOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.DriverOperationType` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TypeOption`` 
    
    :param typeOption: 
    :type typeOption: :py:class:`NXOpen.Motion.DriverOperationType` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    VelocityExpression: NXOpen.Expression = ...
    """
    Returns  the velocity expression
    
    <hr>
    
    Getter Method
    
    Signature ``VelocityExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: DriverOperation = ...  # unknown typename


class ConfigurationFloatParameter(ConfigurationParameter):
    """
    Represents a :py:class:`Motion.ConfigurationFloatParameter`.  
    
    This class
    contains the port association for the output of a mechatronics element 
    No KF support
    
    .. versionadded:: NX11.0.0
    """
    ActualValue: NXOpen.Expression = ...
    """
    Returns  the actual value 
    
    <hr>
    
    Getter Method
    
    Signature ``ActualValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    InitialValue: NXOpen.Expression = ...
    """
    Returns  the initial value 
    
    <hr>
    
    Getter Method
    
    Signature ``InitialValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: ConfigurationFloatParameter = ...  # unknown typename


class BodyContactLmsCoulombFrictionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BodyContactLmsCoulombFriction():
    """
    the enum for friction option of 3D contact 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Off", " - "
       "On", " - "
    """
    Off = 0  # BodyContactLmsCoulombFrictionMemberType
    On = 1  # BodyContactLmsCoulombFrictionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BodyContactLmsForceModelTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BodyContactLmsForceModelType():
    """
    the enum for force model of 3D contact 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Auto", " - "
       "ProjectedVertex", " - "
       "Midplane", " - "
    """
    Auto = 0  # BodyContactLmsForceModelTypeMemberType
    ProjectedVertex = 1  # BodyContactLmsForceModelTypeMemberType
    Midplane = 2  # BodyContactLmsForceModelTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BodyContactLms(NXOpen.NXObject):
    """
    Represents a :py:class:`NXOpen.Motion.BodyContactLms`   
    
    .. versionadded:: NX10.0.0
    """
    
    class CoulombFriction():
        """
        the enum for friction option of 3D contact 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Off", " - "
           "On", " - "
        """
        Off = 0  # BodyContactLmsCoulombFrictionMemberType
        On = 1  # BodyContactLmsCoulombFrictionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ForceModelType():
        """
        the enum for force model of 3D contact 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Auto", " - "
           "ProjectedVertex", " - "
           "Midplane", " - "
        """
        Auto = 0  # BodyContactLmsForceModelTypeMemberType
        ProjectedVertex = 1  # BodyContactLmsForceModelTypeMemberType
        Midplane = 2  # BodyContactLmsForceModelTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    ActionAngleTolerance: NXOpen.Expression = ...
    """
    Returns  the action angle tolerance 
    
    <hr>
    
    Getter Method
    
    Signature ``ActionAngleTolerance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    ActionDistanceTolerance: NXOpen.Expression = ...
    """
    Returns  the action distance tolerance 
    
    <hr>
    
    Getter Method
    
    Signature ``ActionDistanceTolerance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    ActionEnableMaxFacetSize: bool = ...
    """
    Returns or sets  the action enable max facet size 
    
    <hr>
    
    Getter Method
    
    Signature ``ActionEnableMaxFacetSize`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ActionEnableMaxFacetSize`` 
    
    :param actionEnableMaxFacetSize: 
    :type actionEnableMaxFacetSize: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ActionMaxFacetSize: NXOpen.Expression = ...
    """
    Returns  the action max facet size 
    
    <hr>
    
    Getter Method
    
    Signature ``ActionMaxFacetSize`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    ActionTessellationFile: str = ...
    """
    Returns or sets  the action tessellation  file
    
    <hr>
    
    Getter Method
    
    Signature ``ActionTessellationFile`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``ActionTessellationFile`` 
    
    :param fileName: 
    :type fileName: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ActionUseTessellationFile: bool = ...
    """
    Returns or sets  the action tessellation file option
    
    <hr>
    
    Getter Method
    
    Signature ``ActionUseTessellationFile`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``ActionUseTessellationFile`` 
    
    :param fileOption: 
    :type fileOption: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    BaseAngleTolerance: NXOpen.Expression = ...
    """
    Returns  the base angle tolerance 
    
    <hr>
    
    Getter Method
    
    Signature ``BaseAngleTolerance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    BaseDistanceTolerance: NXOpen.Expression = ...
    """
    Returns  the base distance tolerance 
    
    <hr>
    
    Getter Method
    
    Signature ``BaseDistanceTolerance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    BaseEnableMaxFacetSize: bool = ...
    """
    Returns or sets  the base enable max facet size 
    
    <hr>
    
    Getter Method
    
    Signature ``BaseEnableMaxFacetSize`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BaseEnableMaxFacetSize`` 
    
    :param baseEnableMaxFacetSize: 
    :type baseEnableMaxFacetSize: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    BaseMaxFacetSize: NXOpen.Expression = ...
    """
    Returns  the base max facet size 
    
    <hr>
    
    Getter Method
    
    Signature ``BaseMaxFacetSize`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    BaseTessellationFile: str = ...
    """
    Returns or sets  the base tessellation  file
    
    <hr>
    
    Getter Method
    
    Signature ``BaseTessellationFile`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``BaseTessellationFile`` 
    
    :param fileName: 
    :type fileName: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    BaseUseTessellationFile: bool = ...
    """
    Returns or sets  the base tessellation file option
    
    <hr>
    
    Getter Method
    
    Signature ``BaseUseTessellationFile`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``BaseUseTessellationFile`` 
    
    :param fileOption: 
    :type fileOption: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    CoulombFrictionOption: BodyContactLmsCoulombFriction = ...
    """
    Returns or sets  the coulomb friction option 
    
    <hr>
    
    Getter Method
    
    Signature ``CoulombFrictionOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.BodyContactLmsCoulombFriction` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CoulombFrictionOption`` 
    
    :param coulombFrictionOption: 
    :type coulombFrictionOption: :py:class:`NXOpen.Motion.BodyContactLmsCoulombFriction` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    DynamicCoefficient: NXOpen.Expression = ...
    """
    Returns  the dynamic coefficient 
    
    <hr>
    
    Getter Method
    
    Signature ``DynamicCoefficient`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    ForceExponent: NXOpen.Expression = ...
    """
    Returns  the force exponent 
    
    <hr>
    
    Getter Method
    
    Signature ``ForceExponent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    ForceModel: BodyContactLmsForceModelType = ...
    """
    Returns or sets  the force model 
    
    <hr>
    
    Getter Method
    
    Signature ``ForceModel`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.BodyContactLmsForceModelType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ForceModel`` 
    
    :param model: 
    :type model: :py:class:`NXOpen.Motion.BodyContactLmsForceModelType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    ForceModelTolerance: NXOpen.Expression = ...
    """
    Returns  the force model tolerance 
    
    <hr>
    
    Getter Method
    
    Signature ``ForceModelTolerance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    FrictionVelocity: NXOpen.Expression = ...
    """
    Returns  the friction velocity 
    
    <hr>
    
    Getter Method
    
    Signature ``FrictionVelocity`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    MaterialDamping: NXOpen.Expression = ...
    """
    Returns  the material damping 
    
    <hr>
    
    Getter Method
    
    Signature ``MaterialDamping`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    MaxPenetrationDepth: NXOpen.Expression = ...
    """
    Returns  the max penetration depth 
    
    <hr>
    
    Getter Method
    
    Signature ``MaxPenetrationDepth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    StaticCoefficient: NXOpen.Expression = ...
    """
    Returns  the static coefficient 
    
    <hr>
    
    Getter Method
    
    Signature ``StaticCoefficient`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    StictionVelocity: NXOpen.Expression = ...
    """
    Returns  the stiction velocity 
    
    <hr>
    
    Getter Method
    
    Signature ``StictionVelocity`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Stiffness: NXOpen.Expression = ...
    """
    Returns  the stiffness 
    
    <hr>
    
    Getter Method
    
    Signature ``Stiffness`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Null: BodyContactLms = ...  # unknown typename


class ConfigurationParameterList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[ConfigurationParameter]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.Motion.ConfigurationParameter` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: ConfigurationParameter) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.Motion.ConfigurationParameter` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: ConfigurationParameter) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.Motion.ConfigurationParameter` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> ConfigurationParameter:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.Motion.ConfigurationParameter` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: ConfigurationParameter) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Motion.ConfigurationParameter` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: ConfigurationParameter, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Motion.ConfigurationParameter` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[ConfigurationParameter]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.Motion.ConfigurationParameter` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[ConfigurationParameter]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.Motion.ConfigurationParameter` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: ConfigurationParameter, object2: ConfigurationParameter) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.Motion.ConfigurationParameter` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.Motion.ConfigurationParameter` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: ConfigurationParameter) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.Motion.ConfigurationParameter` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: ConfigurationParameterList = ...  # unknown typename


class MotionSensorCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of sensor objects   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Motion.MotionManager`
    
    .. versionadded:: NX6.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateMotionSensorBuilder(self, sensor: MotionSensor) -> MotionSensorBuilder:
        """
        Creates a :py:class:`NXOpen.Motion.MotionSensorBuilder`  
        
        Signature ``CreateMotionSensorBuilder(sensor)`` 
        
        :param sensor: 
        :type sensor: :py:class:`NXOpen.Motion.MotionSensor` 
        :returns: 
        :rtype: :py:class:`NXOpen.Motion.MotionSensorBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def FindObject(self, name: str) -> MotionSensor:
        """
        Finds the :py:class:`NXOpen.Motion.MotionSensor` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Motion.MotionSensor`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Motion.MotionSensor` with this name.  
        :rtype: :py:class:`NXOpen.Motion.MotionSensor` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    


class ExpressionFunctionBuilderTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ExpressionFunctionBuilderType():
    """
    The block type can be Expression when a constant expression is used or Function when a spline curve is used or
    Profile when a profile is used.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Expression", " - "
       "Function", " - "
       "Profile", " - "
    """
    Expression = 0  # ExpressionFunctionBuilderTypeMemberType
    Function = 1  # ExpressionFunctionBuilderTypeMemberType
    Profile = 2  # ExpressionFunctionBuilderTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ExpressionFunctionBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a ExpressionFunctionBuilder builder   
    
    .. versionadded:: NX11.0.0
    """
    
    class Type():
        """
        The block type can be Expression when a constant expression is used or Function when a spline curve is used or
        Profile when a profile is used.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Expression", " - "
           "Function", " - "
           "Profile", " - "
        """
        Expression = 0  # ExpressionFunctionBuilderTypeMemberType
        Function = 1  # ExpressionFunctionBuilderTypeMemberType
        Profile = 2  # ExpressionFunctionBuilderTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    DataType: ExpressionFunctionBuilderType = ...
    """
    Returns or sets  the type.  
    
    <hr>
    
    Getter Method
    
    Signature ``DataType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.ExpressionFunctionBuilderType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``DataType`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Motion.ExpressionFunctionBuilderType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Expression: NXOpen.Expression = ...
    """
    Returns  the Expression of this block
    
    <hr>
    
    Getter Method
    
    Signature ``Expression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Function: MotionFunction = ...
    """
    Returns or sets  the Function.  
    
    <hr>
    
    Getter Method
    
    Signature ``Function`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.MotionFunction` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Function`` 
    
    :param func: 
    :type func: :py:class:`NXOpen.Motion.MotionFunction` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Profile: SelectFieldData = ...
    """
    Returns  the Profile.  
    
    <hr>
    
    Getter Method
    
    Signature ``Profile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectFieldData` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: ExpressionFunctionBuilder = ...  # unknown typename


class IPostControl():
    """
    Represents an interface IPostControl   
    
    .. versionadded:: NX11.0.0
    """
    Null = ...  # unknown typename: InterfaceIdentifier


class AddSubmechanismBuilderLayerMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AddSubmechanismBuilderLayer():
    """
    Represents initial location type that can be present during add component 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Original", "the original layer"
       "Work", "the work laye"
       "Specified", "custom specified layer"
    """
    Original = 0  # AddSubmechanismBuilderLayerMemberType
    Work = 1  # AddSubmechanismBuilderLayerMemberType
    Specified = 2  # AddSubmechanismBuilderLayerMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AddSubmechanismBuilder(NXOpen.Builder, NXOpen.IAttributeSourceObjectBuilder):
    """
    Represents a builder class that performs add submechanism in current context.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.MotionSimulation.CreateAddSubmechanismBuilder`
    
    Default values.
    
    ============  =========
    Property      Value
    ============  =========
    LayerOption   Original 
    ------------  ---------
    UserLayer     1 
    ============  =========
    
    .. versionadded:: NX12.0.0
    """
    
    class Layer():
        """
        Represents initial location type that can be present during add component 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Original", "the original layer"
           "Work", "the work laye"
           "Specified", "custom specified layer"
        """
        Original = 0  # AddSubmechanismBuilderLayerMemberType
        Work = 1  # AddSubmechanismBuilderLayerMemberType
        Specified = 2  # AddSubmechanismBuilderLayerMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def AutoAssignAttributes(self, objects: 'list[NXOpen.NXObject]') -> NXOpen.ErrorList:
        """
        Auto assigns the attributes for a given array of objects and returns an array of objects that failed to auto assign.  
        
        Signature ``AutoAssignAttributes(objects)`` 
        
        :param objects: 
        :type objects: list of :py:class:`NXOpen.NXObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.ErrorList` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def AutoAssignAttributesWithNamingPattern(self, objects: 'list[NXOpen.NXObject]', properties: 'list[NXOpen.NXObject]') -> NXOpen.ErrorList:
        """
        Auto assigns the attributes for a given object and returns an array of objects that failed to auto assign.  
        
        properties needs to be created using :py:meth:`CreateAttributeTitleToNamingPatternMap`
        
        Signature ``AutoAssignAttributesWithNamingPattern(objects, properties)`` 
        
        :param objects: 
        :type objects: list of :py:class:`NXOpen.NXObject` 
        :param properties: 
        :type properties: list of :py:class:`NXOpen.NXObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.ErrorList` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateAttributeTitleToNamingPatternMap(self, attributeTitles: 'list[str]', titlePatterns: 'list[str]') -> NXOpen.NXObject:
        """
        Creates a map object of attribute titles to their corresponding naming pattern  
        
        Signature ``CreateAttributeTitleToNamingPatternMap(attributeTitles, titlePatterns)`` 
        
        :param attributeTitles: 
        :type attributeTitles: list of str 
        :param titlePatterns: 
        :type titlePatterns: list of str 
        :returns: 
        :rtype: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    LayerOption: AddSubmechanismBuilderLayer = ...
    """
    Returns or sets  the layers to which geometry are added 
    
    <hr>
    
    Getter Method
    
    Signature ``LayerOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.AddSubmechanismBuilderLayer` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LayerOption`` 
    
    :param layerOption: 
    :type layerOption: :py:class:`NXOpen.Motion.AddSubmechanismBuilderLayer` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SelectedPart: NXOpen.NXObject = ...
    """
    Returns or sets  the Motion Simulation part to add as sumbechanism 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectedPart`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectedPart`` 
    
    :param part: 
    :type part: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    UserLayer: int = ...
    """
    Returns or sets  the user defined layer (should be a value in the range 1-256) 
    
    <hr>
    
    Getter Method
    
    Signature ``UserLayer`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UserLayer`` 
    
    :param layer: 
    :type layer: int 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: AddSubmechanismBuilder = ...  # unknown typename


class CurveOnCurveCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of curve on curve objects   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Motion.MotionManager`
    
    .. versionadded:: NX6.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateCurveOnCurveBuilder(self, curveOnCurve: CurveOnCurve) -> CurveOnCurveBuilder:
        """
        Creates a :py:class:`NXOpen.Motion.CurveOnCurveBuilder`  
        
        Signature ``CreateCurveOnCurveBuilder(curveOnCurve)`` 
        
        :param curveOnCurve:  :py:class:`NXOpen.Motion.CurveOnCurve` to be edited, if None then create a new one  
        :type curveOnCurve: :py:class:`NXOpen.Motion.CurveOnCurve` 
        :returns: 
        :rtype: :py:class:`NXOpen.Motion.CurveOnCurveBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def FindObject(self, name: str) -> CurveOnCurve:
        """
        Finds the :py:class:`NXOpen.Motion.CurveOnCurve` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Motion.CurveOnCurve`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Motion.CurveOnCurve` with this name.  
        :rtype: :py:class:`NXOpen.Motion.CurveOnCurve` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    


class PostControl(NXOpen.NXObject, IPostControl):
    """
    Represent abstract class Motion.  
    
    PostControl
    This is an abstract class, and cannot be instantiated.
    
    .. versionadded:: NX11.0.0
    """
    Null: PostControl = ...  # unknown typename


class AnimationControl(PostControl):
    """
    Represents the :py:class:`NXOpen.Motion.AnimationControl`   
    
    An instance of this class can not be obtained
    
    .. versionadded:: NX9.0.0
    """
    
    def Play(self) -> None:
        """
        Animation play.  
        
        This method adds event loop that plays forward step by step and return. 
        It does not wait finishing the play process. 
        For the case there is no UI to control the play and stop action, call 
        :py:meth:`Motion.AnimationControl.StepForward` 
        in a cycle to play animation  
        
        Signature ``Play()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def PlayBackward(self) -> None:
        """
        Animation play backward.  
        
        This method adds event loop that plays backward step by step and return. 
        It does not wait finishing the play process. 
        For the case there is no UI to control the play and stop action, call 
        :py:meth:`Motion.AnimationControl.StepBackward` 
        in a cycle to play animation backward 
        
        Signature ``PlayBackward()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def Pause(self) -> None:
        """
        Animation pause 
        
        Signature ``Pause()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def Stop(self) -> None:
        """
        Animation stop 
        
        Signature ``Stop()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def StepTo(self, step: int) -> None:
        """
        Animation step to a special step 
        
        Signature ``StepTo(step)`` 
        
        :param step:  Special step  
        :type step: int 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def StepForward(self) -> None:
        """
        Animation step forward 
        
        Signature ``StepForward()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def StepBackward(self) -> None:
        """
        Animation step backward 
        
        Signature ``StepBackward()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def StepFirst(self) -> None:
        """
        Animation step to first step 
        
        Signature ``StepFirst()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def StepLast(self) -> None:
        """
        Animation step to last step 
        
        Signature ``StepLast()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def StepToDesignPosition(self) -> None:
        """
        Animation step to design position 
        
        Signature ``StepToDesignPosition()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def StepToAssemblyPosition(self) -> None:
        """
        Animation step to assembly position 
        
        Signature ``StepToAssemblyPosition()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def Finish(self) -> None:
        """
        Finish animation 
        
        Signature ``Finish()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def GetLinkTransformatioinMatrix(self, linkTag: Link, currentStep: int) -> float:
        """
        Get animation link transformation matrix  
        
        Signature ``GetLinkTransformatioinMatrix(linkTag, currentStep)`` 
        
        :param linkTag:  The special link object  
        :type linkTag: :py:class:`NXOpen.Motion.Link` 
        :param currentStep:  The current step index  
        :type currentStep: int 
        :returns:  The link transformation matrix within current step  
        :rtype: float 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    CurrentStep: int = ...
    """
    Returns  the current animation step 
    
    <hr>
    
    Getter Method
    
    Signature ``CurrentStep`` 
    
    :returns:  The current step  
    :rtype: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Delay: int = ...
    """
    Returns or sets  the animation delay 
    
    <hr>
    
    Getter Method
    
    Signature ``Delay`` 
    
    :returns:  The delay  
    :rtype: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Delay`` 
    
    :param delay: 
    :type delay: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Mode: PlayMode = ...
    """
    Returns or sets  the animation mode 
    
    <hr>
    
    Getter Method
    
    Signature ``Mode`` 
    
    :returns:  The animation play mode  
    :rtype: :py:class:`NXOpen.Motion.PlayMode` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Mode`` 
    
    :param mode: 
    :type mode: :py:class:`NXOpen.Motion.PlayMode` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    NumberSteps: int = ...
    """
    Returns  the number of animation steps 
    
    <hr>
    
    Getter Method
    
    Signature ``NumberSteps`` 
    
    :returns:  The total number of steps  
    :rtype: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: AnimationControl = ...  # unknown typename


class DriverMotionsDataDriverRotationTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DriverMotionsDataDriverRotationType():
    """
    Driver Rotation type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Successive", "Rotations are applied to the rotated link (as defined by previous rotations)"
       "Fixed", "Rotations are applied to the original position of the link"
    """
    Successive = 0  # DriverMotionsDataDriverRotationTypeMemberType
    Fixed = 1  # DriverMotionsDataDriverRotationTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DriverMotionsDataDriverDataTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DriverMotionsDataDriverDataType():
    """
    Driver Data Type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Displacement", "Displacement"
       "Velocity", "Velocity"
       "Acceleration", "Acceleration"
    """
    Displacement = 0  # DriverMotionsDataDriverDataTypeMemberType
    Velocity = 1  # DriverMotionsDataDriverDataTypeMemberType
    Acceleration = 2  # DriverMotionsDataDriverDataTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DriverMotionsData(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Motion.DriverMotionsData`   
    
    .. versionadded:: NX11.0.0
    """
    
    class DriverRotationType():
        """
        Driver Rotation type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Successive", "Rotations are applied to the rotated link (as defined by previous rotations)"
           "Fixed", "Rotations are applied to the original position of the link"
        """
        Successive = 0  # DriverMotionsDataDriverRotationTypeMemberType
        Fixed = 1  # DriverMotionsDataDriverRotationTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DriverDataType():
        """
        Driver Data Type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Displacement", "Displacement"
           "Velocity", "Velocity"
           "Acceleration", "Acceleration"
        """
        Displacement = 0  # DriverMotionsDataDriverDataTypeMemberType
        Velocity = 1  # DriverMotionsDataDriverDataTypeMemberType
        Acceleration = 2  # DriverMotionsDataDriverDataTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    DataType: DriverMotionsDataDriverDataType = ...
    """
    Returns or sets  the driver data type
    
    <hr>
    
    Getter Method
    
    Signature ``DataType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.DriverMotionsDataDriverDataType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``DataType`` 
    
    :param dataType: 
    :type dataType: :py:class:`NXOpen.Motion.DriverMotionsDataDriverDataType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    RotationType: DriverMotionsDataDriverRotationType = ...
    """
    Returns or sets  the type of the rotations applied on the link 
    
    <hr>
    
    Getter Method
    
    Signature ``RotationType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.DriverMotionsDataDriverRotationType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``RotationType`` 
    
    :param rotationType: 
    :type rotationType: :py:class:`NXOpen.Motion.DriverMotionsDataDriverRotationType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    RotationX: DriverOperation = ...
    """
    Returns  the rotation around the x axis 
    
    <hr>
    
    Getter Method
    
    Signature ``RotationX`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.DriverOperation` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    RotationY: DriverOperation = ...
    """
    Returns  the rotation around the y axis 
    
    <hr>
    
    Getter Method
    
    Signature ``RotationY`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.DriverOperation` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    RotationZ: DriverOperation = ...
    """
    Returns  the rotation around the z axis 
    
    <hr>
    
    Getter Method
    
    Signature ``RotationZ`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.DriverOperation` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    TranslationX: DriverOperation = ...
    """
    Returns  the translation on the x axis 
    
    <hr>
    
    Getter Method
    
    Signature ``TranslationX`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.DriverOperation` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    TranslationY: DriverOperation = ...
    """
    Returns  the translation on the y axis 
    
    <hr>
    
    Getter Method
    
    Signature ``TranslationY`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.DriverOperation` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    TranslationZ: DriverOperation = ...
    """
    Returns  the translation on the z axis 
    
    <hr>
    
    Getter Method
    
    Signature ``TranslationZ`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.DriverOperation` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: DriverMotionsData = ...  # unknown typename


class CurveOnCurveBuilder(MotionBuilder):
    """
    Represents a :py:class:`NXOpen.Motion.CurveOnCurveBuilder`
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.CurveOnCurveCollection.CreateCurveOnCurveBuilder`
    
    .. versionadded:: NX6.0.0
    """
    
    def GetICurve(self) -> 'list[NXOpen.NXObject]':
        """
        Returns the first curves  
        
        Signature ``GetICurve()`` 
        
        :returns:  curve or edge 
        :rtype: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetICurve(self, curves: 'list[NXOpen.NXObject]') -> None:
        """
        Sets the first curves 
        
        Signature ``SetICurve(curves)`` 
        
        :param curves:  curve or edge 
        :type curves: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def GetJCurve(self) -> 'list[NXOpen.NXObject]':
        """
        Returns the second curves  
        
        Signature ``GetJCurve()`` 
        
        :returns:  curve or edge 
        :rtype: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetJCurve(self, curves: 'list[NXOpen.NXObject]') -> None:
        """
        Sets second curves 
        
        Signature ``SetJCurve(curves)`` 
        
        :param curves:  curve or edge 
        :type curves: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    LockSlip: bool = ...
    """
    Returns or sets  the lock slip flag 
    
    <hr>
    
    Getter Method
    
    Signature ``LockSlip`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LockSlip`` 
    
    :param lockSlip: 
    :type lockSlip: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Name: str = ...
    """
    Returns or sets  the name 
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: CurveOnCurveBuilder = ...  # unknown typename


class PackagingInterferenceBuilderActionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PackagingInterferenceBuilderAction():
    """
    Interference action type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Highlight", "Highlight interfering bodies."
       "CreateSolids", "Create solids of interference volumes."
       "ShowIntersectionCurve", "Show intersection curve of interference volumes"
    """
    Highlight = 0  # PackagingInterferenceBuilderActionMemberType
    CreateSolids = 1  # PackagingInterferenceBuilderActionMemberType
    ShowIntersectionCurve = 2  # PackagingInterferenceBuilderActionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PackagingInterferenceBuilderModeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PackagingInterferenceBuilderMode():
    """
    Interference calculation mode type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Faceted", "Interference calculated by Faceted method. Faceted is only allowed for action type of :py:class:` NXOpen.Motion.PackagingInterferenceBuilderAction.CreateSolids  < NXOpen.Motion.PackagingInterferenceBuilderAction>`."
       "PreciseSolid", "Interference calculated by Precise Solid method."
    """
    Faceted = 0  # PackagingInterferenceBuilderModeMemberType
    PreciseSolid = 1  # PackagingInterferenceBuilderModeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PackagingInterferenceBuilderFrameMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PackagingInterferenceBuilderFrame():
    """
    Interference solid reference frame type.  Only used for action type
    of :py:class:` NXOpen.Motion.PackagingInterferenceBuilderAction.CreateSolids  < NXOpen.Motion.PackagingInterferenceBuilderAction>`. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Absolute", "Interference solids positioned in absolute coordinate system."
       "FirstSet", "Interference solids positioned relative to interfering links in first set."
       "SecondSet", "Interference solids positioned relative to interfering links in second set."
       "BothSets", "Interference solids positioned relative to interfering links in both sets."
       "Selected", "Interference solids positioned relative to user selected links."
    """
    Absolute = 0  # PackagingInterferenceBuilderFrameMemberType
    FirstSet = 1  # PackagingInterferenceBuilderFrameMemberType
    SecondSet = 2  # PackagingInterferenceBuilderFrameMemberType
    BothSets = 3  # PackagingInterferenceBuilderFrameMemberType
    Selected = 4  # PackagingInterferenceBuilderFrameMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PackagingInterferenceBuilder(PackagingBuilder):
    """
    This the builder class to create or edit an Interference object.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.PackagingCollection.CreateInterferenceBuilder`
    
    .. versionadded:: NX4.0.0
    """
    
    class Action():
        """
        Interference action type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Highlight", "Highlight interfering bodies."
           "CreateSolids", "Create solids of interference volumes."
           "ShowIntersectionCurve", "Show intersection curve of interference volumes"
        """
        Highlight = 0  # PackagingInterferenceBuilderActionMemberType
        CreateSolids = 1  # PackagingInterferenceBuilderActionMemberType
        ShowIntersectionCurve = 2  # PackagingInterferenceBuilderActionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Mode():
        """
        Interference calculation mode type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Faceted", "Interference calculated by Faceted method. Faceted is only allowed for action type of :py:class:` NXOpen.Motion.PackagingInterferenceBuilderAction.CreateSolids  < NXOpen.Motion.PackagingInterferenceBuilderAction>`."
           "PreciseSolid", "Interference calculated by Precise Solid method."
        """
        Faceted = 0  # PackagingInterferenceBuilderModeMemberType
        PreciseSolid = 1  # PackagingInterferenceBuilderModeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Frame():
        """
        Interference solid reference frame type.  Only used for action type
        of :py:class:` NXOpen.Motion.PackagingInterferenceBuilderAction.CreateSolids  < NXOpen.Motion.PackagingInterferenceBuilderAction>`. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Absolute", "Interference solids positioned in absolute coordinate system."
           "FirstSet", "Interference solids positioned relative to interfering links in first set."
           "SecondSet", "Interference solids positioned relative to interfering links in second set."
           "BothSets", "Interference solids positioned relative to interfering links in both sets."
           "Selected", "Interference solids positioned relative to user selected links."
        """
        Absolute = 0  # PackagingInterferenceBuilderFrameMemberType
        FirstSet = 1  # PackagingInterferenceBuilderFrameMemberType
        SecondSet = 2  # PackagingInterferenceBuilderFrameMemberType
        BothSets = 3  # PackagingInterferenceBuilderFrameMemberType
        Selected = 4  # PackagingInterferenceBuilderFrameMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetList2(self) -> 'list[NXOpen.DisplayableObject]':
        """
        Gets the geometry list 2 of :py:class:`NXOpen.Motion.PackagingInterference` object.  
        
        Interference can have one or two lists defined.  If the user
        defines two lists, then interference checks will be done
        between each object in list 1 against each object in list 2.  
        
        Signature ``GetList2()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.DisplayableObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def SetList2(self, list2: 'list[NXOpen.DisplayableObject]') -> None:
        """
        Sets the geometry list 2 of :py:class:`NXOpen.Motion.PackagingInterference` object.  
        
        Signature ``SetList2(list2)`` 
        
        :param list2: 
        :type list2: list of :py:class:`NXOpen.DisplayableObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def GetRelativeLinks(self) -> 'list[NXOpen.DisplayableObject]':
        """
        Returns :py:class:`NXOpen.Motion.PackagingInterference` user selected relative links.  
        
        Only available when frame type is :py:class:` NXOpen.Motion.PackagingInterferenceBuilderFrame.Selected  < NXOpen.Motion.PackagingInterferenceBuilderFrame>`.  
        
        Signature ``GetRelativeLinks()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.DisplayableObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def SetRelativeLinks(self, links: 'list[NXOpen.DisplayableObject]') -> None:
        """
        Sets :py:class:`NXOpen.Motion.PackagingInterference` user selected relative links.  
        
        Only used when frame type is :py:class:` NXOpen.Motion.PackagingInterferenceBuilderFrame.Selected  < NXOpen.Motion.PackagingInterferenceBuilderFrame>`. 
        
        Signature ``SetRelativeLinks(links)`` 
        
        :param links: 
        :type links: list of :py:class:`NXOpen.DisplayableObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    ActionType: PackagingInterferenceBuilderAction = ...
    """
    Returns or sets  the :py:class:`NXOpen.Motion.PackagingInterference` action type defined
    at :py:class:`NXOpen.Motion.PackagingInterferenceBuilderAction` 
    
    <hr>
    
    Getter Method
    
    Signature ``ActionType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.PackagingInterferenceBuilderAction` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``ActionType`` 
    
    :param aType: 
    :type aType: :py:class:`NXOpen.Motion.PackagingInterferenceBuilderAction` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ClearanceExpression: NXOpen.Expression = ...
    """
    Returns  the clearance expression value 
    
    <hr>
    
    Getter Method
    
    Signature ``ClearanceExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    FrameType: PackagingInterferenceBuilderFrame = ...
    """
    Returns or sets  the :py:class:`NXOpen.Motion.PackagingInterference` frame type
    defined at :py:class:`NXOpen.Motion.PackagingInterferenceBuilderFrame` 
    
    <hr>
    
    Getter Method
    
    Signature ``FrameType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.PackagingInterferenceBuilderFrame` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``FrameType`` 
    
    :param fType: 
    :type fType: :py:class:`NXOpen.Motion.PackagingInterferenceBuilderFrame` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ModeType: PackagingInterferenceBuilderMode = ...
    """
    Returns or sets  the :py:class:`NXOpen.Motion.PackagingInterference` mode type defined
    at :py:class:`NXOpen.Motion.PackagingInterferenceBuilderMode` 
    
    <hr>
    
    Getter Method
    
    Signature ``ModeType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.PackagingInterferenceBuilderMode` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``ModeType`` 
    
    :param mType: 
    :type mType: :py:class:`NXOpen.Motion.PackagingInterferenceBuilderMode` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    StopOnEvent: bool = ...
    """
    Returns or sets  the Stop_On_Event flag of :py:class:`NXOpen.Motion.PackagingInterference` object 
    
    <hr>
    
    Getter Method
    
    Signature ``StopOnEvent`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``StopOnEvent`` 
    
    :param stopOnEvent: 
    :type stopOnEvent: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: PackagingInterferenceBuilder = ...  # unknown typename


class AnalyticalContactPropertyCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Analytical Contact Property objects   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Motion.MotionManager`
    
    .. versionadded:: NX12.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateAnalyticalContactPropertyBuilder(self, analyticalContactProperty: AnalyticalContactProperty) -> AnalyticalContactPropertyBuilder:
        """
        Creates a :py:class:`NXOpen.Motion.AnalyticalContactPropertyBuilder`  
        
        Signature ``CreateAnalyticalContactPropertyBuilder(analyticalContactProperty)`` 
        
        :param analyticalContactProperty: 
        :type analyticalContactProperty: :py:class:`NXOpen.Motion.AnalyticalContactProperty` 
        :returns: 
        :rtype: :py:class:`NXOpen.Motion.AnalyticalContactPropertyBuilder` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def FindObject(self, name: str) -> AnalyticalContactProperty:
        """
        Finds the :py:class:`NXOpen.Motion.AnalyticalContactProperty` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Motion.AnalyticalContactProperty`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Motion.AnalyticalContactProperty` with this name.  
        :rtype: :py:class:`NXOpen.Motion.AnalyticalContactProperty` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    


class Road(MotionObject):
    """
    Represents a road   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Motion.RoadBuilder`
    
    .. versionadded:: NX11.0.0
    """
    Segments: SegmentCollection = ...
    """
    Returns the :py:class:`Motion.SegmentCollection` belonging to this road element 
    
    Signature ``Segments`` 
    
    .. versionadded:: NX11.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SegmentCollection`
    """
    Null: Road = ...  # unknown typename


class MotionSensorBuilderComponentMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MotionSensorBuilderComponent():
    """
    component enumeration type
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "LinearMagnitude", "linear magnitude component"
       "X", "x component"
       "Y", "y component"
       "Z", "z component"
       "AngularMagnitude", "angular magnitude component"
       "Rx", "rx component"
       "Ry", "ry component"
       "Rz", "rz component"
    """
    LinearMagnitude = 0  # MotionSensorBuilderComponentMemberType
    X = 1  # MotionSensorBuilderComponentMemberType
    Y = 2  # MotionSensorBuilderComponentMemberType
    Z = 3  # MotionSensorBuilderComponentMemberType
    AngularMagnitude = 4  # MotionSensorBuilderComponentMemberType
    Rx = 5  # MotionSensorBuilderComponentMemberType
    Ry = 6  # MotionSensorBuilderComponentMemberType
    Rz = 7  # MotionSensorBuilderComponentMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MotionSensorBuilderReferenceMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MotionSensorBuilderReference():
    """
    reference frame enumeration type
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Absolute", "absolute reference frame"
       "Relative", "relative reference frame"
       "UserDefined", "user defined reference frame"
    """
    Absolute = 0  # MotionSensorBuilderReferenceMemberType
    Relative = 1  # MotionSensorBuilderReferenceMemberType
    UserDefined = 2  # MotionSensorBuilderReferenceMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MotionSensorBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MotionSensorBuilderTypes():
    """
    sensor type
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Displacement", "displacement sensor type"
       "Velocity", "velocity sensor type"
       "Acceleration", "acceleration sensor type"
       "Force", " - "
    """
    Displacement = 0  # MotionSensorBuilderTypesMemberType
    Velocity = 1  # MotionSensorBuilderTypesMemberType
    Acceleration = 2  # MotionSensorBuilderTypesMemberType
    Force = 3  # MotionSensorBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MotionSensorBuilder(MotionBuilder):
    """
    Represents a :py:class:`NXOpen.Motion.MotionSensorBuilder`
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.MotionSensorCollection.CreateMotionSensorBuilder`
    
    Default values.
    
    ===============  ================
    Property         Value
    ===============  ================
    ComponentType    LinearMagnitude 
    ---------------  ----------------
    ReferenceFrame   Absolute 
    ---------------  ----------------
    Type             Displacement 
    ===============  ================
    
    .. versionadded:: NX6.0.0
    """
    
    class Component():
        """
        component enumeration type
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "LinearMagnitude", "linear magnitude component"
           "X", "x component"
           "Y", "y component"
           "Z", "z component"
           "AngularMagnitude", "angular magnitude component"
           "Rx", "rx component"
           "Ry", "ry component"
           "Rz", "rz component"
        """
        LinearMagnitude = 0  # MotionSensorBuilderComponentMemberType
        X = 1  # MotionSensorBuilderComponentMemberType
        Y = 2  # MotionSensorBuilderComponentMemberType
        Z = 3  # MotionSensorBuilderComponentMemberType
        AngularMagnitude = 4  # MotionSensorBuilderComponentMemberType
        Rx = 5  # MotionSensorBuilderComponentMemberType
        Ry = 6  # MotionSensorBuilderComponentMemberType
        Rz = 7  # MotionSensorBuilderComponentMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Reference():
        """
        reference frame enumeration type
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Absolute", "absolute reference frame"
           "Relative", "relative reference frame"
           "UserDefined", "user defined reference frame"
        """
        Absolute = 0  # MotionSensorBuilderReferenceMemberType
        Relative = 1  # MotionSensorBuilderReferenceMemberType
        UserDefined = 2  # MotionSensorBuilderReferenceMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Types():
        """
        sensor type
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Displacement", "displacement sensor type"
           "Velocity", "velocity sensor type"
           "Acceleration", "acceleration sensor type"
           "Force", " - "
        """
        Displacement = 0  # MotionSensorBuilderTypesMemberType
        Velocity = 1  # MotionSensorBuilderTypesMemberType
        Acceleration = 2  # MotionSensorBuilderTypesMemberType
        Force = 3  # MotionSensorBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    ComponentType: MotionSensorBuilderComponent = ...
    """
    Returns or sets  the component type 
    
    <hr>
    
    Getter Method
    
    Signature ``ComponentType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.MotionSensorBuilderComponent` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ComponentType`` 
    
    :param componentType: 
    :type componentType: :py:class:`NXOpen.Motion.MotionSensorBuilderComponent` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    MeasurementObject: NXOpen.SelectNXObject = ...
    """
    Returns  the first marker object 
    
    <hr>
    
    Getter Method
    
    Signature ``MeasurementObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Name: str = ...
    """
    Returns or sets  the name 
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ReferenceFrame: MotionSensorBuilderReference = ...
    """
    Returns or sets  the reference frame type
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceFrame`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.MotionSensorBuilderReference` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReferenceFrame`` 
    
    :param referenceFrame: 
    :type referenceFrame: :py:class:`NXOpen.Motion.MotionSensorBuilderReference` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ReferenceMarker: SelectMarker = ...
    """
    Returns  the reference marker object 
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceMarker`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectMarker` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    RelativeMarker: SelectMarker = ...
    """
    Returns  the second marker object 
    
    <hr>
    
    Getter Method
    
    Signature ``RelativeMarker`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectMarker` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Type: MotionSensorBuilderTypes = ...
    """
    Returns or sets  the sensor type 
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.MotionSensorBuilderTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Motion.MotionSensorBuilderTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: MotionSensorBuilder = ...  # unknown typename


class ScalarTorqueCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of motion scalar torque   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Motion.MotionManager`
    
    .. versionadded:: NX6.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateScalarTorqueBuilder(self, scalarTorque: ScalarTorque) -> ScalarTorqueBuilder:
        """
        Return  :py:class:`NXOpen.Motion.ScalarTorqueBuilder` object   
        
        Signature ``CreateScalarTorqueBuilder(scalarTorque)`` 
        
        :param scalarTorque:  :py:class:`NXOpen.Motion.ScalarTorque` to be edited,                                                                               if None then create a new one  
        :type scalarTorque: :py:class:`NXOpen.Motion.ScalarTorque` 
        :returns:  ScalarTorqueBuilder object  
        :rtype: :py:class:`NXOpen.Motion.ScalarTorqueBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def FindObject(self, name: str) -> ScalarTorque:
        """
        Finds the :py:class:`NXOpen.Motion.ScalarTorque` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name: 
        :type name: str 
        :returns: 
        :rtype: :py:class:`NXOpen.Motion.ScalarTorque` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    


class TirePropertyFt(TireProperty):
    """
    FTire Tire Property element
    This is an object that contains parameters needed for the FTire Tire model   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Motion.TirePropertyFtBuilder`
    
    .. versionadded:: NX11.0.0
    """
    
    def CopyParameters(self, source: TirePropertyFt) -> None:
        """
        Copy parameters from another :py:class:`Motion.TirePropertyFt` 
        
        Signature ``CopyParameters(source)`` 
        
        :param source: 
        :type source: :py:class:`NXOpen.Motion.TirePropertyFt` 
        
        .. versionadded:: NX11.0.0
        
        .. deprecated::  NX12.0.0
           Use :py:meth:`MotionMethods.CopyParameters` instead.
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    Null: TirePropertyFt = ...  # unknown typename


class GraphManager(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Graph objects, only creation is supported   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Motion.MotionManager`
    
    .. versionadded:: NX5.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateGraphBuilder(self, graph: Graph) -> GraphBuilder:
        """
        Creates a :py:class:`NXOpen.Motion.GraphBuilder`  
        
        Signature ``CreateGraphBuilder(graph)`` 
        
        :param graph:  :py:class:`NXOpen.Motion.Graph` to be edited  
        :type graph: :py:class:`NXOpen.Motion.Graph` 
        :returns:  GraphBuilder object  
        :rtype: :py:class:`NXOpen.Motion.GraphBuilder` 
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`Motion.GraphManager.CreateGraphObjectBuilder` instead.
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def Find(self, name: str) -> Graph:
        """
        Finds the :py:class:`NXOpen.Motion.Graph` object with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``Find(name)`` 
        
        :param name:  Name of the Graph object.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Motion.Graph` object with this name.  
        :rtype: :py:class:`NXOpen.Motion.Graph` 
        
        .. versionadded:: NX7.5.0
        
        .. deprecated::  NX11.0.0
           Use :py:class:`Motion.GraphManager.FindObject` instead.
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def FindObject(self, name: str) -> Graph:
        """
        Finds the :py:class:`NXOpen.Motion.Graph` object with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  Name of the Graph object.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Motion.Graph` object with this name.  
        :rtype: :py:class:`NXOpen.Motion.Graph` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def CreateGraphObjectBuilder(self, graph: Graph) -> GraphObjectBuilder:
        """
        Creates a :py:class:`NXOpen.Motion.GraphObjectBuilder`  
        
        Signature ``CreateGraphObjectBuilder(graph)`` 
        
        :param graph:  :py:class:`NXOpen.Motion.Graph` to be edited  
        :type graph: :py:class:`NXOpen.Motion.Graph` 
        :returns:  GraphObjectBuilder object  
        :rtype: :py:class:`NXOpen.Motion.GraphObjectBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    


class PlantInputBuilder(MotionBuilder):
    """
    Represents a :py:class:`NXOpen.Motion.PlantInput` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.PlantInputCollection.CreatePlantInputBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Name: str = ...
    """
    Returns or sets  the name 
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_motion_cosim ("NX Motion CoSimulation")
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_motion_cosim ("NX Motion CoSimulation")
    """
    Null: PlantInputBuilder = ...  # unknown typename


class VectorForceCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of vector force objects   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Motion.MotionManager`
    
    .. versionadded:: NX5.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateVectorForceBuilder(self, vectorforce: VectorForce) -> VectorForceBuilder:
        """
        Creates a :py:class:`NXOpen.Motion.JointDriverBuilder`  
        
        Signature ``CreateVectorForceBuilder(vectorforce)`` 
        
        :param vectorforce:  ":py:class:`NXOpen.Motion.VectorForce` to be edited,                                                                                               if None then create a new one 
        :type vectorforce: :py:class:`NXOpen.Motion.VectorForce` 
        :returns: 
        :rtype: :py:class:`NXOpen.Motion.VectorForceBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def FindObject(self, name: str) -> VectorForce:
        """
        Finds the :py:class:`NXOpen.Motion.VectorForce` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Motion.VectorForce`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Motion.VectorForce` with this name.  
        :rtype: :py:class:`NXOpen.Motion.VectorForce` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    


class CurveOnCurve(MotionObject, IGraphSource):
    """
    Represents a curve on curve   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Motion.CurveOnCurveBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: CurveOnCurve = ...  # unknown typename


class CouplerBuilder(MotionBuilder):
    """
    Represents a :py:class:`NXOpen.Motion.CouplerBuilder`   
    
    This is an abstract class, and cannot be created.
    
    .. versionadded:: NX6.0.0
    """
    ContactPoint: NXOpen.Point = ...
    """
    Returns or sets  the contact point 
    
    <hr>
    
    Getter Method
    
    Signature ``ContactPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ContactPoint`` 
    
    :param contactPt: 
    :type contactPt: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    FirstJoint: SelectJoint = ...
    """
    Returns  the first joint 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstJoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectJoint` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    FirstRadiusExpression: NXOpen.Expression = ...
    """
    Returns  the first radius expression.  
    
    Only valid when using Simcenter Solver. 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstRadiusExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    Name: str = ...
    """
    Returns or sets  the name 
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    RatioExpression: NXOpen.Expression = ...
    """
    Returns  the ratio expression
    
    <hr>
    
    Getter Method
    
    Signature ``RatioExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    SecondJoint: SelectJoint = ...
    """
    Returns  the second joint 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondJoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectJoint` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SecondRadiusExpression: NXOpen.Expression = ...
    """
    Returns  the second radius expression.  
    
    Only valid when using Simcenter Solver. 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondRadiusExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    Null: CouplerBuilder = ...  # unknown typename


class CouplerRckpnBuilder(CouplerBuilder):
    """
    Represents a :py:class:`NXOpen.Motion.CouplerRckpnBuilder`   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.CouplerCollection.CreateCouplerRckpnBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: CouplerRckpnBuilder = ...  # unknown typename


class PackagingInterference(Packaging):
    """
    This class represents a Packaging Interference object.  
    
    An Interference object is used to define a request to check for
    interference between sets of moving bodies in a mechanism. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Motion.PackagingInterferenceBuilder`
    
    .. versionadded:: NX4.0.0
    """
    Null: PackagingInterference = ...  # unknown typename


class CouplerGearBuilder(CouplerBuilder):
    """
    Represents a :py:class:`NXOpen.Motion.CouplerGearBuilder`   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.CouplerCollection.CreateCouplerGearBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: CouplerGearBuilder = ...  # unknown typename


class BodyContactAdamsForceModelMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BodyContactAdamsForceModel():
    """
    the enum for forec model of 3D contact 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Impact", " - "
       "Poisson", " - "
    """
    Impact = 0  # BodyContactAdamsForceModelMemberType
    Poisson = 1  # BodyContactAdamsForceModelMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BodyContactAdamsCoulombFrictionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BodyContactAdamsCoulombFriction():
    """
    the enum for friction option of 3D contact 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Off", " - "
       "On", " - "
    """
    Off = 0  # BodyContactAdamsCoulombFrictionMemberType
    On = 1  # BodyContactAdamsCoulombFrictionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BodyContactAdams(NXOpen.NXObject):
    """
    Represents a :py:class:`NXOpen.Motion.BodyContactAdams`   
    
    .. versionadded:: NX5.0.0
    """
    
    class ForceModel():
        """
        the enum for forec model of 3D contact 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Impact", " - "
           "Poisson", " - "
        """
        Impact = 0  # BodyContactAdamsForceModelMemberType
        Poisson = 1  # BodyContactAdamsForceModelMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class CoulombFriction():
        """
        the enum for friction option of 3D contact 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Off", " - "
           "On", " - "
        """
        Off = 0  # BodyContactAdamsCoulombFrictionMemberType
        On = 1  # BodyContactAdamsCoulombFrictionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    CoulombFrictionOption: BodyContactAdamsCoulombFriction = ...
    """
    Returns or sets  the coulomb friction option
    
    <hr>
    
    Getter Method
    
    Signature ``CoulombFrictionOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.BodyContactAdamsCoulombFriction` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CoulombFrictionOption`` 
    
    :param coulombFriction: 
    :type coulombFriction: :py:class:`NXOpen.Motion.BodyContactAdamsCoulombFriction` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    DynamicCoefficientExpression: NXOpen.Expression = ...
    """
    Returns  the dynamic coefficient 
    
    <hr>
    
    Getter Method
    
    Signature ``DynamicCoefficientExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ForceExponentExpression: NXOpen.Expression = ...
    """
    Returns  the force exponent expression 
    
    <hr>
    
    Getter Method
    
    Signature ``ForceExponentExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ForceModelType: BodyContactAdamsForceModel = ...
    """
    Returns or sets  the force model type
    
    <hr>
    
    Getter Method
    
    Signature ``ForceModelType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.BodyContactAdamsForceModel` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ForceModelType`` 
    
    :param forceModel: 
    :type forceModel: :py:class:`NXOpen.Motion.BodyContactAdamsForceModel` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    FrictionVelocityExpression: NXOpen.Expression = ...
    """
    Returns  the friction velocity expression 
    
    <hr>
    
    Getter Method
    
    Signature ``FrictionVelocityExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    MaterialDampingExpression: NXOpen.Expression = ...
    """
    Returns  the material damping expression 
    
    <hr>
    
    Getter Method
    
    Signature ``MaterialDampingExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    PenetrationDepthExpression: NXOpen.Expression = ...
    """
    Returns  the penetration depth expression 
    
    <hr>
    
    Getter Method
    
    Signature ``PenetrationDepthExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    RestitutionCoefficentExpression: NXOpen.Expression = ...
    """
    Returns  the restitution coefficent expression 
    
    <hr>
    
    Getter Method
    
    Signature ``RestitutionCoefficentExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    StaticCoefficientExpression: NXOpen.Expression = ...
    """
    Returns  the static coefficient expression 
    
    <hr>
    
    Getter Method
    
    Signature ``StaticCoefficientExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    StictionVelocityExpression: NXOpen.Expression = ...
    """
    Returns  the stiction velocity expression 
    
    <hr>
    
    Getter Method
    
    Signature ``StictionVelocityExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    StiffnessExpression: NXOpen.Expression = ...
    """
    Returns  the stiffness expression 
    
    <hr>
    
    Getter Method
    
    Signature ``StiffnessExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: BodyContactAdams = ...  # unknown typename


class ActiveViewMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ActiveView():
    """
    Definitions of post articulation and spreadsheet run active view type
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "All", "Articulation or Spreadsheet Run in all views"
       "Work", "Articulation or Spreadsheet Run in work view only"
    """
    All = 0  # ActiveViewMemberType
    Work = 1  # ActiveViewMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RoadBuilderTypeChoicesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RoadBuilderTypeChoices():
    """
    type attribute of the road 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Surface", "Surface"
       "Path", "Path"
    """
    Surface = 0  # RoadBuilderTypeChoicesMemberType
    Path = 1  # RoadBuilderTypeChoicesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RoadBuilderSurfaceDatatypeChoicesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RoadBuilderSurfaceDatatypeChoices():
    """
    data type attribute of the surface data 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "SplineCurve", "Function"
       "SplineSurface", "Spline Surface defined by 3D Profile"
       "Rsm1000", "RSM1000"
       "Rsm1002", "RSM1002"
       "Rsm2000", "RSM2000"
       "Rsm3000", "RSM3000"
       "OpenCRG", "OpenCRG"
       "RoadDataFile", "Road Data File"
       "Profile2D", "Profile 2D"
    """
    SplineCurve = 0  # RoadBuilderSurfaceDatatypeChoicesMemberType
    SplineSurface = 1  # RoadBuilderSurfaceDatatypeChoicesMemberType
    Rsm1000 = 2  # RoadBuilderSurfaceDatatypeChoicesMemberType
    Rsm1002 = 3  # RoadBuilderSurfaceDatatypeChoicesMemberType
    Rsm2000 = 4  # RoadBuilderSurfaceDatatypeChoicesMemberType
    Rsm3000 = 5  # RoadBuilderSurfaceDatatypeChoicesMemberType
    OpenCRG = 6  # RoadBuilderSurfaceDatatypeChoicesMemberType
    RoadDataFile = 7  # RoadBuilderSurfaceDatatypeChoicesMemberType
    Profile2D = 8  # RoadBuilderSurfaceDatatypeChoicesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RoadBuilderPathDatatypeChoicesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RoadBuilderPathDatatypeChoices():
    """
    data type attribute of the path data 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "SplineCurves", "Spline Curves"
       "Segments", "Segments"
       "FileImport", "FileImport"
    """
    SplineCurves = 0  # RoadBuilderPathDatatypeChoicesMemberType
    Segments = 1  # RoadBuilderPathDatatypeChoicesMemberType
    FileImport = 2  # RoadBuilderPathDatatypeChoicesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RoadBuilderSplineDatatypeChoicesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RoadBuilderSplineDatatypeChoices():
    """
    data type attribute of the spline data 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Function", "Function"
       "Profile2D", "Profile 2D"
    """
    Function = 0  # RoadBuilderSplineDatatypeChoicesMemberType
    Profile2D = 1  # RoadBuilderSplineDatatypeChoicesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RoadBuilder(MotionBuilder):
    """
    Represents a :py:class:`NXOpen.Motion.RoadBuilder`
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.RoadCollection.CreateRoadBuilder`
    
    .. versionadded:: NX11.0.0
    """
    
    class TypeChoices():
        """
        type attribute of the road 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Surface", "Surface"
           "Path", "Path"
        """
        Surface = 0  # RoadBuilderTypeChoicesMemberType
        Path = 1  # RoadBuilderTypeChoicesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SurfaceDatatypeChoices():
        """
        data type attribute of the surface data 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "SplineCurve", "Function"
           "SplineSurface", "Spline Surface defined by 3D Profile"
           "Rsm1000", "RSM1000"
           "Rsm1002", "RSM1002"
           "Rsm2000", "RSM2000"
           "Rsm3000", "RSM3000"
           "OpenCRG", "OpenCRG"
           "RoadDataFile", "Road Data File"
           "Profile2D", "Profile 2D"
        """
        SplineCurve = 0  # RoadBuilderSurfaceDatatypeChoicesMemberType
        SplineSurface = 1  # RoadBuilderSurfaceDatatypeChoicesMemberType
        Rsm1000 = 2  # RoadBuilderSurfaceDatatypeChoicesMemberType
        Rsm1002 = 3  # RoadBuilderSurfaceDatatypeChoicesMemberType
        Rsm2000 = 4  # RoadBuilderSurfaceDatatypeChoicesMemberType
        Rsm3000 = 5  # RoadBuilderSurfaceDatatypeChoicesMemberType
        OpenCRG = 6  # RoadBuilderSurfaceDatatypeChoicesMemberType
        RoadDataFile = 7  # RoadBuilderSurfaceDatatypeChoicesMemberType
        Profile2D = 8  # RoadBuilderSurfaceDatatypeChoicesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class PathDatatypeChoices():
        """
        data type attribute of the path data 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "SplineCurves", "Spline Curves"
           "Segments", "Segments"
           "FileImport", "FileImport"
        """
        SplineCurves = 0  # RoadBuilderPathDatatypeChoicesMemberType
        Segments = 1  # RoadBuilderPathDatatypeChoicesMemberType
        FileImport = 2  # RoadBuilderPathDatatypeChoicesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SplineDatatypeChoices():
        """
        data type attribute of the spline data 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Function", "Function"
           "Profile2D", "Profile 2D"
        """
        Function = 0  # RoadBuilderSplineDatatypeChoicesMemberType
        Profile2D = 1  # RoadBuilderSplineDatatypeChoicesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def CreateSegmentBuilder(self) -> SegmentBuilder:
        """
        Creates a new segment builder for the road object of type path  
        
        Signature ``CreateSegmentBuilder()`` 
        
        :returns:  SegmentBuilder object  
        :rtype: :py:class:`NXOpen.Motion.SegmentBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def GetSegmentBuilder(self, segmentBuilderIndex: int) -> SegmentBuilder:
        """
        Get a specific segment builder from the list  
        
        Signature ``GetSegmentBuilder(segmentBuilderIndex)`` 
        
        :param segmentBuilderIndex: 
        :type segmentBuilderIndex: int 
        :returns: 
        :rtype: :py:class:`NXOpen.Motion.SegmentBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def RemoveSegmentBuilder(self, segment: SegmentBuilder) -> None:
        """
        Remove a segment 
        
        Signature ``RemoveSegmentBuilder(segment)`` 
        
        :param segment: 
        :type segment: :py:class:`NXOpen.Motion.SegmentBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def RemoveAllSegmentBuilders(self) -> None:
        """
        Remove a segment 
        
        Signature ``RemoveAllSegmentBuilders()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def SwapSegment(self, firstSegment: SegmentBuilder, secondSegment: SegmentBuilder) -> None:
        """
        Swap two segments 
        
        Signature ``SwapSegment(firstSegment, secondSegment)`` 
        
        :param firstSegment: 
        :type firstSegment: :py:class:`NXOpen.Motion.SegmentBuilder` 
        :param secondSegment: 
        :type secondSegment: :py:class:`NXOpen.Motion.SegmentBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    BankAngleCurve: MotionFunction = ...
    """
    Returns or sets  the bank angle spline curve for the road object of path type 
    
    <hr>
    
    Getter Method
    
    Signature ``BankAngleCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.MotionFunction` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``BankAngleCurve`` 
    
    :param spline: 
    :type spline: :py:class:`NXOpen.Motion.MotionFunction` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    BankAngleCurveProfile: SelectFieldData = ...
    """
    Returns  the bank angle spline curve defined by a profile for the road object of path type 
    
    <hr>
    
    Getter Method
    
    Signature ``BankAngleCurveProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectFieldData` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Color: NXOpen.NXColor = ...
    """
    Returns or sets  the color 
    
    <hr>
    
    Getter Method
    
    Signature ``Color`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Color`` 
    
    :param color: 
    :type color: Id 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Csys: NXOpen.CoordinateSystem = ...
    """
    Returns or sets  the coordinate system of the optional link object 
    
    <hr>
    
    Getter Method
    
    Signature ``Csys`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Csys`` 
    
    :param csys: 
    :type csys: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    GridDensity: NXOpen.Expression = ...
    """
    Returns  the grid density 
    
    <hr>
    
    Getter Method
    
    Signature ``GridDensity`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Length: NXOpen.Expression = ...
    """
    Returns  the length 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Link: SelectLink = ...
    """
    Returns  the optional link object 
    
    <hr>
    
    Getter Method
    
    Signature ``Link`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectLink` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Name: str = ...
    """
    Returns or sets  the name of the road object selected from motion objects 
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    PathDatatype: RoadBuilderPathDatatypeChoices = ...
    """
    Returns or sets  the path datatype of the road object 
    
    <hr>
    
    Getter Method
    
    Signature ``PathDatatype`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.RoadBuilderPathDatatypeChoices` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``PathDatatype`` 
    
    :param pathdatatype: 
    :type pathdatatype: :py:class:`NXOpen.Motion.RoadBuilderPathDatatypeChoices` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    PathFileName: str = ...
    """
    Returns or sets  the path and file name of the path curve 
    
    <hr>
    
    Getter Method
    
    Signature ``PathFileName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``PathFileName`` 
    
    :param filename: 
    :type filename: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ReferencePoint: NXOpen.Point = ...
    """
    Returns or sets  the reference point of the optional link object 
    
    <hr>
    
    Getter Method
    
    Signature ``ReferencePoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``ReferencePoint`` 
    
    :param referencePoint: 
    :type referencePoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    RoadObject: Road = ...
    """
    Returns or sets  the road object selected from motion objects 
    
    <hr>
    
    Getter Method
    
    Signature ``RoadObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.Road` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``RoadObject`` 
    
    :param roadobject: 
    :type roadobject: :py:class:`NXOpen.Motion.Road` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    RoadType: RoadBuilderTypeChoices = ...
    """
    Returns or sets  the road type 
    
    <hr>
    
    Getter Method
    
    Signature ``RoadType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.RoadBuilderTypeChoices` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``RoadType`` 
    
    :param roadtype: 
    :type roadtype: :py:class:`NXOpen.Motion.RoadBuilderTypeChoices` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SegmentBuilderList: SegmentBuilderList = ...
    """
    Returns  the segment builder list for the road object of type path 
    
    <hr>
    
    Getter Method
    
    Signature ``SegmentBuilderList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SegmentBuilderList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ShowVisualization: bool = ...
    """
    Returns or sets  the show visualization 
    
    <hr>
    
    Getter Method
    
    Signature ``ShowVisualization`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``ShowVisualization`` 
    
    :param showVisualization: 
    :type showVisualization: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SplineCurve: MotionFunction = ...
    """
    Returns or sets  the spline curve of the road object of surface type 
    
    <hr>
    
    Getter Method
    
    Signature ``SplineCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.MotionFunction` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``SplineCurve`` 
    
    :param spline: 
    :type spline: :py:class:`NXOpen.Motion.MotionFunction` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SplineCurveProfile: SelectFieldData = ...
    """
    Returns  the spline profile of the road object of surface type 
    
    <hr>
    
    Getter Method
    
    Signature ``SplineCurveProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectFieldData` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SplineType: RoadBuilderSplineDatatypeChoices = ...
    """
    Returns or sets  the spline type 
    
    <hr>
    
    Getter Method
    
    Signature ``SplineType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.RoadBuilderSplineDatatypeChoices` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``SplineType`` 
    
    :param splineType: 
    :type splineType: :py:class:`NXOpen.Motion.RoadBuilderSplineDatatypeChoices` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SurfaceDatatype: RoadBuilderSurfaceDatatypeChoices = ...
    """
    Returns or sets  the surface datatype of the road object 
    
    <hr>
    
    Getter Method
    
    Signature ``SurfaceDatatype`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.RoadBuilderSurfaceDatatypeChoices` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``SurfaceDatatype`` 
    
    :param surfacedatatype: 
    :type surfacedatatype: :py:class:`NXOpen.Motion.RoadBuilderSurfaceDatatypeChoices` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SurfaceFileName: str = ...
    """
    Returns or sets  the path and file name of the surface curve 
    
    <hr>
    
    Getter Method
    
    Signature ``SurfaceFileName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``SurfaceFileName`` 
    
    :param filename: 
    :type filename: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SurfaceProfile: SelectFieldData = ...
    """
    Returns  the path and file name of the surface curve 
    
    <hr>
    
    Getter Method
    
    Signature ``SurfaceProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectFieldData` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Width: NXOpen.Expression = ...
    """
    Returns  the width 
    
    <hr>
    
    Getter Method
    
    Signature ``Width`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    XCurve: MotionFunction = ...
    """
    Returns or sets  the x spline curve for the road object of path type 
    
    <hr>
    
    Getter Method
    
    Signature ``XCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.MotionFunction` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``XCurve`` 
    
    :param spline: 
    :type spline: :py:class:`NXOpen.Motion.MotionFunction` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    XCurveProfile: SelectFieldData = ...
    """
    Returns  the x spline curve defined by a profile for the road object of path type 
    
    <hr>
    
    Getter Method
    
    Signature ``XCurveProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectFieldData` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    XSegmentOriginCoord: NXOpen.Expression = ...
    """
    Returns  the x origin coord for the segments for the road object of type path 
    
    <hr>
    
    Getter Method
    
    Signature ``XSegmentOriginCoord`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    YCurve: MotionFunction = ...
    """
    Returns or sets  the y spline curve for the road object of path type 
    
    <hr>
    
    Getter Method
    
    Signature ``YCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.MotionFunction` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``YCurve`` 
    
    :param spline: 
    :type spline: :py:class:`NXOpen.Motion.MotionFunction` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    YCurveProfile: SelectFieldData = ...
    """
    Returns  the y spline curve defined by a profile for the road object of path type 
    
    <hr>
    
    Getter Method
    
    Signature ``YCurveProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectFieldData` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    YSegmentOriginCoord: NXOpen.Expression = ...
    """
    Returns  the y origin coord for the segments for the road object of type path 
    
    <hr>
    
    Getter Method
    
    Signature ``YSegmentOriginCoord`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ZCurve: MotionFunction = ...
    """
    Returns or sets  the z spline curve for the road object of path type 
    
    <hr>
    
    Getter Method
    
    Signature ``ZCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.MotionFunction` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``ZCurve`` 
    
    :param spline: 
    :type spline: :py:class:`NXOpen.Motion.MotionFunction` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ZCurveProfile: SelectFieldData = ...
    """
    Returns  the z spline curve defined by a profile for the road object of path type 
    
    <hr>
    
    Getter Method
    
    Signature ``ZCurveProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectFieldData` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ZSegmentOriginCoord: NXOpen.Expression = ...
    """
    Returns  the z origin coord for the segments for the road object of type path 
    
    <hr>
    
    Getter Method
    
    Signature ``ZSegmentOriginCoord`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: RoadBuilder = ...  # unknown typename


class LinkCoupler(MotionObject, IGraphSource):
    """
    Represents a :py:class:`NXOpen.Motion.LinkCoupler`   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Motion.LinkCouplerBuilder`
    
    .. versionadded:: NX12.0.0
    """
    Null: LinkCoupler = ...  # unknown typename


class LinkDriverBuilder(MotionBuilder):
    """
    Represents a :py:class:`NXOpen.Motion.LinkDriverBuilder`
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.LinkDriverCollection.CreateLinkDriverBuilder`
    
    .. versionadded:: NX11.0.0
    """
    ActionLinkAttachment: LinkAttachmentData = ...
    """
    Returns  the Action Link Attachment 
    
    <hr>
    
    Getter Method
    
    Signature ``ActionLinkAttachment`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.LinkAttachmentData` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    BaseLinkAttachment: LinkAttachmentData = ...
    """
    Returns  the Base Link Attachment 
    
    <hr>
    
    Getter Method
    
    Signature ``BaseLinkAttachment`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.LinkAttachmentData` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    DriverMotions: DriverMotionsData = ...
    """
    Returns  the Driver Motions 
    
    <hr>
    
    Getter Method
    
    Signature ``DriverMotions`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.DriverMotionsData` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Name: str = ...
    """
    Returns or sets  the name 
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: LinkDriverBuilder = ...  # unknown typename


class MotionEnvironmentAnalysisMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MotionEnvironmentAnalysis():
    """
    Represents analysis type of current mechanisms 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NoType", "No analysis type"
       "Kinematics", "Kinematics analysis type"
       "Dynamics", "Dynamics analysis type"
    """
    NoType = 0  # MotionEnvironmentAnalysisMemberType
    Kinematics = 1  # MotionEnvironmentAnalysisMemberType
    Dynamics = 2  # MotionEnvironmentAnalysisMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MotionEnvironmentSolverMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MotionEnvironmentSolver():
    """
    Represents Motion solver of current mechanism 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "No solver"
       "Recurdyn", "Motion solver RecurDyn"
       "Adams", "Motion solver Adams"
       "Simcenter", "Simcenter Motion solver"
       "Lms", "Simcenter Motion solver (legacy name, deprecated in SC12)"
       "ScDesigner", "NX Motion solver"
    """
    NotSet = -1  # MotionEnvironmentSolverMemberType
    Recurdyn = 0  # MotionEnvironmentSolverMemberType
    Adams = 1  # MotionEnvironmentSolverMemberType
    Simcenter = 2  # MotionEnvironmentSolverMemberType
    Lms = 2  # MotionEnvironmentSolverMemberType
    ScDesigner = 3  # MotionEnvironmentSolverMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MotionEnvironmentJointWizardStatusMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MotionEnvironmentJointWizardStatus():
    """
    Represents the on-off status of joint wizard 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Undefined", "Undefined status"
       "Off", "Joint Wizard is turned off"
       "On", "Joint Wizard is turned on"
    """
    Undefined = -1  # MotionEnvironmentJointWizardStatusMemberType
    Off = 0  # MotionEnvironmentJointWizardStatusMemberType
    On = 1  # MotionEnvironmentJointWizardStatusMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MotionEnvironmentAdoptAssemblyJointStatusMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MotionEnvironmentAdoptAssemblyJointStatus():
    """
    Represents the on-off status of adopt assembly joint 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Undefined", "Undefined status"
       "Off", "Adopt Assembly Joint is turned off"
       "On", "Adopt Assembly Joint is turned on"
    """
    Undefined = -1  # MotionEnvironmentAdoptAssemblyJointStatusMemberType
    Off = 0  # MotionEnvironmentAdoptAssemblyJointStatusMemberType
    On = 1  # MotionEnvironmentAdoptAssemblyJointStatusMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MotionEnvironment():
    """
    Represents a Motion Environment   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Motion.MotionSession`
    
    .. versionadded:: NX7.5.0
    """
    
    class Analysis():
        """
        Represents analysis type of current mechanisms 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NoType", "No analysis type"
           "Kinematics", "Kinematics analysis type"
           "Dynamics", "Dynamics analysis type"
        """
        NoType = 0  # MotionEnvironmentAnalysisMemberType
        Kinematics = 1  # MotionEnvironmentAnalysisMemberType
        Dynamics = 2  # MotionEnvironmentAnalysisMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Solver():
        """
        Represents Motion solver of current mechanism 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "No solver"
           "Recurdyn", "Motion solver RecurDyn"
           "Adams", "Motion solver Adams"
           "Simcenter", "Simcenter Motion solver"
           "Lms", "Simcenter Motion solver (legacy name, deprecated in SC12)"
           "ScDesigner", "NX Motion solver"
        """
        NotSet = -1  # MotionEnvironmentSolverMemberType
        Recurdyn = 0  # MotionEnvironmentSolverMemberType
        Adams = 1  # MotionEnvironmentSolverMemberType
        Simcenter = 2  # MotionEnvironmentSolverMemberType
        Lms = 2  # MotionEnvironmentSolverMemberType
        ScDesigner = 3  # MotionEnvironmentSolverMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class JointWizardStatus():
        """
        Represents the on-off status of joint wizard 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Undefined", "Undefined status"
           "Off", "Joint Wizard is turned off"
           "On", "Joint Wizard is turned on"
        """
        Undefined = -1  # MotionEnvironmentJointWizardStatusMemberType
        Off = 0  # MotionEnvironmentJointWizardStatusMemberType
        On = 1  # MotionEnvironmentJointWizardStatusMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class AdoptAssemblyJointStatus():
        """
        Represents the on-off status of adopt assembly joint 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Undefined", "Undefined status"
           "Off", "Adopt Assembly Joint is turned off"
           "On", "Adopt Assembly Joint is turned on"
        """
        Undefined = -1  # MotionEnvironmentAdoptAssemblyJointStatusMemberType
        Off = 0  # MotionEnvironmentAdoptAssemblyJointStatusMemberType
        On = 1  # MotionEnvironmentAdoptAssemblyJointStatusMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetAnalysisType(self, analysisType: MotionEnvironmentAnalysis) -> None:
        """
        Sets the the analysis type 
        
        Signature ``SetAnalysisType(analysisType)`` 
        
        :param analysisType:  The analysis type  
        :type analysisType: :py:class:`NXOpen.Motion.MotionEnvironmentAnalysis` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def SetJointWizardStatus(self, setting: MotionEnvironmentJointWizardStatus) -> None:
        """
        Sets the on-off status of joint wizard 
        
        Signature ``SetJointWizardStatus(setting)`` 
        
        :param setting: 
        :type setting: :py:class:`NXOpen.Motion.MotionEnvironmentJointWizardStatus` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def GetJointWizardStatus(self) -> MotionEnvironmentJointWizardStatus:
        """
        Gets the on-off status of joint wizard  
        
        Signature ``GetJointWizardStatus()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Motion.MotionEnvironmentJointWizardStatus` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def SetAdoptAssemblyJointStatus(self, setting: MotionEnvironmentAdoptAssemblyJointStatus) -> None:
        """
        Sets the on-off status of adopt assembly joint 
        
        Signature ``SetAdoptAssemblyJointStatus(setting)`` 
        
        :param setting: 
        :type setting: :py:class:`NXOpen.Motion.MotionEnvironmentAdoptAssemblyJointStatus` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def GetAdoptAssemblyJointStatus(self) -> MotionEnvironmentAdoptAssemblyJointStatus:
        """
        Gets the on-off status of adopt assembly joint  
        
        Signature ``GetAdoptAssemblyJointStatus()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Motion.MotionEnvironmentAdoptAssemblyJointStatus` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def CheckMotorLicense(self, checkMotorLicense: bool) -> None:
        """
        Checks the motor license 
        
        Signature ``CheckMotorLicense(checkMotorLicense)`` 
        
        :param checkMotorLicense:  Checks out or checks in motor license  
        :type checkMotorLicense: bool 
        
        .. versionadded:: NX7.5.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def CheckCosimLicense(self, checkCosimLicense: bool) -> None:
        """
        Checks the co-simulation license 
        
        Signature ``CheckCosimLicense(checkCosimLicense)`` 
        
        :param checkCosimLicense:  Checks out or checks in co-simulation license  
        :type checkCosimLicense: bool 
        
        .. versionadded:: NX7.5.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def CheckFlexbodyLicense(self, checkFlexbodyLicense: bool) -> None:
        """
        Checks the flexible body dynamic license 
        
        Signature ``CheckFlexbodyLicense(checkFlexbodyLicense)`` 
        
        :param checkFlexbodyLicense:  Checks out or checks in flexible body dynamic license  
        :type checkFlexbodyLicense: bool 
        
        .. versionadded:: NX7.5.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def SetComponentBasedMechanism(self, componentBasedMech: bool) -> None:
        """
        Sets component based mechanism 
        
        Signature ``SetComponentBasedMechanism(componentBasedMech)`` 
        
        :param componentBasedMech:  Sets component based mechanism  
        :type componentBasedMech: bool 
        
        .. versionadded:: NX7.5.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def SetSolver(self, solver: MotionEnvironmentSolver) -> None:
        """
        Sets Motion solver 
        
        Signature ``SetSolver(solver)`` 
        
        :param solver: 
        :type solver: :py:class:`NXOpen.Motion.MotionEnvironmentSolver` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def GetSolver(self) -> MotionEnvironmentSolver:
        """
        Gets current Motion solver  
        
        Signature ``GetSolver()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Motion.MotionEnvironmentSolver` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def EnableMechatronics(self, enableMechatronicsLicense: bool) -> None:
        """
        Enable the mechatronics 
        
        Signature ``EnableMechatronics(enableMechatronicsLicense)`` 
        
        :param enableMechatronicsLicense:  enable or disable mechatronics  
        :type enableMechatronicsLicense: bool 
        
        .. versionadded:: NX11.0.0
        
        .. deprecated::  NX12.0.0
           Removed without replacement.
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def EnableLmsflexbody(self, enableLmsflexbody: bool) -> None:
        """
        Enable the LMS flexible body dynamics 
        
        Signature ``EnableLmsflexbody(enableLmsflexbody)`` 
        
        :param enableLmsflexbody:  enable or disable LMS flex body dynamics  
        :type enableLmsflexbody: bool 
        
        .. versionadded:: NX11.0.0
        
        .. deprecated::  NX12.0.0
           Removed without replacement.
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def EnableStdtire(self, enableStdtire: bool) -> None:
        """
        Enable the standard tire 
        
        Signature ``EnableStdtire(enableStdtire)`` 
        
        :param enableStdtire:  enable out or disable Standard Tire  
        :type enableStdtire: bool 
        
        .. versionadded:: NX11.0.0
        
        .. deprecated::  NX12.0.0
           Removed without replacement.
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def EnableTnotire(self, enableTnotiree: bool) -> None:
        """
        Enable the TNO tire 
        
        Signature ``EnableTnotire(enableTnotiree)`` 
        
        :param enableTnotiree:  enable or disable TNO Tire  
        :type enableTnotiree: bool 
        
        .. versionadded:: NX11.0.0
        
        .. deprecated::  NX12.0.0
           Removed without replacement.
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def EnableSwifttire(self, enableSwifttire: bool) -> None:
        """
        Enable the Swift tire 
        
        Signature ``EnableSwifttire(enableSwifttire)`` 
        
        :param enableSwifttire:  enable or disable Swift Tire  
        :type enableSwifttire: bool 
        
        .. versionadded:: NX11.0.0
        
        .. deprecated::  NX12.0.0
           Removed without replacement.
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def EnableCdtire(self, enableCdtire: bool) -> None:
        """
        Enable the CD tire 
        
        Signature ``EnableCdtire(enableCdtire)`` 
        
        :param enableCdtire:  enable or disable CD Tire  
        :type enableCdtire: bool 
        
        .. versionadded:: NX11.0.0
        
        .. deprecated::  NX12.0.0
           Removed without replacement.
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    


class TirePropertyTno(TireProperty):
    """
    TNO Tire Property element
    This is an object that contains parameters needed for the TNO Tire model   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Motion.TirePropertyTnoBuilder`
    
    .. versionadded:: NX11.0.0
    """
    
    def CopyParameters(self, source: TirePropertyTno) -> None:
        """
        Copy parameters from another :py:class:`Motion.TirePropertyTno` 
        
        Signature ``CopyParameters(source)`` 
        
        :param source: 
        :type source: :py:class:`NXOpen.Motion.TirePropertyTno` 
        
        .. versionadded:: NX11.0.0
        
        .. deprecated::  NX12.0.0
           Use :py:meth:`MotionMethods.CopyParameters` instead.
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    Null: TirePropertyTno = ...  # unknown typename


class ScalarForceCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a Scalar Force Collection.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Motion.MotionManager`
    
    .. versionadded:: NX6.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateScalarForceBuilder(self, scalarForce: ScalarForce) -> ScalarForceBuilder:
        """
        Return  :py:class:`NXOpen.Motion.ScalarForceBuilder` object   
        
        Signature ``CreateScalarForceBuilder(scalarForce)`` 
        
        :param scalarForce:  :py:class:`NXOpen.Motion.ScalarForce` to be edited,                                                                               if None then create a new one  
        :type scalarForce: :py:class:`NXOpen.Motion.ScalarForce` 
        :returns:  ScalarForceBuilder object  
        :rtype: :py:class:`NXOpen.Motion.ScalarForceBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def FindObject(self, name: str) -> ScalarForce:
        """
        Finds the :py:class:`NXOpen.Motion.ScalarForce` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name: 
        :type name: str 
        :returns: 
        :rtype: :py:class:`NXOpen.Motion.ScalarForce` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    


class SpringBuilder(ConnectorBuilder):
    """
    Represents a SpringBuilder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.SpringCollection.CreateSpringBuilder`
    
    Default values.
    
    ==============  =========
    Property        Value
    ==============  =========
    StiffnessType   Constant 
    ==============  =========
    
    .. versionadded:: NX6.0.0
    """
    ActuatorCurveProfile: SelectFieldData = ...
    """
    Returns  the actuator profile.  
    
    Only valid if :py:class:`MotionConnectorCoefficientTypes.Profile2d <MotionConnectorCoefficientTypes>`
    or :py:class:`MotionConnectorCoefficientTypes.ExpressionAndProfile2d <MotionConnectorCoefficientTypes>` is set
    
    <hr>
    
    Getter Method
    
    Signature ``ActuatorCurveProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectFieldData` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    ActuatorForceExpression: NXOpen.Expression = ...
    """
    Returns  the actuator force expression 
    
    <hr>
    
    Getter Method
    
    Signature ``ActuatorForceExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    ActuatorFunction: NXOpen.CAE.Function = ...
    """
    Returns or sets  the actuator function tag.  
    
    <hr>
    
    Getter Method
    
    Signature ``ActuatorFunction`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CAE.Function` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ActuatorFunction`` 
    
    :param actuatorFunction: 
    :type actuatorFunction: :py:class:`NXOpen.CAE.Function` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ActuatorMomentExpression: NXOpen.Expression = ...
    """
    Returns  the actuator moment expression 
    
    <hr>
    
    Getter Method
    
    Signature ``ActuatorMomentExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    ActuatorType: ConnectorCoefficientTypes = ...
    """
    Returns or sets  the actuator spline type 
    
    <hr>
    
    Getter Method
    
    Signature ``ActuatorType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.ConnectorCoefficientTypes` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ActuatorType`` 
    
    :param actuatorType: 
    :type actuatorType: :py:class:`NXOpen.Motion.ConnectorCoefficientTypes` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    CoefficientCurveProfile: SelectFieldData = ...
    """
    Returns  the coefficient profile 
    
    <hr>
    
    Getter Method
    
    Signature ``CoefficientCurveProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectFieldData` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    CoefficientExpression: NXOpen.Expression = ...
    """
    Returns  the translational coefficient expression 
    
    <hr>
    
    Getter Method
    
    Signature ``CoefficientExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    CoefficientFunction: NXOpen.CAE.Function = ...
    """
    Returns or sets  the function tag.  
    
    Only valid if :py:class:`MotionConnectorCoefficientTypes.Spline <MotionConnectorCoefficientTypes>` is set 
    
    <hr>
    
    Getter Method
    
    Signature ``CoefficientFunction`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CAE.Function` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CoefficientFunction`` 
    
    :param function: 
    :type function: :py:class:`NXOpen.CAE.Function` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    CoefficientType: ConnectorCoefficientTypes = ...
    """
    Returns or sets  the coefficient type 
    
    <hr>
    
    Getter Method
    
    Signature ``CoefficientType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.ConnectorCoefficientTypes` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CoefficientType`` 
    
    :param coefficientType: 
    :type coefficientType: :py:class:`NXOpen.Motion.ConnectorCoefficientTypes` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    CreateDamper: bool = ...
    """
    Returns or sets  the create damper toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``CreateDamper`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateDamper`` 
    
    :param createDamper: 
    :type createDamper: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    DamperAppDirection: ConnectorBuilderApplicationDirection = ...
    """
    Returns or sets  the application direction of damper 
    
    <hr>
    
    Getter Method
    
    Signature ``DamperAppDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.ConnectorBuilderApplicationDirection` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DamperAppDirection`` 
    
    :param appDirection: 
    :type appDirection: :py:class:`NXOpen.Motion.ConnectorBuilderApplicationDirection` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    DamperCustomizedSolver: bool = ...
    """
    Returns or sets  the option of using Customized Solver for damper
    
    <hr>
    
    Getter Method
    
    Signature ``DamperCustomizedSolver`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DamperCustomizedSolver`` 
    
    :param customizedSolver: 
    :type customizedSolver: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    DamperName: str = ...
    """
    Returns or sets  the damper dname 
    
    <hr>
    
    Getter Method
    
    Signature ``DamperName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DamperName`` 
    
    :param damperName: 
    :type damperName: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    FreeAngleExpression: NXOpen.Expression = ...
    """
    Returns  the free angle expression 
    
    <hr>
    
    Getter Method
    
    Signature ``FreeAngleExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX11.0.0
       Obtain the expression using :py:meth:`Motion.SpringBuilder.PreloadedAngleExpression` to query or edit it.
    
    License requirements: None.
    """
    FreeLengthExpression: NXOpen.Expression = ...
    """
    Returns  the free length expression 
    
    <hr>
    
    Getter Method
    
    Signature ``FreeLengthExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX11.0.0
       Obtain the expression using :py:meth:`Motion.SpringBuilder.PreloadedLengthExpression` to query or edit it.
    
    License requirements: None.
    """
    InitialLengthExpression: NXOpen.Expression = ...
    """
    Returns  the initial length expression for spring which attachs to slide joint
    
    <hr>
    
    Getter Method
    
    Signature ``InitialLengthExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    LengthFlag: bool = ...
    """
    Returns or sets  the length flag, if this flag is set to true, it will not update the preloaded length, if this flag 
    is set to false, it will update the preloaded length according to the installed length
    
    <hr>
    
    Getter Method
    
    Signature ``LengthFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LengthFlag`` 
    
    :param lengthFlag: 
    :type lengthFlag: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Name: str = ...
    """
    Returns or sets  the name 
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    PreloadAngleExpression: NXOpen.Expression = ...
    """
    Returns  the preload expression 
    
    <hr>
    
    Getter Method
    
    Signature ``PreloadAngleExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    .. deprecated::  NX11.0.0
       Obtain the expression using :py:meth:`Motion.SpringBuilder.ActuatorMomentExpression` to query or edit it.
    
    License requirements: None.
    """
    PreloadExpression: NXOpen.Expression = ...
    """
    Returns  the preload expression 
    
    <hr>
    
    Getter Method
    
    Signature ``PreloadExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    .. deprecated::  NX11.0.0
       Obtain the expression using :py:meth:`Motion.SpringBuilder.ActuatorForceExpression` to query or edit it.
    
    License requirements: None.
    """
    PreloadForceExpression: NXOpen.Expression = ...
    """
    Returns  the preload force expression 
    
    <hr>
    
    Getter Method
    
    Signature ``PreloadForceExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    .. deprecated::  NX12.0.0
       Obtain the expression using :py:meth:`Motion.SpringBuilder.ActuatorForceExpression` to query or edit it.
    
    License requirements: None.
    """
    PreloadMomentExpression: NXOpen.Expression = ...
    """
    Returns  the preload moment expression 
    
    <hr>
    
    Getter Method
    
    Signature ``PreloadMomentExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    .. deprecated::  NX12.0.0
       Obtain the expression using :py:meth:`Motion.SpringBuilder.ActuatorMomentExpression` to query or edit it.
    
    License requirements: None.
    """
    PreloadedAngleExpression: NXOpen.Expression = ...
    """
    Returns  the preloaded angle expression 
    
    <hr>
    
    Getter Method
    
    Signature ``PreloadedAngleExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    PreloadedLengthExpression: NXOpen.Expression = ...
    """
    Returns  the preloaded length expression 
    
    <hr>
    
    Getter Method
    
    Signature ``PreloadedLengthExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    SpringAppDirection: ConnectorBuilderApplicationDirection = ...
    """
    Returns or sets  the application direction for damper
    
    <hr>
    
    Getter Method
    
    Signature ``SpringAppDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.ConnectorBuilderApplicationDirection` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SpringAppDirection`` 
    
    :param springAppDirection: 
    :type springAppDirection: :py:class:`NXOpen.Motion.ConnectorBuilderApplicationDirection` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SpringCustomizedSolver: bool = ...
    """
    Returns or sets  the option of using Customized Solver for damper
    
    <hr>
    
    Getter Method
    
    Signature ``SpringCustomizedSolver`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SpringCustomizedSolver`` 
    
    :param springCustomizedSolver: 
    :type springCustomizedSolver: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    StiffnessCurveProfile: SelectFieldData = ...
    """
    Returns  the stiffness 2D profile.  
    
    Only valid if :py:class:`MotionConnectorCoefficientTypes.Profile2d <MotionConnectorCoefficientTypes>`
    or :py:class:`MotionConnectorCoefficientTypes.ExpressionAndProfile2d <MotionConnectorCoefficientTypes>` is set. 
    
    <hr>
    
    Getter Method
    
    Signature ``StiffnessCurveProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectFieldData` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    StiffnessExpression: NXOpen.Expression = ...
    """
    Returns  the stiffness expression 
    
    <hr>
    
    Getter Method
    
    Signature ``StiffnessExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    StiffnessFunction: NXOpen.CAE.Function = ...
    """
    Returns or sets  the function tag.  
    
    On Adams and Recurdyn, only valid if :py:class:`MotionConnectorCoefficientTypes.Spline <MotionConnectorCoefficientTypes>` is set
    
    <hr>
    
    Getter Method
    
    Signature ``StiffnessFunction`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CAE.Function` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StiffnessFunction`` 
    
    :param function: 
    :type function: :py:class:`NXOpen.CAE.Function` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    StiffnessSurfaceProfile: SelectFieldData = ...
    """
    Returns  the stiffness 3D profile.  
    
    Only valid if :py:class:`MotionConnectorCoefficientTypes.Profile3d <MotionConnectorCoefficientTypes>`
    or :py:class:`MotionConnectorCoefficientTypes.ExpressionAndProfile3d <MotionConnectorCoefficientTypes>` is set. 
    
    <hr>
    
    Getter Method
    
    Signature ``StiffnessSurfaceProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectFieldData` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    StiffnessType: ConnectorCoefficientTypes = ...
    """
    Returns or sets  the stiffness type 
    
    <hr>
    
    Getter Method
    
    Signature ``StiffnessType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.ConnectorCoefficientTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StiffnessType`` 
    
    :param stiffnessType: 
    :type stiffnessType: :py:class:`NXOpen.Motion.ConnectorCoefficientTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    TorsionalCoefficientExpression: NXOpen.Expression = ...
    """
    Returns  the torsional coefficient expression 
    
    <hr>
    
    Getter Method
    
    Signature ``TorsionalCoefficientExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    TorsionalStiffnessExpression: NXOpen.Expression = ...
    """
    Returns  the torsional stiffness expression 
    
    <hr>
    
    Getter Method
    
    Signature ``TorsionalStiffnessExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: SpringBuilder = ...  # unknown typename


class ControlOutputCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Control Output objects   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Motion.MotionManager`
    
    .. versionadded:: NX11.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateControlOutputBuilder(self, controlOutput: ControlOutput) -> ControlOutputBuilder:
        """
        Creates a :py:class:`NXOpen.Motion.ControlOutputBuilder`  
        
        Signature ``CreateControlOutputBuilder(controlOutput)`` 
        
        :param controlOutput:  :py:class:`NXOpen.Motion.ControlOutput` to be edited  
        :type controlOutput: :py:class:`NXOpen.Motion.ControlOutput` 
        :returns:  ControlOutput object  
        :rtype: :py:class:`NXOpen.Motion.ControlOutputBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def FindObject(self, name: str) -> ControlOutput:
        """
        Finds the :py:class:`NXOpen.Motion.ControlOutput` object with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Motion.ControlOutput`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Motion.ControlOutput` with this name.  
        :rtype: :py:class:`NXOpen.Motion.ControlOutput` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    


class BushingCylindricalCoefficientTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BushingCylindricalCoefficientTypes():
    """
    Definitions of bushing cylindrical coefficient component type 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Stiffness", "stiffness type"
       "Damping", "damping type"
       "Preload", "preload type"
    """
    Stiffness = 0  # BushingCylindricalCoefficientTypesMemberType
    Damping = 1  # BushingCylindricalCoefficientTypesMemberType
    Preload = 2  # BushingCylindricalCoefficientTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ControlInput(MotionObject):
    """
    Represents a Control Input motion object.  
    
    Control input can measure multiple kinematic variables
    between links and it can create multiple ports to store the value of each measured kinematic variable. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Motion.ControlInputBuilder`
    
    .. versionadded:: NX11.0.0
    """
    ControlPorts: ControlPortCollection = ...
    """
    Returns the :py:class:`Motion.ControlPortCollection` belonging to this element 
    
    Signature ``ControlPorts`` 
    
    .. versionadded:: NX11.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.ControlPortCollection`
    """
    Null: ControlInput = ...  # unknown typename


class PMDCMotor(Motor):
    """
    Represents a motion pmdc motor object   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Motion.PMDCMotorBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: PMDCMotor = ...  # unknown typename


class CouplerCable(Coupler):
    """
    Represents a motion cable object   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Motion.CouplerCableBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: CouplerCable = ...  # unknown typename


class SplineBeam(MotionObject, IGraphSource):
    """
    Represents a SplineBeam   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Motion.SplineBeamBuilder`
    
    .. versionadded:: NX12.0.0
    """
    Null: SplineBeam = ...  # unknown typename


class SubmechanismPositionerCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Submechanmism Positioner objects   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Motion.MotionManager`
    
    .. versionadded:: NX12.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreatePositionerBuilder(self, positioner: SubmechanismPositioner) -> SubmechanismPositionerBuilder:
        """
        Creates a :py:class:`NXOpen.Motion.SubmechanismPositionerBuilder`  
        
        Signature ``CreatePositionerBuilder(positioner)`` 
        
        :param positioner:  :py:class:`NXOpen.Motion.SubmechanismPositioner` to be edited  
        :type positioner: :py:class:`NXOpen.Motion.SubmechanismPositioner` 
        :returns:  SubmechanismPositionerBuilder object  
        :rtype: :py:class:`NXOpen.Motion.SubmechanismPositionerBuilder` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def FindObject(self, name: str) -> SubmechanismPositioner:
        """
        Finds the :py:class:`NXOpen.Motion.SubmechanismPositioner` object with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Motion.SubmechanismPositioner`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Motion.SubmechanismPositioner` with this name.  
        :rtype: :py:class:`NXOpen.Motion.SubmechanismPositioner` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    


class PointOnSurface(MotionObject, IGraphSource):
    """
    Represents a point on surface motion object  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Motion.PointOnSurfaceBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: PointOnSurface = ...  # unknown typename


class BushingGeneralCoefficients(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a Motion BushingGeneralCoefficients
    
    .. versionadded:: NX6.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    DampingCoefficients: BushingGeneralCoefficientsComponent = ...
    """
    Returns  the damping coefficients, it is used in :py:class:`Motion.BushingBuilderBushingTypes.General <Motion.BushingBuilderBushingTypes>` case 
    
    <hr>
    
    Getter Method
    
    Signature ``DampingCoefficients`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.BushingGeneralCoefficientsComponent` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    PreloadCoefficients: BushingGeneralCoefficientsComponent = ...
    """
    Returns  the preload coefficients, it is used in :py:class:`Motion.BushingBuilderBushingTypes.General <Motion.BushingBuilderBushingTypes>` case.  
    
    Preload properties only linear is supported
    
    <hr>
    
    Getter Method
    
    Signature ``PreloadCoefficients`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.BushingGeneralCoefficientsComponent` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    StiffnessCoefficients: BushingGeneralCoefficientsComponent = ...
    """
    Returns  the stiffness coefficients, it is used in :py:class:`Motion.BushingBuilderBushingTypes.General <Motion.BushingBuilderBushingTypes>` case 
    
    <hr>
    
    Getter Method
    
    Signature ``StiffnessCoefficients`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.BushingGeneralCoefficientsComponent` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: BushingGeneralCoefficients = ...  # unknown typename


class LoadTransferControl(NXOpen.NXObject):
    """
    Represents the :py:class:`NXOpen.Motion.LoadTransferControl`   
    
    No support for KF
    
    .. versionadded:: NX9.0.0
    """
    
    def SetRigidLink(self, link: Link) -> None:
        """
        Sets rigid link 
        
        Signature ``SetRigidLink(link)`` 
        
        :param link: 
        :type link: :py:class:`NXOpen.Motion.Link` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def SetFlexibleLink(self, link: FlexBody) -> None:
        """
        Sets flexible link 
        
        Signature ``SetFlexibleLink(link)`` 
        
        :param link: 
        :type link: :py:class:`NXOpen.Motion.FlexBody` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def SetSplineBeam(self, link: SplineBeam) -> None:
        """
        Sets spline beam 
        
        Signature ``SetSplineBeam(link)`` 
        
        :param link: 
        :type link: :py:class:`NXOpen.Motion.SplineBeam` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def SetViewPort(self, viewPort: int) -> None:
        """
        Sets view port 
        
        Signature ``SetViewPort(viewPort)`` 
        
        :param viewPort: 
        :type viewPort: int 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def SetLoadVectorScale(self, scale: float, updateDisplay: bool) -> None:
        """
        Sets load vector scale 
        
        Signature ``SetLoadVectorScale(scale, updateDisplay)`` 
        
        :param scale: 
        :type scale: float 
        :param updateDisplay: 
        :type updateDisplay: bool 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def SetAnimationCurrentStep(self, step: int) -> None:
        """
        Sets current step in animation 
        
        Signature ``SetAnimationCurrentStep(step)`` 
        
        :param step: 
        :type step: int 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def AnimationStepForward(self) -> None:
        """
        Moves animation one step forward 
        
        Signature ``AnimationStepForward()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def AnimationStepBackward(self) -> None:
        """
        Moves animation one step backward 
        
        Signature ``AnimationStepBackward()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def PlayAnimation(self) -> None:
        """
        Plays animation 
        
        Signature ``PlayAnimation()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def StopAnimation(self) -> None:
        """
        Stops animation 
        
        Signature ``StopAnimation()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def UpdateFromSpreadsheet(self) -> None:
        """
        Moves animation to cell position selected in spreadsheet 
        
        Signature ``UpdateFromSpreadsheet()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def ExportToSpreadsheet(self) -> None:
        """
        Exports load transfer details to spreadsheet 
        
        Signature ``ExportToSpreadsheet()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def Finish(self) -> None:
        """
        Closes the load transfer control 
        
        Signature ``Finish()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    Null: LoadTransferControl = ...  # unknown typename


class JointDefineTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class JointDefineType():
    """
    Joint define type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Revolute", "This joint type is a single axis rotation. This joint removes 5 degrees of freedom. The origins of csys_1 and csys_2 are identical and the z axes of csys_1 and csys_2 are collinear and codirected."
       "Slider", "This joint type is a single translation. This joint removes 5 degrees of freedom. The orientations of csys_1 and csys_2 are identical and the z axes are collinear and codirected."
       "Cylindrical", "This joint type is a single rotation and a single translation. This joint removes 4 degrees of freedom. The z axes of csys_1 and csys_2 are collinear and codirected"
       "Screw", "This joint type is used to couple the rotation and translation of a cylindrical joint to remove one degree of freedom. It should be created on the same pair of links as the cylindrical joint. If the screw joint needs to be driven, it may be coupled with a revolution joint and a slider joint instead."
       "Universal", "This joint type allows two rotations. It removes 4 degrees of freedom. The origins of csys_1 and csys_2 are identical. The rotations about the x axis of csys_2 are equal and opposite to the rotations about the x axis of csys_1."
       "Spherical", "This joint type allows three rotations. It removes 3 degrees of freedom. The origins of csys_1 and csys_2 are identical"
       "Planar", "This joint type allows a single rotation and two translations. It removes three degrees of freedom. The z axes of csys_1 and csys_2 are parallel and codirected. The origins of csys_1 and csys_2 are in a common xy-plane."
       "Fixed", "This Joint fixes a link or weld two links, It removes 6 degrees of freedom"
       "Constantvelocity", "This joint type allows 2 rotational degrees of freedom, rotation about both z axes of the joint markers, Rotation about the second marker's z-axis is equal and opposite to the first marker's rotation. A constant velocity joint is similar to a universal joint, but the exit angle of a constant velocity joint is equal to the entry angle.The origins of csys_1 and csys_2 are identical."
       "Atpoint", "This joint type allows 3 DOF: Markers are always coincident, and only rotational motion is allowed."
       "Inline", "This joint type indicates a four degrees of freedom (3R + 1T DOF) primitive that allows one translational and three rotational motions of one part with respect to another.One part so that it can only move along a straight line defined on a second part. The location of the inline joint on the first part must remain on the z-axis of the second part."
       "Inplane", "One part so that it can only move in a plane of a second part. The origin of the inplane joint on the first part must remain in the xy-plane of the second part. Indicates a five degrees of freedom (3R + 2T DOF) primitive that allows both translational and rotational motion of one part with respect to another.For an inplane primitive, Adams/Solver imposes one translational constraint, which confines the translational motion of the I marker to the xy-plane of the J marker."
       "Orientation", "The coordinate system of one part so that it cannot rotate with respect to a second part. The axes of the coordinate systems must maintain the same orientation. The location of the origins of the coordinate systems does not matter. Indicates a three degrees of freedom (3T DOF) primitive that allows only translational motion of one part with respect to another . For an orientation primitive, Solver imposes three rotational constraints to keep the orientation of the I marker identical to the orientation of the J marker."
       "Parallel", "This joint type indicates a four degrees of freedom(1R + 3T DOF) primitive that allows both translational and rotational motion of one part with respect to another . For a parallel axes primitive, Solver imposes two rotational constraints so that the z-axis of the I marker stays parallel to the z-axis of the J marker. This primitive permits relative rotation about the common z-axis of I and J and permits all relative displacements."
       "Perpendicular", "This joint type indicates a five degrees of freedom (2R +3T DOF) primitive that allows both translational and rotational motion of one part with respect to Another. For a perpendicular primitive, Solver imposes a single rotational constraint on the I and the J markers so that their z-axes remain perpendicular. This allows relative rotations about either z-axis, but does not allow any relative rotation in the direction perpendicular to both z-axes."
    """
    Revolute = 0  # JointDefineTypeMemberType
    Slider = 1  # JointDefineTypeMemberType
    Cylindrical = 2  # JointDefineTypeMemberType
    Screw = 3  # JointDefineTypeMemberType
    Universal = 4  # JointDefineTypeMemberType
    Spherical = 5  # JointDefineTypeMemberType
    Planar = 6  # JointDefineTypeMemberType
    Fixed = 7  # JointDefineTypeMemberType
    Constantvelocity = 8  # JointDefineTypeMemberType
    Atpoint = 9  # JointDefineTypeMemberType
    Inline = 10  # JointDefineTypeMemberType
    Inplane = 11  # JointDefineTypeMemberType
    Orientation = 12  # JointDefineTypeMemberType
    Parallel = 13  # JointDefineTypeMemberType
    Perpendicular = 14  # JointDefineTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class JointDefineOrientationTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class JointDefineOrientationType():
    """
    Defines the orientation type of joint 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Vector", "Vector orientation type"
       "Csys", "CSYS orientation type"
    """
    Vector = 0  # JointDefineOrientationTypeMemberType
    Csys = 1  # JointDefineOrientationTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class JointDefineScrewJointMethodTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class JointDefineScrewJointMethodType():
    """
    Defines the method type of screw joints 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Ratio", "Ratio method"
       "Displacementcurve", "Displacement curve method"
    """
    Ratio = 0  # JointDefineScrewJointMethodTypeMemberType
    Displacementcurve = 1  # JointDefineScrewJointMethodTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class JointDefineScrewJointRatioTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class JointDefineScrewJointRatioType():
    """
    Defines the ratio type for screw joints 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Expression", "Expression type"
       "Spline", "Spline type"
       "Profile", "Profile type"
    """
    Expression = 0  # JointDefineScrewJointRatioTypeMemberType
    Spline = 1  # JointDefineScrewJointRatioTypeMemberType
    Profile = 2  # JointDefineScrewJointRatioTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class JointDefineScrewJointDisplCurveTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class JointDefineScrewJointDisplCurveType():
    """
    Defines the displacement curve type for screw joints 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Spline", "Spline type"
       "Profile", "Profile type"
    """
    Spline = 0  # JointDefineScrewJointDisplCurveTypeMemberType
    Profile = 1  # JointDefineScrewJointDisplCurveTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class JointDefineUniversalJointAxisTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class JointDefineUniversalJointAxisType():
    """
    Defines the axis type for universal joints 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Rotational", "Rotational Axis Type"
       "CrossPin", "Cross Pin Axis Type"
    """
    Rotational = 0  # JointDefineUniversalJointAxisTypeMemberType
    CrossPin = 1  # JointDefineUniversalJointAxisTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class JointDefine(NXOpen.TaggedObject):
    """
    Represents a joint define object   
    
    .. versionadded:: NX5.0.0
    """
    
    class Type():
        """
        Joint define type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Revolute", "This joint type is a single axis rotation. This joint removes 5 degrees of freedom. The origins of csys_1 and csys_2 are identical and the z axes of csys_1 and csys_2 are collinear and codirected."
           "Slider", "This joint type is a single translation. This joint removes 5 degrees of freedom. The orientations of csys_1 and csys_2 are identical and the z axes are collinear and codirected."
           "Cylindrical", "This joint type is a single rotation and a single translation. This joint removes 4 degrees of freedom. The z axes of csys_1 and csys_2 are collinear and codirected"
           "Screw", "This joint type is used to couple the rotation and translation of a cylindrical joint to remove one degree of freedom. It should be created on the same pair of links as the cylindrical joint. If the screw joint needs to be driven, it may be coupled with a revolution joint and a slider joint instead."
           "Universal", "This joint type allows two rotations. It removes 4 degrees of freedom. The origins of csys_1 and csys_2 are identical. The rotations about the x axis of csys_2 are equal and opposite to the rotations about the x axis of csys_1."
           "Spherical", "This joint type allows three rotations. It removes 3 degrees of freedom. The origins of csys_1 and csys_2 are identical"
           "Planar", "This joint type allows a single rotation and two translations. It removes three degrees of freedom. The z axes of csys_1 and csys_2 are parallel and codirected. The origins of csys_1 and csys_2 are in a common xy-plane."
           "Fixed", "This Joint fixes a link or weld two links, It removes 6 degrees of freedom"
           "Constantvelocity", "This joint type allows 2 rotational degrees of freedom, rotation about both z axes of the joint markers, Rotation about the second marker's z-axis is equal and opposite to the first marker's rotation. A constant velocity joint is similar to a universal joint, but the exit angle of a constant velocity joint is equal to the entry angle.The origins of csys_1 and csys_2 are identical."
           "Atpoint", "This joint type allows 3 DOF: Markers are always coincident, and only rotational motion is allowed."
           "Inline", "This joint type indicates a four degrees of freedom (3R + 1T DOF) primitive that allows one translational and three rotational motions of one part with respect to another.One part so that it can only move along a straight line defined on a second part. The location of the inline joint on the first part must remain on the z-axis of the second part."
           "Inplane", "One part so that it can only move in a plane of a second part. The origin of the inplane joint on the first part must remain in the xy-plane of the second part. Indicates a five degrees of freedom (3R + 2T DOF) primitive that allows both translational and rotational motion of one part with respect to another.For an inplane primitive, Adams/Solver imposes one translational constraint, which confines the translational motion of the I marker to the xy-plane of the J marker."
           "Orientation", "The coordinate system of one part so that it cannot rotate with respect to a second part. The axes of the coordinate systems must maintain the same orientation. The location of the origins of the coordinate systems does not matter. Indicates a three degrees of freedom (3T DOF) primitive that allows only translational motion of one part with respect to another . For an orientation primitive, Solver imposes three rotational constraints to keep the orientation of the I marker identical to the orientation of the J marker."
           "Parallel", "This joint type indicates a four degrees of freedom(1R + 3T DOF) primitive that allows both translational and rotational motion of one part with respect to another . For a parallel axes primitive, Solver imposes two rotational constraints so that the z-axis of the I marker stays parallel to the z-axis of the J marker. This primitive permits relative rotation about the common z-axis of I and J and permits all relative displacements."
           "Perpendicular", "This joint type indicates a five degrees of freedom (2R +3T DOF) primitive that allows both translational and rotational motion of one part with respect to Another. For a perpendicular primitive, Solver imposes a single rotational constraint on the I and the J markers so that their z-axes remain perpendicular. This allows relative rotations about either z-axis, but does not allow any relative rotation in the direction perpendicular to both z-axes."
        """
        Revolute = 0  # JointDefineTypeMemberType
        Slider = 1  # JointDefineTypeMemberType
        Cylindrical = 2  # JointDefineTypeMemberType
        Screw = 3  # JointDefineTypeMemberType
        Universal = 4  # JointDefineTypeMemberType
        Spherical = 5  # JointDefineTypeMemberType
        Planar = 6  # JointDefineTypeMemberType
        Fixed = 7  # JointDefineTypeMemberType
        Constantvelocity = 8  # JointDefineTypeMemberType
        Atpoint = 9  # JointDefineTypeMemberType
        Inline = 10  # JointDefineTypeMemberType
        Inplane = 11  # JointDefineTypeMemberType
        Orientation = 12  # JointDefineTypeMemberType
        Parallel = 13  # JointDefineTypeMemberType
        Perpendicular = 14  # JointDefineTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class OrientationType():
        """
        Defines the orientation type of joint 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Vector", "Vector orientation type"
           "Csys", "CSYS orientation type"
        """
        Vector = 0  # JointDefineOrientationTypeMemberType
        Csys = 1  # JointDefineOrientationTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ScrewJointMethodType():
        """
        Defines the method type of screw joints 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Ratio", "Ratio method"
           "Displacementcurve", "Displacement curve method"
        """
        Ratio = 0  # JointDefineScrewJointMethodTypeMemberType
        Displacementcurve = 1  # JointDefineScrewJointMethodTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ScrewJointRatioType():
        """
        Defines the ratio type for screw joints 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Expression", "Expression type"
           "Spline", "Spline type"
           "Profile", "Profile type"
        """
        Expression = 0  # JointDefineScrewJointRatioTypeMemberType
        Spline = 1  # JointDefineScrewJointRatioTypeMemberType
        Profile = 2  # JointDefineScrewJointRatioTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ScrewJointDisplCurveType():
        """
        Defines the displacement curve type for screw joints 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Spline", "Spline type"
           "Profile", "Profile type"
        """
        Spline = 0  # JointDefineScrewJointDisplCurveTypeMemberType
        Profile = 1  # JointDefineScrewJointDisplCurveTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class UniversalJointAxisType():
        """
        Defines the axis type for universal joints 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Rotational", "Rotational Axis Type"
           "CrossPin", "Cross Pin Axis Type"
        """
        Rotational = 0  # JointDefineUniversalJointAxisTypeMemberType
        CrossPin = 1  # JointDefineUniversalJointAxisTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AxisType: JointDefineUniversalJointAxisType = ...
    """
    Returns or sets  the axis type.  
    
    Used only when joint subtype is 
    :py:class:` Motion.JointDefineType.Universal  < Motion.JointDefineType>` 
    
    <hr>
    
    Getter Method
    
    Signature ``AxisType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.JointDefineUniversalJointAxisType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``AxisType`` 
    
    :param axisType: 
    :type axisType: :py:class:`NXOpen.Motion.JointDefineUniversalJointAxisType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    DisplCurveType: JointDefineScrewJointDisplCurveType = ...
    """
    Returns or sets  the displacemnet curve type of a screw joint 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplCurveType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.JointDefineScrewJointDisplCurveType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplCurveType`` 
    
    :param displCurveType: 
    :type displCurveType: :py:class:`NXOpen.Motion.JointDefineScrewJointDisplCurveType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    DisplayScale: float = ...
    """
    Returns or sets  the display scale 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayScale`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayScale`` 
    
    :param displayScale: 
    :type displayScale: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ExcludeRxConstraint: bool = ...
    """
    Returns or sets  the options of excluded rx constraint.  
    
    Used only when joint subtype is 
    :py:class:` Motion.JointDefineType.Fixed  < Motion.JointDefineType>` 
    
    <hr>
    
    Getter Method
    
    Signature ``ExcludeRxConstraint`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``ExcludeRxConstraint`` 
    
    :param excludeRxConstraint: 
    :type excludeRxConstraint: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ExcludeRyConstraint: bool = ...
    """
    Returns or sets  the option of excluded ry constraint.  
    
    Used only when joint subtype is 
    :py:class:` Motion.JointDefineType.Fixed  < Motion.JointDefineType>` 
    
    <hr>
    
    Getter Method
    
    Signature ``ExcludeRyConstraint`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``ExcludeRyConstraint`` 
    
    :param excludeRyConstraint: 
    :type excludeRyConstraint: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ExcludeRzConstraint: bool = ...
    """
    Returns or sets  the options of excluded rz constraint.  
    
    Used only when joint subtype is 
    :py:class:` Motion.JointDefineType.Fixed  < Motion.JointDefineType>` 
    
    <hr>
    
    Getter Method
    
    Signature ``ExcludeRzConstraint`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``ExcludeRzConstraint`` 
    
    :param excludeRzConstraint: 
    :type excludeRzConstraint: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ExcludeXConstraint: bool = ...
    """
    Returns or sets  the options of excluded x constraint.  
    
    Used only when joint subtype is 
    :py:class:` Motion.JointDefineType.Fixed  < Motion.JointDefineType>` 
    
    <hr>
    
    Getter Method
    
    Signature ``ExcludeXConstraint`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``ExcludeXConstraint`` 
    
    :param excludeXConstraint: 
    :type excludeXConstraint: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ExcludeYConstraint: bool = ...
    """
    Returns or sets  the options of excluded y constraint.  
    
    Used only when joint subtype is 
    :py:class:` Motion.JointDefineType.Fixed  < Motion.JointDefineType>` 
    
    <hr>
    
    Getter Method
    
    Signature ``ExcludeYConstraint`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``ExcludeYConstraint`` 
    
    :param excludeYConstraint: 
    :type excludeYConstraint: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ExcludeZConstraint: bool = ...
    """
    Returns or sets  the options of excluded z constraint.  
    
    Used only when joint subtype is 
    :py:class:` Motion.JointDefineType.Fixed  < Motion.JointDefineType>` 
    
    <hr>
    
    Getter Method
    
    Signature ``ExcludeZConstraint`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``ExcludeZConstraint`` 
    
    :param excludeZConstraint: 
    :type excludeZConstraint: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    FirstCsys: NXOpen.CoordinateSystem = ...
    """
    Returns or sets  the CSYS of first link 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstCsys`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``FirstCsys`` 
    
    :param csys1: 
    :type csys1: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    FirstLink: Link = ...
    """
    Returns or sets  the first link object 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstLink`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.Link` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``FirstLink`` 
    
    :param link1: 
    :type link1: :py:class:`NXOpen.Motion.Link` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    FirstMatrix: NXOpen.NXMatrix = ...
    """
    Returns or sets  the matrix of first link 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstMatrix`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.NXMatrix` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``FirstMatrix`` 
    
    :param matrix1: 
    :type matrix1: :py:class:`NXOpen.NXMatrix` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    FirstOrientationType: JointDefineOrientationType = ...
    """
    Returns or sets  the first orientation type of joint 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstOrientationType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.JointDefineOrientationType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``FirstOrientationType`` 
    
    :param orientationType: 
    :type orientationType: :py:class:`NXOpen.Motion.JointDefineOrientationType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    FirstOrigin: NXOpen.Point = ...
    """
    Returns or sets  the origin of first link 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstOrigin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``FirstOrigin`` 
    
    :param origin1: 
    :type origin1: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    FirstVector: NXOpen.Direction = ...
    """
    Returns or sets  the direction of first link 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``FirstVector`` 
    
    :param vector1: 
    :type vector1: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    JointType: JointDefineType = ...
    """
    Returns or sets  the joint type 
    
    <hr>
    
    Getter Method
    
    Signature ``JointType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.JointDefineType` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``JointType`` 
    
    :param jointType: 
    :type jointType: :py:class:`NXOpen.Motion.JointDefineType` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    LimitsDefined: bool = ...
    """
    Returns or sets  the option of defining limits for joint 
    
    <hr>
    
    Getter Method
    
    Signature ``LimitsDefined`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`Motion.JointDefine.UpperLimitDefined` and :py:meth:`Motion.JointDefine.LowerLimitDefined` instead.
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``LimitsDefined`` 
    
    :param limitsDefined: 
    :type limitsDefined: bool 
    
    .. versionadded:: NX5.0.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`Motion.JointDefine.UpperLimitDefined` and :py:meth:`Motion.JointDefine.LowerLimitDefined` instead.
    
    License requirements: mechanisms ("MECHANISMS")
    """
    LowerLimitAngleExpression: NXOpen.Expression = ...
    """
    Returns  the lower limit angular expression.  
    
    Only used when limits option is TRUE 
    
    <hr>
    
    Getter Method
    
    Signature ``LowerLimitAngleExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    LowerLimitDefined: bool = ...
    """
    Returns or sets  the option of defining lower limit for joint 
    
    <hr>
    
    Getter Method
    
    Signature ``LowerLimitDefined`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``LowerLimitDefined`` 
    
    :param limitDefined: 
    :type limitDefined: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    LowerLimitExpression: NXOpen.Expression = ...
    """
    Returns  the lower limit expression.  
    
    Only used when limits option is TRUE 
    
    <hr>
    
    Getter Method
    
    Signature ``LowerLimitExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    MethodType: JointDefineScrewJointMethodType = ...
    """
    Returns or sets  the method type of a screw joint 
    
    <hr>
    
    Getter Method
    
    Signature ``MethodType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.JointDefineScrewJointMethodType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MethodType`` 
    
    :param methodType: 
    :type methodType: :py:class:`NXOpen.Motion.JointDefineScrewJointMethodType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    Name: str = ...
    """
    Returns or sets   the joint name 
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param jointName: 
    :type jointName: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    RatioType: JointDefineScrewJointRatioType = ...
    """
    Returns or sets  the ratio type of a screw joint 
    
    <hr>
    
    Getter Method
    
    Signature ``RatioType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.JointDefineScrewJointRatioType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RatioType`` 
    
    :param ratioType: 
    :type ratioType: :py:class:`NXOpen.Motion.JointDefineScrewJointRatioType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    RotationAllowed: bool = ...
    """
    Returns or sets  the options of allowing rotation.  
    
    Used only when joint subtype is 
    :py:class:` Motion.JointDefineType.Planar  < Motion.JointDefineType>` 
    
    <hr>
    
    Getter Method
    
    Signature ``RotationAllowed`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``RotationAllowed`` 
    
    :param rotationAllowed: 
    :type rotationAllowed: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ScrewDisplCurveFunction: NXOpen.CAE.Function = ...
    """
    Returns or sets  the displacement curve function tag.  
    
    Only valid for Simcenter Solver if method type is 
    :py:class:`Motion.JointDefineScrewJointMethodType.Displacementcurve <Motion.JointDefineScrewJointMethodType>` 
    
    <hr>
    
    Getter Method
    
    Signature ``ScrewDisplCurveFunction`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CAE.Function` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ScrewDisplCurveFunction`` 
    
    :param displCurveFunction: 
    :type displCurveFunction: :py:class:`NXOpen.CAE.Function` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    ScrewDisplCurveProfile: SelectFieldData = ...
    """
    Returns  the displacement curve Profile.  
    
    <hr>
    
    Getter Method
    
    Signature ``ScrewDisplCurveProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectFieldData` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    ScrewRatioExpression: NXOpen.Expression = ...
    """
    Returns  the screw ratio expression.  
    
    Used only when joint subtype is 
    :py:class:` Motion.JointDefineType.Screw  < Motion.JointDefineType>`.
    For Simcenter Solver, method type must be :py:class:` Motion.JointDefineScrewJointMethodType.Ratio  < Motion.JointDefineScrewJointMethodType>`  which is the pitch of a screw's thread,
    and ratio type must be :py:class:` Motion.JointDefineScrewJointRatioType.Expression  < Motion.JointDefineScrewJointRatioType>` 
    
    <hr>
    
    Getter Method
    
    Signature ``ScrewRatioExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ScrewRatioProfile: SelectFieldData = ...
    """
    Returns  the ratio Profile.  
    
    <hr>
    
    Getter Method
    
    Signature ``ScrewRatioProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectFieldData` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    ScrewSplineFunction: NXOpen.CAE.Function = ...
    """
    Returns or sets  the spline function tag.  
    
    Only valid for LMS solver if method type is :py:class:`Motion.JointDefineScrewJointMethodType.Ratio <Motion.JointDefineScrewJointMethodType>`,
    and ratio type is :py:class:`Motion.JointDefineScrewJointRatioType.Spline <Motion.JointDefineScrewJointRatioType>` 
    
    <hr>
    
    Getter Method
    
    Signature ``ScrewSplineFunction`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CAE.Function` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ScrewSplineFunction`` 
    
    :param splineFunction: 
    :type splineFunction: :py:class:`NXOpen.CAE.Function` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    SecondCsys: NXOpen.CoordinateSystem = ...
    """
    Returns or sets  the csys of second link 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondCsys`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``SecondCsys`` 
    
    :param csys2: 
    :type csys2: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SecondLink: Link = ...
    """
    Returns or sets  the second link 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondLink`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.Link` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``SecondLink`` 
    
    :param link2: 
    :type link2: :py:class:`NXOpen.Motion.Link` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SecondMatrix: NXOpen.NXMatrix = ...
    """
    Returns or sets  the matrix of second link 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondMatrix`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.NXMatrix` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``SecondMatrix`` 
    
    :param matrix2: 
    :type matrix2: :py:class:`NXOpen.NXMatrix` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SecondOrientationType: JointDefineOrientationType = ...
    """
    Returns or sets  the second orientation type of joint 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondOrientationType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.JointDefineOrientationType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``SecondOrientationType`` 
    
    :param orientationType: 
    :type orientationType: :py:class:`NXOpen.Motion.JointDefineOrientationType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SecondOrigin: NXOpen.Point = ...
    """
    Returns or sets  the origin of second link 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondOrigin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``SecondOrigin`` 
    
    :param origin2: 
    :type origin2: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SecondVector: NXOpen.Direction = ...
    """
    Returns or sets  the direction of second link 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``SecondVector`` 
    
    :param vector2: 
    :type vector2: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SnapLinks: bool = ...
    """
    Returns or sets  the option of snap links 
    
    <hr>
    
    Getter Method
    
    Signature ``SnapLinks`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``SnapLinks`` 
    
    :param snapLinks: 
    :type snapLinks: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    TranslationAllowed: bool = ...
    """
    Returns or sets  the options of allowing rotation.  
    
    Used only when joint subtype is 
    :py:class:` Motion.JointDefineType.Constantvelocity  < Motion.JointDefineType>` 
    
    <hr>
    
    Getter Method
    
    Signature ``TranslationAllowed`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``TranslationAllowed`` 
    
    :param translationAllowed: 
    :type translationAllowed: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    UpperLimitAngleExpression: NXOpen.Expression = ...
    """
    Returns  the upper limit angular expression.  
    
    Only used when limits option is TRUE 
    
    <hr>
    
    Getter Method
    
    Signature ``UpperLimitAngleExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    UpperLimitDefined: bool = ...
    """
    Returns or sets  the option of defining upper limit for joint 
    
    <hr>
    
    Getter Method
    
    Signature ``UpperLimitDefined`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``UpperLimitDefined`` 
    
    :param limitDefined: 
    :type limitDefined: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    UpperLimitExpression: NXOpen.Expression = ...
    """
    Returns  the upper limit expression.  
    
    Only used when limits option is TRUE 
    
    <hr>
    
    Getter Method
    
    Signature ``UpperLimitExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: JointDefine = ...  # unknown typename


class ScalarTorque(MotionObject, IGraphSource):
    """
    Represents the Motion ScalarTorque class.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Motion.ScalarTorqueBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: ScalarTorque = ...  # unknown typename


class JointDriver(MotionObject):
    """
    Represents a joint driver   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Motion.JointDriverBuilder`
    
    .. versionadded:: NX5.0.0
    """
    Null: JointDriver = ...  # unknown typename


class AnalyticalContactCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Analytical Contact objects   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Motion.MotionManager`
    
    .. versionadded:: NX12.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateAnalyticalContactBuilder(self, analyticalContact: AnalyticalContact) -> AnalyticalContactBuilder:
        """
        Creates a :py:class:`NXOpen.Motion.AnalyticalContactBuilder`  
        
        Signature ``CreateAnalyticalContactBuilder(analyticalContact)`` 
        
        :param analyticalContact:  :py:class:`NXOpen.Motion.AnalyticalContact` to be edited  
        :type analyticalContact: :py:class:`NXOpen.Motion.AnalyticalContact` 
        :returns:  AnalyticalContact object  
        :rtype: :py:class:`NXOpen.Motion.AnalyticalContactBuilder` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def FindObject(self, name: str) -> AnalyticalContact:
        """
        Finds the :py:class:`NXOpen.Motion.AnalyticalContact` object with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Motion.AnalyticalContact`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Motion.AnalyticalContact` with this name.  
        :rtype: :py:class:`NXOpen.Motion.AnalyticalContact` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    


class LinkCouplerCoupleBuilderMeasurementChoicesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LinkCouplerCoupleBuilderMeasurementChoices():
    """
    the Measurement type.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Translation", "Translation"
       "Rotation", "Rotation"
       "Distance", "Distance"
    """
    Translation = 0  # LinkCouplerCoupleBuilderMeasurementChoicesMemberType
    Rotation = 1  # LinkCouplerCoupleBuilderMeasurementChoicesMemberType
    Distance = 2  # LinkCouplerCoupleBuilderMeasurementChoicesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LinkCouplerCoupleBuilderScaleChoicesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LinkCouplerCoupleBuilderScaleChoices():
    """
    the Scale type.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Expression", "Expression"
       "Function", "Function"
       "Profile", "Profile"
    """
    Expression = 0  # LinkCouplerCoupleBuilderScaleChoicesMemberType
    Function = 1  # LinkCouplerCoupleBuilderScaleChoicesMemberType
    Profile = 2  # LinkCouplerCoupleBuilderScaleChoicesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LinkCouplerCoupleBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Motion.LinkCouplerCoupleBuilder`   
    
    .. versionadded:: NX12.0.0
    """
    
    class MeasurementChoices():
        """
        the Measurement type.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Translation", "Translation"
           "Rotation", "Rotation"
           "Distance", "Distance"
        """
        Translation = 0  # LinkCouplerCoupleBuilderMeasurementChoicesMemberType
        Rotation = 1  # LinkCouplerCoupleBuilderMeasurementChoicesMemberType
        Distance = 2  # LinkCouplerCoupleBuilderMeasurementChoicesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ScaleChoices():
        """
        the Scale type.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Expression", "Expression"
           "Function", "Function"
           "Profile", "Profile"
        """
        Expression = 0  # LinkCouplerCoupleBuilderScaleChoicesMemberType
        Function = 1  # LinkCouplerCoupleBuilderScaleChoicesMemberType
        Profile = 2  # LinkCouplerCoupleBuilderScaleChoicesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    ActionLinkAttachment: LinkAttachmentData = ...
    """
    Returns  the Action Link Attachment 
    
    <hr>
    
    Getter Method
    
    Signature ``ActionLinkAttachment`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.LinkAttachmentData` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    BaseLinkAttachment: LinkAttachmentData = ...
    """
    Returns  the Base Link Attachment 
    
    <hr>
    
    Getter Method
    
    Signature ``BaseLinkAttachment`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.LinkAttachmentData` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    MeasurementType: LinkCouplerCoupleBuilderMeasurementChoices = ...
    """
    Returns or sets  the measurement type 
    
    <hr>
    
    Getter Method
    
    Signature ``MeasurementType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.LinkCouplerCoupleBuilderMeasurementChoices` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``MeasurementType`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Motion.LinkCouplerCoupleBuilderMeasurementChoices` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ScaleExpression: NXOpen.Expression = ...
    """
    Returns  the scale expression 
    
    <hr>
    
    Getter Method
    
    Signature ``ScaleExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ScaleFunction: MotionFunction = ...
    """
    Returns or sets  the scale spline curve 
    
    <hr>
    
    Getter Method
    
    Signature ``ScaleFunction`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.MotionFunction` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``ScaleFunction`` 
    
    :param spline: 
    :type spline: :py:class:`NXOpen.Motion.MotionFunction` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ScaleProfile: SelectFieldData = ...
    """
    Returns  the profile 
    
    <hr>
    
    Getter Method
    
    Signature ``ScaleProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectFieldData` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ScaleType: LinkCouplerCoupleBuilderScaleChoices = ...
    """
    Returns or sets  the scale type 
    
    <hr>
    
    Getter Method
    
    Signature ``ScaleType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.LinkCouplerCoupleBuilderScaleChoices` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``ScaleType`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Motion.LinkCouplerCoupleBuilderScaleChoices` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: LinkCouplerCoupleBuilder = ...  # unknown typename


class TirePropertyMotorcycle(TireProperty):
    """
    Motorcycle Tire Property element.
    
    This is an object that contains parameters needed for the Motorcycle Tire model 
    To create or edit an instance of this class, use :py:class:`NXOpen.Motion.TirePropertyMotorcycleBuilder`
    
    .. versionadded:: NX11.0.0
    """
    
    def CopyParameters(self, source: TirePropertyMotorcycle) -> None:
        """
        Copy parameters from another :py:class:`Motion.TirePropertyMotorcycle` 
        
        Signature ``CopyParameters(source)`` 
        
        :param source: 
        :type source: :py:class:`NXOpen.Motion.TirePropertyMotorcycle` 
        
        .. versionadded:: NX11.0.0
        
        .. deprecated::  NX12.0.0
           Use :py:meth:`MotionMethods.CopyParameters` instead.
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    Null: TirePropertyMotorcycle = ...  # unknown typename


class ConfigurationTextParameter(ConfigurationParameter):
    """
    Represents a :py:class:`Motion.ConfigurationTextParameter`.  
    
    This class
    contains the port association for the output of a mechatronics element 
    No KF support
    
    .. versionadded:: NX11.0.0
    """
    ActualValue: str = ...
    """
    Returns or sets  the actual value 
    
    <hr>
    
    Getter Method
    
    Signature ``ActualValue`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``ActualValue`` 
    
    :param actualValue: 
    :type actualValue: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    InitialValue: str = ...
    """
    Returns  the initial value 
    
    <hr>
    
    Getter Method
    
    Signature ``InitialValue`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: ConfigurationTextParameter = ...  # unknown typename


class BushingSphericalCoefficients(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a Motion BushingSphericalCoefficients
    
    .. versionadded:: NX12.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    DampingCoefficients: BushingSphericalCoefficientsComponent = ...
    """
    Returns  the damping coefficients.  
    
    It is used in :py:class:`Motion.BushingBuilderBushingTypes.Spherical <Motion.BushingBuilderBushingTypes>` case 
    
    <hr>
    
    Getter Method
    
    Signature ``DampingCoefficients`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.BushingSphericalCoefficientsComponent` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    PreloadCoefficients: BushingSphericalCoefficientsComponent = ...
    """
    Returns  the preload coefficients.  
    
    It is used in :py:class:`Motion.BushingBuilderBushingTypes.Spherical <Motion.BushingBuilderBushingTypes>` case 
    
    <hr>
    
    Getter Method
    
    Signature ``PreloadCoefficients`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.BushingSphericalCoefficientsComponent` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    StiffnessCoefficients: BushingSphericalCoefficientsComponent = ...
    """
    Returns  the stiffness coefficients.  
    
    It is used in :py:class:`Motion.BushingBuilderBushingTypes.Spherical <Motion.BushingBuilderBushingTypes>` case 
    
    <hr>
    
    Getter Method
    
    Signature ``StiffnessCoefficients`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.BushingSphericalCoefficientsComponent` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    Null: BushingSphericalCoefficients = ...  # unknown typename


class SegmentCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Segment objects, only creation is supported   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Motion.Road`
    
    .. versionadded:: NX11.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def FindObject(self, name: str) -> Segment:
        """
        Finds the :py:class:`NXOpen.Motion.Segment` object with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  Name of the Segment object.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Motion.Segment` object with this name.  
        :rtype: :py:class:`NXOpen.Motion.Segment` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    


class CurveParameterizedTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CurveParameterizedTypes():
    """
    Defines curve parameterized type 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Curvature", "Curvature based type"
       "Spacing", "User defined spacing type"
    """
    Curvature = 0  # CurveParameterizedTypesMemberType
    Spacing = 1  # CurveParameterizedTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TirePropertyHighOrderParametersUnloadingVertStiffTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TirePropertyHighOrderParametersUnloadingVertStiffType():
    """
    The block type can be Function when a spline curve is used or
    Profile when a profile is used.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Function", " - "
       "Profile", " - "
    """
    Function = 0  # TirePropertyHighOrderParametersUnloadingVertStiffTypeMemberType
    Profile = 1  # TirePropertyHighOrderParametersUnloadingVertStiffTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TirePropertyHighOrderParameters(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a Tire Property builder for the High Order parameters used in Motorcycle and Basic properties.  
    
    .. versionadded:: NX11.0.0
    """
    
    class UnloadingVertStiffType():
        """
        The block type can be Function when a spline curve is used or
        Profile when a profile is used.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Function", " - "
           "Profile", " - "
        """
        Function = 0  # TirePropertyHighOrderParametersUnloadingVertStiffTypeMemberType
        Profile = 1  # TirePropertyHighOrderParametersUnloadingVertStiffTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    CarcassMass: NXOpen.Expression = ...
    """
    Returns  the carcass mass 
    
    <hr>
    
    Getter Method
    
    Signature ``CarcassMass`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    LateralDamping: NXOpen.Expression = ...
    """
    Returns  the lateral damping.  
    
    This parameter is only used in the :py:class:`Motion.TirePropertyBasic`.
    
    <hr>
    
    Getter Method
    
    Signature ``LateralDamping`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    LateralEffects: bool = ...
    """
    Returns or sets  the lateral effects 
    
    <hr>
    
    Getter Method
    
    Signature ``LateralEffects`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``LateralEffects`` 
    
    :param inValue: 
    :type inValue: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    LateralStiffness: NXOpen.Expression = ...
    """
    Returns  the lateral stiffness.  
    
    This parameter is only used in the :py:class:`Motion.TirePropertyBasic`.
    
    <hr>
    
    Getter Method
    
    Signature ``LateralStiffness`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    LongDamping: NXOpen.Expression = ...
    """
    Returns  the longitudinal damping 
    
    <hr>
    
    Getter Method
    
    Signature ``LongDamping`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    LongStiffness: NXOpen.Expression = ...
    """
    Returns  the longitudinal stiffness 
    
    <hr>
    
    Getter Method
    
    Signature ``LongStiffness`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    LongitudinalEffects: bool = ...
    """
    Returns or sets  the longitudinal effects 
    
    <hr>
    
    Getter Method
    
    Signature ``LongitudinalEffects`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``LongitudinalEffects`` 
    
    :param inValue: 
    :type inValue: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    RollMoment: bool = ...
    """
    Returns or sets  the roll moment.  
    
    This parameter is only used in the :py:class:`Motion.TirePropertyBasic`.
    It is a flag that indicates whether or not the roll moment term introduced by the
    lateral spring-damper should be calculated. This roll moment is caused by the
    lateral displacement of the tire patch when a lateral spring-damper (lateral stiff)
    is included in the tire model. If cornering table or cornering stiffness are used,
    and roll moment is set to "True", lateral stiffness is used to determine a lateral
    deflection that in turn is used to calculate a roll moment.
    
    <hr>
    
    Getter Method
    
    Signature ``RollMoment`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``RollMoment`` 
    
    :param inValue: 
    :type inValue: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    UnloadingVerticalStiffness: MotionFunction = ...
    """
    Returns or sets  the unloading vertical stiffness.  
    
    This parameter is only used in the :py:class:`Motion.TirePropertyBasic`.
    
    <hr>
    
    Getter Method
    
    Signature ``UnloadingVerticalStiffness`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.MotionFunction` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``UnloadingVerticalStiffness`` 
    
    :param func: 
    :type func: :py:class:`NXOpen.Motion.MotionFunction` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    UnloadingVerticalStiffnessProfile: SelectFieldData = ...
    """
    Returns  the Profile.  
    
    <hr>
    
    Getter Method
    
    Signature ``UnloadingVerticalStiffnessProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectFieldData` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    UnloadingVerticalStiffnessType: TirePropertyHighOrderParametersUnloadingVertStiffType = ...
    """
    Returns or sets  the type.  
    
    <hr>
    
    Getter Method
    
    Signature ``UnloadingVerticalStiffnessType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.TirePropertyHighOrderParametersUnloadingVertStiffType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``UnloadingVerticalStiffnessType`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Motion.TirePropertyHighOrderParametersUnloadingVertStiffType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    VerticalCarcassEffects: bool = ...
    """
    Returns or sets  the vertical carcass effects 
    
    <hr>
    
    Getter Method
    
    Signature ``VerticalCarcassEffects`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``VerticalCarcassEffects`` 
    
    :param inValue: 
    :type inValue: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    VerticalStiffnessTransVelocity: NXOpen.Expression = ...
    """
    Returns  the vertical stiffness transitional velocity stiffness 
    This parameter is only used in the :py:class:`Motion.TirePropertyBasic`.  
    
    <hr>
    
    Getter Method
    
    Signature ``VerticalStiffnessTransVelocity`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: TirePropertyHighOrderParameters = ...  # unknown typename


class JointDriverBuilder(MotionBuilder):
    """
    Represents a :py:class:`NXOpen.Motion.JointDriverBuilder`
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.JointDriverCollection.CreateJointDriverBuilder`
    
    .. versionadded:: NX5.0.0
    """
    DriverMultiOperations: DriverMultiOperations = ...
    """
    Returns  the driver operations 
    
    <hr>
    
    Getter Method
    
    Signature ``DriverMultiOperations`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.DriverMultiOperations` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Joint: NXOpen.SelectTaggedObject = ...
    """
    Returns  the joint 
    
    <hr>
    
    Getter Method
    
    Signature ``Joint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectTaggedObject` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Name: str = ...
    """
    Returns or sets  the name 
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: JointDriverBuilder = ...  # unknown typename


class FieldDataCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of motion joints   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Motion.MotionManager`
    
    .. versionadded:: NX11.0.1
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateFieldData(self, field: NXOpen.Fields.Field) -> FieldData:
        """
        Create the :py:class:`NXOpen.Motion.FieldData` object.  
        
        Signature ``CreateFieldData(field)`` 
        
        :param field: 
        :type field: :py:class:`NXOpen.Fields.Field` 
        :returns: 
        :rtype: :py:class:`NXOpen.Motion.FieldData` 
        
        .. versionadded:: NX11.0.1
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def FindObject(self, name: str) -> FieldData:
        """
        Finds the :py:class:`NXOpen.Motion.FieldData` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Motion.Bushing`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Motion.FieldData` with this name.  
        :rtype: :py:class:`NXOpen.Motion.FieldData` 
        
        .. versionadded:: NX11.0.1
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    


class PostProcessEnvelopeTolerance_Struct():
    """
    Contains settings for envelope tolerance .  
    
    Constructor: 
    NXOpen.Motion.PostProcess.EnvelopeTolerance()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    AccuracyMode: PostProcessEnvelopeAccuracyModes = ...
    """
    Accuracy mode.  
    
    :py:class:`Motion.PostProcessEnvelopeAccuracyModes`.
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Motion.PostProcessEnvelopeAccuracyModes`
    """
    ToleranceType: PostProcessEnvelopeToleranceTypes = ...
    """
    Indicates if envelopeTolerance is specified as percentage value or absolute value.  
    
    Used only if accurcayMode is :py:class:`Motion.PostProcessEnvelopeAccuracyModes.Custom  <Motion.PostProcessEnvelopeAccuracyModes>`. 
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Motion.PostProcessEnvelopeToleranceTypes`
    """
    Tolerance: float = ...
    """
    Tolerance value.  
    
    Used only if accurcayMode is :py:class:`Motion.PostProcessEnvelopeAccuracyModes.Custom  <Motion.PostProcessEnvelopeAccuracyModes>`. 
    <hr>
    
    Field Value
    Type:float
    """
    DecimationEnabled: bool = ...
    """
    Indicates if decimation is enabled or not.  
    
    Used only if accurcayMode is :py:class:`Motion.PostProcessEnvelopeAccuracyModes.Custom  <Motion.PostProcessEnvelopeAccuracyModes>`.
    <hr>
    
    Field Value
    Type:bool
    """
    DecimationFactor: float = ...
    """
    Specifies targeted decimation rate which is decimated body/original body.  
    
    Used only if accurcayMode is :py:class:`Motion.PostProcessEnvelopeAccuracyModes.Custom  <Motion.PostProcessEnvelopeAccuracyModes>`. 
    <hr>
    
    Field Value
    Type:float
    """
    DecimationMaxError: float = ...
    """
    Specifies max decimation error: (bigger than 0): percentage, (less than 0): absolute value.  
    
    Used only if accurcayMode is :py:class:`Motion.PostProcessEnvelopeAccuracyModes.Custom  <Motion.PostProcessEnvelopeAccuracyModes>`. 
    <hr>
    
    Field Value
    Type:float
    """


class BushingGeneralCoefficientsComponent(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a Motion BushingGeneralCoefficientsComponent
    
    .. versionadded:: NX6.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    CoefficientsType: ConnectorCoefficientTypes = ...
    """
    Returns or sets  the type will be constant or spline
    
    <hr>
    
    Getter Method
    
    Signature ``CoefficientsType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.ConnectorCoefficientTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CoefficientsType`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Motion.ConnectorCoefficientTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    XCoefficientsType: ConnectorCoefficientTypes = ...
    """
    Returns or sets  the xCoefficientsType type will be constant or spline
    
    <hr>
    
    Getter Method
    
    Signature ``XCoefficientsType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.ConnectorCoefficientTypes` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``XCoefficientsType`` 
    
    :param xCoefficientsType: 
    :type xCoefficientsType: :py:class:`NXOpen.Motion.ConnectorCoefficientTypes` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    XCurveProfile: SelectFieldData = ...
    """
    Returns  the component x curve profile.  
    
    It is available only when 
    :py:meth:`Motion.BushingGeneralCoefficientsComponent.XCoefficientsType` is set to :py:class:`MotionConnectorCoefficientTypes.Profile2d <MotionConnectorCoefficientTypes>` or
    :py:class:`MotionConnectorCoefficientTypes.ExpressionAndProfile2d <MotionConnectorCoefficientTypes>` 
    
    <hr>
    
    Getter Method
    
    Signature ``XCurveProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectFieldData` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    XExpression: NXOpen.Expression = ...
    """
    Returns  the x expression, it is available only when 
    :py:meth:`Motion.BushingGeneralCoefficientsComponent.XCoefficientsType` is set to :py:class:`MotionConnectorCoefficientTypes.Constant <MotionConnectorCoefficientTypes>` case 
    
    <hr>
    
    Getter Method
    
    Signature ``XExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    XFunction: NXOpen.CAE.Function = ...
    """
    Returns or sets  the component x function tag, it is available only when 
    :py:meth:`Motion.BushingGeneralCoefficientsComponent.XCoefficientsType` is set to :py:class:`MotionConnectorCoefficientTypes.Spline <MotionConnectorCoefficientTypes>` case 
    
    <hr>
    
    Getter Method
    
    Signature ``XFunction`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CAE.Function` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``XFunction`` 
    
    :param function: 
    :type function: :py:class:`NXOpen.CAE.Function` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    YCoefficientsType: ConnectorCoefficientTypes = ...
    """
    Returns or sets  the yCoefficientsType type will be constant or spline
    
    <hr>
    
    Getter Method
    
    Signature ``YCoefficientsType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.ConnectorCoefficientTypes` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``YCoefficientsType`` 
    
    :param yCoefficientsType: 
    :type yCoefficientsType: :py:class:`NXOpen.Motion.ConnectorCoefficientTypes` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    YCurveProfile: SelectFieldData = ...
    """
    Returns  the component y curve profile.  
    
    It is available only when 
    :py:meth:`Motion.BushingGeneralCoefficientsComponent.YCoefficientsType` is set to :py:class:`MotionConnectorCoefficientTypes.Profile2d <MotionConnectorCoefficientTypes>` or
    :py:class:`MotionConnectorCoefficientTypes.ExpressionAndProfile2d <MotionConnectorCoefficientTypes>` 
    
    <hr>
    
    Getter Method
    
    Signature ``YCurveProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectFieldData` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    YExpression: NXOpen.Expression = ...
    """
    Returns  the y expression, it is available only when 
    :py:meth:`Motion.BushingGeneralCoefficientsComponent.YCoefficientsType` is set to :py:class:`MotionConnectorCoefficientTypes.Constant <MotionConnectorCoefficientTypes>` case 
    
    <hr>
    
    Getter Method
    
    Signature ``YExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    YFunction: NXOpen.CAE.Function = ...
    """
    Returns or sets  the component y function tag, it is available only when 
    :py:meth:`Motion.BushingGeneralCoefficientsComponent.YCoefficientsType` is set to :py:class:`MotionConnectorCoefficientTypes.Spline <MotionConnectorCoefficientTypes>` case 
    
    <hr>
    
    Getter Method
    
    Signature ``YFunction`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CAE.Function` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``YFunction`` 
    
    :param function: 
    :type function: :py:class:`NXOpen.CAE.Function` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ZCoefficientsType: ConnectorCoefficientTypes = ...
    """
    Returns or sets  the zCoefficientsType type will be constant or spline
    
    <hr>
    
    Getter Method
    
    Signature ``ZCoefficientsType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.ConnectorCoefficientTypes` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ZCoefficientsType`` 
    
    :param zCoefficientsType: 
    :type zCoefficientsType: :py:class:`NXOpen.Motion.ConnectorCoefficientTypes` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ZCurveProfile: SelectFieldData = ...
    """
    Returns  the component z curve profile.  
    
    It is available only when 
    :py:meth:`Motion.BushingGeneralCoefficientsComponent.ZCoefficientsType` is set to :py:class:`MotionConnectorCoefficientTypes.Profile2d <MotionConnectorCoefficientTypes>` or
    :py:class:`MotionConnectorCoefficientTypes.ExpressionAndProfile2d <MotionConnectorCoefficientTypes>` 
    
    <hr>
    
    Getter Method
    
    Signature ``ZCurveProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectFieldData` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ZExpression: NXOpen.Expression = ...
    """
    Returns  the z expression, it is available only when 
    :py:meth:`Motion.BushingGeneralCoefficientsComponent.ZCoefficientsType` is set to :py:class:`MotionConnectorCoefficientTypes.Constant <MotionConnectorCoefficientTypes>` case 
    
    <hr>
    
    Getter Method
    
    Signature ``ZExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ZFunction: NXOpen.CAE.Function = ...
    """
    Returns or sets  the component z function tag, it is available only when 
    :py:meth:`Motion.BushingGeneralCoefficientsComponent.ZCoefficientsType` is set to :py:class:`MotionConnectorCoefficientTypes.Spline <MotionConnectorCoefficientTypes>` case 
    
    <hr>
    
    Getter Method
    
    Signature ``ZFunction`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CAE.Function` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ZFunction`` 
    
    :param function: 
    :type function: :py:class:`NXOpen.CAE.Function` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: BushingGeneralCoefficientsComponent = ...  # unknown typename


class SpreadsheetRunControl(PostControl):
    """
    Represents the :py:class:`NXOpen.Motion.SpreadsheetRunControl`   
    
    An instance of this class can not be obtained
    
    .. versionadded:: NX9.0.0
    """
    
    def Finish(self) -> None:
        """
        SpreadsheetRun finish 
        
        Signature ``Finish()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def StepTo(self, step: int) -> None:
        """
        SpreadsheetRun step to special step 
        
        Signature ``StepTo(step)`` 
        
        :param step:  This is the step number in spreadsheet. If the step number = -1, the system will use the current position in spreadsheet. 
        :type step: int 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def Solve(self) -> None:
        """
        SpreadsheetRun solve function 
        
        Signature ``Solve()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def StepForward(self) -> None:
        """
        SpreadsheetRun step forward 
        
        Signature ``StepForward()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def StepBackward(self) -> None:
        """
        SpreadsheetRun step backward 
        
        Signature ``StepBackward()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def StepToDesignPosition(self) -> None:
        """
        SpreadsheetRun to design position 
        
        Signature ``StepToDesignPosition()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def StepToAssemblyPosition(self) -> None:
        """
        SpreadsheetRun to assembly position 
        
        Signature ``StepToAssemblyPosition()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def Stop(self) -> None:
        """
        SpreadsheetRun stop 
        
        Signature ``Stop()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def UpdateFromSpreadsheet(self) -> None:
        """
        SpreadsheetRun update from spreadsheet 
        
        Signature ``UpdateFromSpreadsheet()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def QuitSpreadsheet(self) -> None:
        """
        Quit spreadsheet 
        
        Signature ``QuitSpreadsheet()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    ActiveView: ActiveView = ...
    """
    Returns or sets  the active view 
    
    <hr>
    
    Getter Method
    
    Signature ``ActiveView`` 
    
    :returns:  The spreadsheet run active view  
    :rtype: :py:class:`NXOpen.Motion.ActiveView` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``ActiveView`` 
    
    :param activeView: 
    :type activeView: :py:class:`NXOpen.Motion.ActiveView` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Delay: int = ...
    """
    Returns or sets  the spreadsheet run delay 
    
    <hr>
    
    Getter Method
    
    Signature ``Delay`` 
    
    :returns:  The spreadsheet run delay  
    :rtype: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Delay`` 
    
    :param delay: 
    :type delay: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    JointsLimits: bool = ...
    """
    Returns or sets  the spreadsheet run joint limits setting 
    
    <hr>
    
    Getter Method
    
    Signature ``JointsLimits`` 
    
    :returns:  The joint limits on/off flag setting  
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``JointsLimits`` 
    
    :param jointLimits: 
    :type jointLimits: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    PlayMode: int = ...
    """
    Returns or sets  the spreadsheet run play mode 
    
    <hr>
    
    Getter Method
    
    Signature ``PlayMode`` 
    
    :returns:  The spreadsheet run play mode  
    :rtype: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``PlayMode`` 
    
    :param mode: 
    :type mode: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: SpreadsheetRunControl = ...  # unknown typename


class AdvancedSolution(MotionSolution):
    """
    Represents a :py:class:`Motion.AdvancedSolution`.  
    
    This class
    exposes the Advanced Solution Element. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Motion.AdvancedSolutionBuilder`
    
    .. versionadded:: NX12.0.0
    """
    Null: AdvancedSolution = ...  # unknown typename


class SignalChartListItemTimerMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SignalChartListItemTimer():
    """
    time sensor  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Timer", "Timer"
       "AbsoluteTime", "Absolute time"
       "Undefined", "Undefined, undefined timer for the sensor signal"
    """
    Timer = 0  # SignalChartListItemTimerMemberType
    AbsoluteTime = 1  # SignalChartListItemTimerMemberType
    Undefined = 2  # SignalChartListItemTimerMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SignalChartListItemConditionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SignalChartListItemCondition():
    """
    signal chart list item condition  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "LessThan", "Less than"
       "GreaterThan", "Greater than"
    """
    LessThan = 0  # SignalChartListItemConditionMemberType
    GreaterThan = 1  # SignalChartListItemConditionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SignalChartListItem(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a SignalChartListItem,
    List Item inside a SignalChartBuilder 
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.SignalChartCollection.CreateSignalChartListItem`
    
    .. versionadded:: NX6.0.0
    """
    
    class Timer():
        """
        time sensor  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Timer", "Timer"
           "AbsoluteTime", "Absolute time"
           "Undefined", "Undefined, undefined timer for the sensor signal"
        """
        Timer = 0  # SignalChartListItemTimerMemberType
        AbsoluteTime = 1  # SignalChartListItemTimerMemberType
        Undefined = 2  # SignalChartListItemTimerMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Condition():
        """
        signal chart list item condition  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "LessThan", "Less than"
           "GreaterThan", "Greater than"
        """
        LessThan = 0  # SignalChartListItemConditionMemberType
        GreaterThan = 1  # SignalChartListItemConditionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    AlwaysEvaluated: bool = ...
    """
    Returns or sets  the always evaluated 
    
    <hr>
    
    Getter Method
    
    Signature ``AlwaysEvaluated`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_motion_motor ("NX Motion Motor")
    
    <hr>
    
    Setter Method
    
    Signature ``AlwaysEvaluated`` 
    
    :param alwaysEvaluated: 
    :type alwaysEvaluated: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_motion_motor ("NX Motion Motor")
    """
    DelayTimeExpression: NXOpen.Expression = ...
    """
    Returns  the threshold expression
    
    <hr>
    
    Getter Method
    
    Signature ``DelayTimeExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_motion_motor ("NX Motion Motor")
    """
    EventCondition: SignalChartListItemCondition = ...
    """
    Returns or sets  the event condition 
    
    <hr>
    
    Getter Method
    
    Signature ``EventCondition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SignalChartListItemCondition` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_motion_motor ("NX Motion Motor")
    
    <hr>
    
    Setter Method
    
    Signature ``EventCondition`` 
    
    :param condition: 
    :type condition: :py:class:`NXOpen.Motion.SignalChartListItemCondition` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_motion_motor ("NX Motion Motor")
    """
    Sensor: MotionSensor = ...
    """
    Returns or sets  the sensor 
    
    <hr>
    
    Getter Method
    
    Signature ``Sensor`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.MotionSensor` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_motion_motor ("NX Motion Motor")
    
    <hr>
    
    Setter Method
    
    Signature ``Sensor`` 
    
    :param sensor: 
    :type sensor: :py:class:`NXOpen.Motion.MotionSensor` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_motion_motor ("NX Motion Motor")
    """
    SignalExpression: NXOpen.Expression = ...
    """
    Returns  the threshold expression
    
    <hr>
    
    Getter Method
    
    Signature ``SignalExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_motion_motor ("NX Motion Motor")
    """
    ThresholdExpression: NXOpen.Expression = ...
    """
    Returns  the threshold expression
    
    <hr>
    
    Getter Method
    
    Signature ``ThresholdExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_motion_motor ("NX Motion Motor")
    """
    TimeSensor: SignalChartListItemTimer = ...
    """
    Returns or sets  the time sensor 
    
    <hr>
    
    Getter Method
    
    Signature ``TimeSensor`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SignalChartListItemTimer` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_motion_motor ("NX Motion Motor")
    
    <hr>
    
    Setter Method
    
    Signature ``TimeSensor`` 
    
    :param timeSensor: 
    :type timeSensor: :py:class:`NXOpen.Motion.SignalChartListItemTimer` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_motion_motor ("NX Motion Motor")
    """
    Null: SignalChartListItem = ...  # unknown typename


class SelectTirePropertyNonInertial(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a single object selection.  
    
    .. versionadded:: NX5.0.0
    """
    
    @typing.overload
    def SetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def SetValue(self, selection: TirePropertyNonInertial) -> None:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.TirePropertyNonInertial` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: TirePropertyNonInertial) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.TirePropertyNonInertial` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: TirePropertyNonInertial, view: NXOpen.View, point: NXOpen.Point3d) -> None:
        """
        The object being selected with the object's view and object's point
        
        Signature ``SetValue(selection, view, point)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.TirePropertyNonInertial` 
        :param view:  selected object view 
        :type view: :py:class:`NXOpen.View` 
        :param point:  selected object point 
        :type point: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, snapType: NXOpen.InferSnapTypeSnapType, selection1: TirePropertyNonInertial, view1: NXOpen.View, point1: NXOpen.Point3d, selection2: TirePropertyNonInertial, view2: NXOpen.View, point2: NXOpen.Point3d) -> None:
        """
        The object being selected with the objects view and objects point and snap information.
        
        Signature ``SetValue(snapType, selection1, view1, point1, selection2, view2, point2)`` 
        
        :param snapType:   snap point type 
        :type snapType: :py:class:`NXOpen.InferSnapTypeSnapType` 
        :param selection1:  first selected object  
        :type selection1: :py:class:`NXOpen.Motion.TirePropertyNonInertial` 
        :param view1:  first selected object view 
        :type view1: :py:class:`NXOpen.View` 
        :param point1:  first selected object point 
        :type point1: :py:class:`NXOpen.Point3d` 
        :param selection2:  second selected object  
        :type selection2: :py:class:`NXOpen.Motion.TirePropertyNonInertial` 
        :param view2:  second selected object view 
        :type view2: :py:class:`NXOpen.View` 
        :param point2:  second selected object point 
        :type point2: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: TirePropertyNonInertial, caeSubType: NXOpen.CaeObjectTypeCaeSubType, caeSubId: int) -> None:
        """
        The object being selected with CAE set object information.
        
        Signature ``SetValue(selection, caeSubType, caeSubId)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.TirePropertyNonInertial` 
        :param caeSubType:  CAE set object sub type 
        :type caeSubType: :py:class:`NXOpen.CaeObjectTypeCaeSubType` 
        :param caeSubId:  CAE set object sub id 
        :type caeSubId: int 
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.SetValue`.
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def GetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def GetValue(self) -> TirePropertyNonInertial:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :returns:  selected object  
        :rtype: :py:class:`NXOpen.Motion.TirePropertyNonInertial` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self, selection: TirePropertyNonInertial) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.TirePropertyNonInertial` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the object's view and point.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, view, point). selection is a :py:class:`NXOpen.Motion.TirePropertyNonInertial`.   selected object view is a :py:class:`NXOpen.View`.   selected object viewpoint is a :py:class:`NXOpen.Point3d`.   selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the objects view and point and snap information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (snapType, selection1, view1, point1, selection2, view2, point2). snapType is a :py:class:`NXOpen.InferSnapTypeSnapType`.    snap point typeselection1 is a :py:class:`NXOpen.Motion.TirePropertyNonInertial`.   first selected object view1 is a :py:class:`NXOpen.View`.   first selected object viewpoint1 is a :py:class:`NXOpen.Point3d`.   first selected object pointselection2 is a :py:class:`NXOpen.Motion.TirePropertyNonInertial`.   second selected object view2 is a :py:class:`NXOpen.View`.   second selected object viewpoint2 is a :py:class:`NXOpen.Point3d`.   second selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with CAE set object information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, caeSubType, caeSubId). selection is a :py:class:`NXOpen.Motion.TirePropertyNonInertial`.   selected object caeSubType is a :py:class:`NXOpen.CaeObjectTypeCaeSubType`.   CAE set object sub typecaeSubId is a int.   CAE set object sub id
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.GetValue`.
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Value: TirePropertyNonInertial = ...
    """
    Returns or sets  the object being selected
    
    <hr>
    
    Getter Method
    
    Signature ``Value`` 
    
    :returns:  selected object  
    :rtype: :py:class:`NXOpen.Motion.TirePropertyNonInertial` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Value`` 
    
    :param selection:  selected object  
    :type selection: :py:class:`NXOpen.Motion.TirePropertyNonInertial` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SelectTirePropertyNonInertial = ...  # unknown typename


class SignalChart(NXOpen.NXObject):
    """
    Represents a motion Signal Chart object   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Motion.SignalChartBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: SignalChart = ...  # unknown typename


class GcouplerMovementTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class GcouplerMovementTypes():
    """
    Defines 2-3 joint coupler joint movement type 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Rotation", "Rotation movement type"
       "Translation", "Translation movement type"
    """
    Rotation = 0  # GcouplerMovementTypesMemberType
    Translation = 1  # GcouplerMovementTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class VectorTorqueBuilder(MotionBuilder):
    """
    Represents a :py:class:`NXOpen.Motion.VectorTorqueBuilder`
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.VectorTorqueCollection.CreateVectorTorqueBuilder`
    
    .. versionadded:: NX5.0.0
    """
    VObject: VObject = ...
    """
    Returns  the action link 
    
    <hr>
    
    Getter Method
    
    Signature ``VObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.VObject` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: VectorTorqueBuilder = ...  # unknown typename


class CurveContactCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of 2D contact objects.  
    
    Any 2D contact object must 
    be created and found through this class 
    To obtain an instance of this class, refer to :py:class:`NXOpen.Motion.MotionManager`
    
    .. versionadded:: NX5.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateCurveContactBuilder(self, contactobj: CurveContact) -> CurveContactBuilder:
        """
        Creates a :py:class:`NXOpen.Motion.CurveContact`  
        
        Signature ``CreateCurveContactBuilder(contactobj)`` 
        
        :param contactobj:  ":py:class:`NXOpen.Motion.CurveContact` to be edited,                                                                                               if None then create a new one 
        :type contactobj: :py:class:`NXOpen.Motion.CurveContact` 
        :returns: 
        :rtype: :py:class:`NXOpen.Motion.CurveContactBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def FindObject(self, name: str) -> CurveContact:
        """
        Finds the :py:class:`NXOpen.Motion.CurveContact` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Motion.CurveContact`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Motion.CurveContact` with this name.  
        :rtype: :py:class:`NXOpen.Motion.CurveContact` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    


class AnalyticalContactPropertyBuilderFrictionCoefficientTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AnalyticalContactPropertyBuilderFrictionCoefficientType():
    """
    Friction Coefficient Type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Expression", " - "
       "Function", " - "
       "Profile", " - "
    """
    Expression = 0  # AnalyticalContactPropertyBuilderFrictionCoefficientTypeMemberType
    Function = 1  # AnalyticalContactPropertyBuilderFrictionCoefficientTypeMemberType
    Profile = 2  # AnalyticalContactPropertyBuilderFrictionCoefficientTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AnalyticalContactPropertyBuilderStiffnessTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AnalyticalContactPropertyBuilderStiffnessType():
    """
    Stiffness Type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Expression", " - "
       "Function", " - "
       "Profile", " - "
       "ExpressionAndFunction", " - "
       "ExpressionAndProfile", " - "
    """
    Expression = 0  # AnalyticalContactPropertyBuilderStiffnessTypeMemberType
    Function = 1  # AnalyticalContactPropertyBuilderStiffnessTypeMemberType
    Profile = 2  # AnalyticalContactPropertyBuilderStiffnessTypeMemberType
    ExpressionAndFunction = 3  # AnalyticalContactPropertyBuilderStiffnessTypeMemberType
    ExpressionAndProfile = 4  # AnalyticalContactPropertyBuilderStiffnessTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AnalyticalContactPropertyBuilderDampingTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AnalyticalContactPropertyBuilderDampingType():
    """
    Damping Type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Expression", " - "
       "Function", " - "
       "Profile", " - "
       "ExpressionAndFunction", " - "
       "ExpressionAndProfile", " - "
    """
    Expression = 0  # AnalyticalContactPropertyBuilderDampingTypeMemberType
    Function = 1  # AnalyticalContactPropertyBuilderDampingTypeMemberType
    Profile = 2  # AnalyticalContactPropertyBuilderDampingTypeMemberType
    ExpressionAndFunction = 3  # AnalyticalContactPropertyBuilderDampingTypeMemberType
    ExpressionAndProfile = 4  # AnalyticalContactPropertyBuilderDampingTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AnalyticalContactPropertyBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`Motion.AnalyticalContactProperty` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.AnalyticalContactPropertyCollection.CreateAnalyticalContactPropertyBuilder`
    
    Default values.
    
    ===========================================  ================================================
    Property                                     Value
    ===========================================  ================================================
    DampingValue.Value                           0 (millimeters part), 0 (inches part) 
    -------------------------------------------  ------------------------------------------------
    FirstCustomizedMaterial.Density.Value        7.8e-6 (millimeters part), 7.3e-4 (inches part) 
    -------------------------------------------  ------------------------------------------------
    FirstCustomizedMaterial.PoissonRatio.Value   0.3 
    -------------------------------------------  ------------------------------------------------
    FirstCustomizedMaterial.YoungModulus.Value   2e+8 (millimeters part), 2.9e+7 (inches part) 
    -------------------------------------------  ------------------------------------------------
    FrictionCoefficientOption                    Expression 
    -------------------------------------------  ------------------------------------------------
    FrictionCoefficientValue.Value               0 
    -------------------------------------------  ------------------------------------------------
    RestitutionCoefficient.Value                 1 
    -------------------------------------------  ------------------------------------------------
    StiffnessValue.Value                         0 (millimeters part), 0 (inches part) 
    -------------------------------------------  ------------------------------------------------
    TransitionVelocity.Value                     10 (millimeters part), 0.393701 (inches part) 
    ===========================================  ================================================
    
    .. versionadded:: NX12.0.0
    """
    
    class FrictionCoefficientType():
        """
        Friction Coefficient Type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Expression", " - "
           "Function", " - "
           "Profile", " - "
        """
        Expression = 0  # AnalyticalContactPropertyBuilderFrictionCoefficientTypeMemberType
        Function = 1  # AnalyticalContactPropertyBuilderFrictionCoefficientTypeMemberType
        Profile = 2  # AnalyticalContactPropertyBuilderFrictionCoefficientTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class StiffnessType():
        """
        Stiffness Type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Expression", " - "
           "Function", " - "
           "Profile", " - "
           "ExpressionAndFunction", " - "
           "ExpressionAndProfile", " - "
        """
        Expression = 0  # AnalyticalContactPropertyBuilderStiffnessTypeMemberType
        Function = 1  # AnalyticalContactPropertyBuilderStiffnessTypeMemberType
        Profile = 2  # AnalyticalContactPropertyBuilderStiffnessTypeMemberType
        ExpressionAndFunction = 3  # AnalyticalContactPropertyBuilderStiffnessTypeMemberType
        ExpressionAndProfile = 4  # AnalyticalContactPropertyBuilderStiffnessTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DampingType():
        """
        Damping Type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Expression", " - "
           "Function", " - "
           "Profile", " - "
           "ExpressionAndFunction", " - "
           "ExpressionAndProfile", " - "
        """
        Expression = 0  # AnalyticalContactPropertyBuilderDampingTypeMemberType
        Function = 1  # AnalyticalContactPropertyBuilderDampingTypeMemberType
        Profile = 2  # AnalyticalContactPropertyBuilderDampingTypeMemberType
        ExpressionAndFunction = 3  # AnalyticalContactPropertyBuilderDampingTypeMemberType
        ExpressionAndProfile = 4  # AnalyticalContactPropertyBuilderDampingTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    DampingCurve: MotionFunction = ...
    """
    Returns or sets  the damping function 
    
    <hr>
    
    Getter Method
    
    Signature ``DampingCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.MotionFunction` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DampingCurve`` 
    
    :param dampingCurve: 
    :type dampingCurve: :py:class:`NXOpen.Motion.MotionFunction` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    DampingOption: AnalyticalContactPropertyBuilderDampingType = ...
    """
    Returns or sets  the damping type.  
    
    <hr>
    
    Getter Method
    
    Signature ``DampingOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.AnalyticalContactPropertyBuilderDampingType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DampingOption`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Motion.AnalyticalContactPropertyBuilderDampingType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    DampingProfile: SelectFieldData = ...
    """
    Returns  the damping Profile.  
    
    <hr>
    
    Getter Method
    
    Signature ``DampingProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectFieldData` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    DampingValue: NXOpen.Expression = ...
    """
    Returns  the damping value 
    
    <hr>
    
    Getter Method
    
    Signature ``DampingValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    FirstCustomizedMaterial: CustomizedMaterialBuilder = ...
    """
    Returns  the first customized material 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstCustomizedMaterial`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.CustomizedMaterialBuilder` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    FrictionCoefficientCurve: MotionFunction = ...
    """
    Returns or sets  the friction coefficient function 
    
    <hr>
    
    Getter Method
    
    Signature ``FrictionCoefficientCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.MotionFunction` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FrictionCoefficientCurve`` 
    
    :param frictionCoefficient: 
    :type frictionCoefficient: :py:class:`NXOpen.Motion.MotionFunction` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    FrictionCoefficientOption: AnalyticalContactPropertyBuilderFrictionCoefficientType = ...
    """
    Returns or sets  the friction coefficient option 
    
    <hr>
    
    Getter Method
    
    Signature ``FrictionCoefficientOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.AnalyticalContactPropertyBuilderFrictionCoefficientType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``FrictionCoefficientOption`` 
    
    :param frictionCoefficient: 
    :type frictionCoefficient: :py:class:`NXOpen.Motion.AnalyticalContactPropertyBuilderFrictionCoefficientType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    FrictionCoefficientProfile: SelectFieldData = ...
    """
    Returns  the friction coefficient Profile.  
    
    <hr>
    
    Getter Method
    
    Signature ``FrictionCoefficientProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectFieldData` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    FrictionCoefficientValue: NXOpen.Expression = ...
    """
    Returns  the friction coefficient value 
    
    <hr>
    
    Getter Method
    
    Signature ``FrictionCoefficientValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Name: str = ...
    """
    Returns or sets  the name 
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    RestitutionCoefficient: NXOpen.Expression = ...
    """
    Returns  the restitution coefficient 
    
    <hr>
    
    Getter Method
    
    Signature ``RestitutionCoefficient`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SecondCustomizedMaterial: CustomizedMaterialBuilder = ...
    """
    Returns  the second customized material 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondCustomizedMaterial`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.CustomizedMaterialBuilder` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    StiffnessCurve: MotionFunction = ...
    """
    Returns or sets  the stiffness function 
    
    <hr>
    
    Getter Method
    
    Signature ``StiffnessCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.MotionFunction` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StiffnessCurve`` 
    
    :param stiffnessCurve: 
    :type stiffnessCurve: :py:class:`NXOpen.Motion.MotionFunction` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    StiffnessOption: AnalyticalContactPropertyBuilderStiffnessType = ...
    """
    Returns or sets  the stiffness type.  
    
    <hr>
    
    Getter Method
    
    Signature ``StiffnessOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.AnalyticalContactPropertyBuilderStiffnessType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StiffnessOption`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Motion.AnalyticalContactPropertyBuilderStiffnessType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    StiffnessProfile: SelectFieldData = ...
    """
    Returns  the stiffness Profile.  
    
    <hr>
    
    Getter Method
    
    Signature ``StiffnessProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectFieldData` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    StiffnessValue: NXOpen.Expression = ...
    """
    Returns  the stiffness value 
    
    <hr>
    
    Getter Method
    
    Signature ``StiffnessValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    TransitionVelocity: NXOpen.Expression = ...
    """
    Returns  the transition velocity 
    
    <hr>
    
    Getter Method
    
    Signature ``TransitionVelocity`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: AnalyticalContactPropertyBuilder = ...  # unknown typename


class BeamForceBuilderVectorTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BeamForceBuilderVectorTypes():
    """
    the vector direction of the beam force 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Y", "Y Vector"
       "Z", "Z Vector"
    """
    Y = 0  # BeamForceBuilderVectorTypesMemberType
    Z = 1  # BeamForceBuilderVectorTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BeamForceBuilderDampingTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BeamForceBuilderDampingTypes():
    """
    the damping type
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Viscous", "Viscous"
       "Structural", "Structural"
    """
    Viscous = 0  # BeamForceBuilderDampingTypesMemberType
    Structural = 1  # BeamForceBuilderDampingTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BeamForceBuilder(MotionBuilder):
    """
    Represents a :py:class:`Motion.BeamForceBuilder` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.BeamForceCollection.CreateBeamForceBuilder`
    
    Default values.
    
    ======================================  ================================================
    Property                                Value
    ======================================  ================================================
    Area.Value                              100 
    --------------------------------------  ------------------------------------------------
    CustomizedMaterial.Density.Value        7.8e-6 (millimeters part), 7.3e-4 (inches part) 
    --------------------------------------  ------------------------------------------------
    CustomizedMaterial.PoissonRatio.Value   0.3 
    --------------------------------------  ------------------------------------------------
    CustomizedMaterial.YoungModulus.Value   2e+8 (millimeters part), 2.9e+7 (inches part) 
    --------------------------------------  ------------------------------------------------
    DampingType                             Viscous 
    ======================================  ================================================
    
    .. versionadded:: NX12.0.0
    """
    
    class VectorTypes():
        """
        the vector direction of the beam force 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Y", "Y Vector"
           "Z", "Z Vector"
        """
        Y = 0  # BeamForceBuilderVectorTypesMemberType
        Z = 1  # BeamForceBuilderVectorTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DampingTypes():
        """
        the damping type
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Viscous", "Viscous"
           "Structural", "Structural"
        """
        Viscous = 0  # BeamForceBuilderDampingTypesMemberType
        Structural = 1  # BeamForceBuilderDampingTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    ActionLink: SelectLink = ...
    """
    Returns  the action link object 
    
    <hr>
    
    Getter Method
    
    Signature ``ActionLink`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectLink` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ActionPoint: NXOpen.Point = ...
    """
    Returns or sets  the action point.  
    
    <hr>
    
    Getter Method
    
    Signature ``ActionPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ActionPoint`` 
    
    :param actionPoint: 
    :type actionPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Area: NXOpen.Expression = ...
    """
    Returns  the area 
    
    <hr>
    
    Getter Method
    
    Signature ``Area`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    AsyTimoshenkoCorrection: NXOpen.Expression = ...
    """
    Returns  the ASY Timoshenko correction 
    
    <hr>
    
    Getter Method
    
    Signature ``AsyTimoshenkoCorrection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    AszTimoshenkoCorrection: NXOpen.Expression = ...
    """
    Returns  the ASZ Timoshenko correction 
    
    <hr>
    
    Getter Method
    
    Signature ``AszTimoshenkoCorrection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    BaseLink: SelectLink = ...
    """
    Returns  the base link object 
    
    <hr>
    
    Getter Method
    
    Signature ``BaseLink`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectLink` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    BasePoint: NXOpen.Point = ...
    """
    Returns or sets  the base point.  
    
    <hr>
    
    Getter Method
    
    Signature ``BasePoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BasePoint`` 
    
    :param basePoint: 
    :type basePoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    CustomizedMaterial: CustomizedMaterialBuilder = ...
    """
    Returns  the customized material 
    
    <hr>
    
    Getter Method
    
    Signature ``CustomizedMaterial`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.CustomizedMaterialBuilder` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    DampingRatio: NXOpen.Expression = ...
    """
    Returns  the damping ratio 
    
    <hr>
    
    Getter Method
    
    Signature ``DampingRatio`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    DampingType: BeamForceBuilderDampingTypes = ...
    """
    Returns or sets  the damping method 
    
    <hr>
    
    Getter Method
    
    Signature ``DampingType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.BeamForceBuilderDampingTypes` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``DampingType`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Motion.BeamForceBuilderDampingTypes` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Direction: NXOpen.Direction = ...
    """
    Returns or sets  the direction 
    
    <hr>
    
    Getter Method
    
    Signature ``Direction`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Direction`` 
    
    :param direction: 
    :type direction: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    FreeLength: NXOpen.Expression = ...
    """
    Returns  the free length 
    
    <hr>
    
    Getter Method
    
    Signature ``FreeLength`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    InertiaIyy: NXOpen.Expression = ...
    """
    Returns  the inertia Iyy
    
    <hr>
    
    Getter Method
    
    Signature ``InertiaIyy`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    InertiaIzz: NXOpen.Expression = ...
    """
    Returns  the inertia Izz 
    
    <hr>
    
    Getter Method
    
    Signature ``InertiaIzz`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    InertiaK: NXOpen.Expression = ...
    """
    Returns  the inertia K 
    
    <hr>
    
    Getter Method
    
    Signature ``InertiaK`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    IsBeamCrossDamping: bool = ...
    """
    Returns or sets  the beam cross damping flag 
    
    <hr>
    
    Getter Method
    
    Signature ``IsBeamCrossDamping`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``IsBeamCrossDamping`` 
    
    :param type: 
    :type type: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Name: str = ...
    """
    Returns or sets  the name of the beam force object 
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    VectorType: BeamForceBuilderVectorTypes = ...
    """
    Returns or sets  the orientation of beam force 
    
    <hr>
    
    Getter Method
    
    Signature ``VectorType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.BeamForceBuilderVectorTypes` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``VectorType`` 
    
    :param vectorType: 
    :type vectorType: :py:class:`NXOpen.Motion.BeamForceBuilderVectorTypes` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: BeamForceBuilder = ...  # unknown typename


class JointFrictionRecurDynFrictionEffectMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class JointFrictionRecurDynFrictionEffect():
    """
    Joint friction effect 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "All", " - "
       "Stiction", " - "
       "Sliding", " - "
    """
    All = 0  # JointFrictionRecurDynFrictionEffectMemberType
    Stiction = 1  # JointFrictionRecurDynFrictionEffectMemberType
    Sliding = 2  # JointFrictionRecurDynFrictionEffectMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class JointFrictionRecurDynFrictionYokeTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class JointFrictionRecurDynFrictionYokeType():
    """
    Joint friction yoke type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "I", " - "
       "J", " - "
    """
    I = 0  # JointFrictionRecurDynFrictionYokeTypeMemberType
    J = 1  # JointFrictionRecurDynFrictionYokeTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class JointFrictionRecurDynFrictionOverlapDeltaMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class JointFrictionRecurDynFrictionOverlapDelta():
    """
    Joint friction overlap_delta 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Constant", " - "
       "Increase", " - "
       "Decrease", " - "
    """
    Constant = 0  # JointFrictionRecurDynFrictionOverlapDeltaMemberType
    Increase = 1  # JointFrictionRecurDynFrictionOverlapDeltaMemberType
    Decrease = 2  # JointFrictionRecurDynFrictionOverlapDeltaMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class JointFrictionRecurDyn(NXOpen.TaggedObject):
    """
    Represents a recurdyn joint friction object   
    
    .. versionadded:: NX5.0.0
    """
    
    class FrictionEffect():
        """
        Joint friction effect 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "All", " - "
           "Stiction", " - "
           "Sliding", " - "
        """
        All = 0  # JointFrictionRecurDynFrictionEffectMemberType
        Stiction = 1  # JointFrictionRecurDynFrictionEffectMemberType
        Sliding = 2  # JointFrictionRecurDynFrictionEffectMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class FrictionYokeType():
        """
        Joint friction yoke type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "I", " - "
           "J", " - "
        """
        I = 0  # JointFrictionRecurDynFrictionYokeTypeMemberType
        J = 1  # JointFrictionRecurDynFrictionYokeTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class FrictionOverlapDelta():
        """
        Joint friction overlap_delta 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Constant", " - "
           "Increase", " - "
           "Decrease", " - "
        """
        Constant = 0  # JointFrictionRecurDynFrictionOverlapDeltaMemberType
        Increase = 1  # JointFrictionRecurDynFrictionOverlapDeltaMemberType
        Decrease = 2  # JointFrictionRecurDynFrictionOverlapDeltaMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    BallRadiusExpression: NXOpen.Expression = ...
    """
    Returns  the ball radius expression
    
    <hr>
    
    Getter Method
    
    Signature ``BallRadiusExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    BendMoment: bool = ...
    """
    Returns or sets  the bend moment 
    
    <hr>
    
    Getter Method
    
    Signature ``BendMoment`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``BendMoment`` 
    
    :param bendMoment: 
    :type bendMoment: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    BendingArmExpression: NXOpen.Expression = ...
    """
    Returns  the bending arm expression
    
    <hr>
    
    Getter Method
    
    Signature ``BendingArmExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Effect: JointFrictionRecurDynFrictionEffect = ...
    """
    Returns or sets  the effect 
    
    <hr>
    
    Getter Method
    
    Signature ``Effect`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.JointFrictionRecurDynFrictionEffect` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Effect`` 
    
    :param effect: 
    :type effect: :py:class:`NXOpen.Motion.JointFrictionRecurDynFrictionEffect` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    EnableForce: bool = ...
    """
    Returns or sets  the enable force 
    
    <hr>
    
    Getter Method
    
    Signature ``EnableForce`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``EnableForce`` 
    
    :param enableForce: 
    :type enableForce: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    EnableTorque: bool = ...
    """
    Returns or sets  the enable torque 
    
    <hr>
    
    Getter Method
    
    Signature ``EnableTorque`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``EnableTorque`` 
    
    :param enableTorque: 
    :type enableTorque: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ForcePreloadExpression: NXOpen.Expression = ...
    """
    Returns  the force preload expression
    
    <hr>
    
    Getter Method
    
    Signature ``ForcePreloadExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    FrictionArmExpression: NXOpen.Expression = ...
    """
    Returns  the friction arm expression
    
    <hr>
    
    Getter Method
    
    Signature ``FrictionArmExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    InitialOverlapExpression: NXOpen.Expression = ...
    """
    Returns  the initial overlap expression
    
    <hr>
    
    Getter Method
    
    Signature ``InitialOverlapExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    MaxFrictionForceExpression: NXOpen.Expression = ...
    """
    Returns  the max friction force expression
    
    <hr>
    
    Getter Method
    
    Signature ``MaxFrictionForceExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    MaxFrictionTorqueExpression: NXOpen.Expression = ...
    """
    Returns  the max friction torque expression
    
    <hr>
    
    Getter Method
    
    Signature ``MaxFrictionTorqueExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    MaxStictionDeformationExpression: NXOpen.Expression = ...
    """
    Returns  the max stiction deformation expression
    
    <hr>
    
    Getter Method
    
    Signature ``MaxStictionDeformationExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    MuDynamicExpression: NXOpen.Expression = ...
    """
    Returns  the mu dynamic expression
    
    <hr>
    
    Getter Method
    
    Signature ``MuDynamicExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    MuStaticExpression: NXOpen.Expression = ...
    """
    Returns  the mu static expression
    
    <hr>
    
    Getter Method
    
    Signature ``MuStaticExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OverlapDelta: JointFrictionRecurDynFrictionOverlapDelta = ...
    """
    Returns or sets  the overlap delta 
    
    <hr>
    
    Getter Method
    
    Signature ``OverlapDelta`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.JointFrictionRecurDynFrictionOverlapDelta` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``OverlapDelta`` 
    
    :param overlapDelta: 
    :type overlapDelta: :py:class:`NXOpen.Motion.JointFrictionRecurDynFrictionOverlapDelta` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    PinRadiusExpression: NXOpen.Expression = ...
    """
    Returns  the pin radius expression
    
    <hr>
    
    Getter Method
    
    Signature ``PinRadiusExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Preload: bool = ...
    """
    Returns or sets  the preload 
    
    <hr>
    
    Getter Method
    
    Signature ``Preload`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Preload`` 
    
    :param preload: 
    :type preload: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ReactionArmExpression: NXOpen.Expression = ...
    """
    Returns  the reaction arm expression
    
    <hr>
    
    Getter Method
    
    Signature ``ReactionArmExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ReactionForce: bool = ...
    """
    Returns or sets  the reaction force 
    
    <hr>
    
    Getter Method
    
    Signature ``ReactionForce`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``ReactionForce`` 
    
    :param reactionForce: 
    :type reactionForce: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    StaticEqu: bool = ...
    """
    Returns or sets  the static equ 
    
    <hr>
    
    Getter Method
    
    Signature ``StaticEqu`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``StaticEqu`` 
    
    :param staticEqu: 
    :type staticEqu: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    StictionTransitionVelocityExpression: NXOpen.Expression = ...
    """
    Returns  the stiction transition_velocity expression
    
    <hr>
    
    Getter Method
    
    Signature ``StictionTransitionVelocityExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    TorquePreloadExpression: NXOpen.Expression = ...
    """
    Returns  the torque preload expression
    
    <hr>
    
    Getter Method
    
    Signature ``TorquePreloadExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    TorsionalMoment: bool = ...
    """
    Returns or sets  the torsional moment 
    
    <hr>
    
    Getter Method
    
    Signature ``TorsionalMoment`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``TorsionalMoment`` 
    
    :param torsionalMoment: 
    :type torsionalMoment: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    YokeType: JointFrictionRecurDynFrictionYokeType = ...
    """
    Returns or sets  the yoke type 
    
    <hr>
    
    Getter Method
    
    Signature ``YokeType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.JointFrictionRecurDynFrictionYokeType` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``YokeType`` 
    
    :param yokeType: 
    :type yokeType: :py:class:`NXOpen.Motion.JointFrictionRecurDynFrictionYokeType` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: JointFrictionRecurDyn = ...  # unknown typename


class BaseSection(MotionObject):
    """
    Represents a base section function   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Motion.BaseSectionBuilder`
    
    .. versionadded:: NX12.0.0
    """
    Null: BaseSection = ...  # unknown typename


class StandardSection(BaseSection):
    """
    Represents a standard beam section   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Motion.StandardSectionBuilder`
    
    .. versionadded:: NX12.0.0
    """
    Null: StandardSection = ...  # unknown typename


class FlexPhysicalDampingSettings(NXOpen.TaggedObject):
    """
    Represents the physical damping settings for flexible body   
    
    .. versionadded:: NX7.5.0
    """
    PhysicalHystereticScalingFactor: float = ...
    """
    Returns or sets  the scaling factor for physical hysteretic damping 
    
    <hr>
    
    Getter Method
    
    Signature ``PhysicalHystereticScalingFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``PhysicalHystereticScalingFactor`` 
    
    :param scalingFactor: 
    :type scalingFactor: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    PhysicalViscousScalingFactor: float = ...
    """
    Returns or sets  the scaling factor for physical viscous damping 
    
    <hr>
    
    Getter Method
    
    Signature ``PhysicalViscousScalingFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``PhysicalViscousScalingFactor`` 
    
    :param scalingFactor: 
    :type scalingFactor: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    UsingPhysicalHysteretic: bool = ...
    """
    Returns or sets  the usage setting for physical hysteretic damping 
    
    <hr>
    
    Getter Method
    
    Signature ``UsingPhysicalHysteretic`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``UsingPhysicalHysteretic`` 
    
    :param usingPhysicalHysteretic: 
    :type usingPhysicalHysteretic: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    UsingPhysicalViscous: bool = ...
    """
    Returns or sets  the usage setting for physical viscous damping 
    
    <hr>
    
    Getter Method
    
    Signature ``UsingPhysicalViscous`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``UsingPhysicalViscous`` 
    
    :param usingPhysicalViscous: 
    :type usingPhysicalViscous: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: FlexPhysicalDampingSettings = ...  # unknown typename


class SelectTirePropertyMotorcycle(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a single object selection.  
    
    .. versionadded:: NX5.0.0
    """
    
    @typing.overload
    def SetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def SetValue(self, selection: TirePropertyMotorcycle) -> None:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.TirePropertyMotorcycle` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: TirePropertyMotorcycle) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.TirePropertyMotorcycle` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: TirePropertyMotorcycle, view: NXOpen.View, point: NXOpen.Point3d) -> None:
        """
        The object being selected with the object's view and object's point
        
        Signature ``SetValue(selection, view, point)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.TirePropertyMotorcycle` 
        :param view:  selected object view 
        :type view: :py:class:`NXOpen.View` 
        :param point:  selected object point 
        :type point: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, snapType: NXOpen.InferSnapTypeSnapType, selection1: TirePropertyMotorcycle, view1: NXOpen.View, point1: NXOpen.Point3d, selection2: TirePropertyMotorcycle, view2: NXOpen.View, point2: NXOpen.Point3d) -> None:
        """
        The object being selected with the objects view and objects point and snap information.
        
        Signature ``SetValue(snapType, selection1, view1, point1, selection2, view2, point2)`` 
        
        :param snapType:   snap point type 
        :type snapType: :py:class:`NXOpen.InferSnapTypeSnapType` 
        :param selection1:  first selected object  
        :type selection1: :py:class:`NXOpen.Motion.TirePropertyMotorcycle` 
        :param view1:  first selected object view 
        :type view1: :py:class:`NXOpen.View` 
        :param point1:  first selected object point 
        :type point1: :py:class:`NXOpen.Point3d` 
        :param selection2:  second selected object  
        :type selection2: :py:class:`NXOpen.Motion.TirePropertyMotorcycle` 
        :param view2:  second selected object view 
        :type view2: :py:class:`NXOpen.View` 
        :param point2:  second selected object point 
        :type point2: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: TirePropertyMotorcycle, caeSubType: NXOpen.CaeObjectTypeCaeSubType, caeSubId: int) -> None:
        """
        The object being selected with CAE set object information.
        
        Signature ``SetValue(selection, caeSubType, caeSubId)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.TirePropertyMotorcycle` 
        :param caeSubType:  CAE set object sub type 
        :type caeSubType: :py:class:`NXOpen.CaeObjectTypeCaeSubType` 
        :param caeSubId:  CAE set object sub id 
        :type caeSubId: int 
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.SetValue`.
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def GetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def GetValue(self) -> TirePropertyMotorcycle:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :returns:  selected object  
        :rtype: :py:class:`NXOpen.Motion.TirePropertyMotorcycle` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self, selection: TirePropertyMotorcycle) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.TirePropertyMotorcycle` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the object's view and point.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, view, point). selection is a :py:class:`NXOpen.Motion.TirePropertyMotorcycle`.   selected object view is a :py:class:`NXOpen.View`.   selected object viewpoint is a :py:class:`NXOpen.Point3d`.   selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the objects view and point and snap information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (snapType, selection1, view1, point1, selection2, view2, point2). snapType is a :py:class:`NXOpen.InferSnapTypeSnapType`.    snap point typeselection1 is a :py:class:`NXOpen.Motion.TirePropertyMotorcycle`.   first selected object view1 is a :py:class:`NXOpen.View`.   first selected object viewpoint1 is a :py:class:`NXOpen.Point3d`.   first selected object pointselection2 is a :py:class:`NXOpen.Motion.TirePropertyMotorcycle`.   second selected object view2 is a :py:class:`NXOpen.View`.   second selected object viewpoint2 is a :py:class:`NXOpen.Point3d`.   second selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with CAE set object information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, caeSubType, caeSubId). selection is a :py:class:`NXOpen.Motion.TirePropertyMotorcycle`.   selected object caeSubType is a :py:class:`NXOpen.CaeObjectTypeCaeSubType`.   CAE set object sub typecaeSubId is a int.   CAE set object sub id
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.GetValue`.
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Value: TirePropertyMotorcycle = ...
    """
    Returns or sets  the object being selected
    
    <hr>
    
    Getter Method
    
    Signature ``Value`` 
    
    :returns:  selected object  
    :rtype: :py:class:`NXOpen.Motion.TirePropertyMotorcycle` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Value`` 
    
    :param selection:  selected object  
    :type selection: :py:class:`NXOpen.Motion.TirePropertyMotorcycle` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SelectTirePropertyMotorcycle = ...  # unknown typename


class AnalyticalContactProperty(MotionObject):
    """
    Represents an Analytical Contact Property.  
    
    Used to model contact between 
    spheres, revolved surfaces, extruded surfaces, and rails. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Motion.AnalyticalContactPropertyBuilder`
    
    .. versionadded:: NX12.0.0
    """
    Null: AnalyticalContactProperty = ...  # unknown typename


class JointFrictionAdamsFrictionEffectMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class JointFrictionAdamsFrictionEffect():
    """
    Joint friction effect 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "All", " - "
       "Stiction", " - "
       "Sliding", " - "
    """
    All = 0  # JointFrictionAdamsFrictionEffectMemberType
    Stiction = 1  # JointFrictionAdamsFrictionEffectMemberType
    Sliding = 2  # JointFrictionAdamsFrictionEffectMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class JointFrictionAdamsFrictionYokeTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class JointFrictionAdamsFrictionYokeType():
    """
    Joint friction yoke type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "I", " - "
       "J", " - "
    """
    I = 0  # JointFrictionAdamsFrictionYokeTypeMemberType
    J = 1  # JointFrictionAdamsFrictionYokeTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class JointFrictionAdamsFrictionOverlapDeltaMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class JointFrictionAdamsFrictionOverlapDelta():
    """
    Joint friction overlap_delta 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Constant", " - "
       "Increase", " - "
       "Decrease", " - "
    """
    Constant = 0  # JointFrictionAdamsFrictionOverlapDeltaMemberType
    Increase = 1  # JointFrictionAdamsFrictionOverlapDeltaMemberType
    Decrease = 2  # JointFrictionAdamsFrictionOverlapDeltaMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class JointFrictionAdams(NXOpen.TaggedObject):
    """
    Represents a adams joint friction object   
    
    .. versionadded:: NX5.0.0
    """
    
    class FrictionEffect():
        """
        Joint friction effect 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "All", " - "
           "Stiction", " - "
           "Sliding", " - "
        """
        All = 0  # JointFrictionAdamsFrictionEffectMemberType
        Stiction = 1  # JointFrictionAdamsFrictionEffectMemberType
        Sliding = 2  # JointFrictionAdamsFrictionEffectMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class FrictionYokeType():
        """
        Joint friction yoke type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "I", " - "
           "J", " - "
        """
        I = 0  # JointFrictionAdamsFrictionYokeTypeMemberType
        J = 1  # JointFrictionAdamsFrictionYokeTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class FrictionOverlapDelta():
        """
        Joint friction overlap_delta 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Constant", " - "
           "Increase", " - "
           "Decrease", " - "
        """
        Constant = 0  # JointFrictionAdamsFrictionOverlapDeltaMemberType
        Increase = 1  # JointFrictionAdamsFrictionOverlapDeltaMemberType
        Decrease = 2  # JointFrictionAdamsFrictionOverlapDeltaMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    BallRadiusExpression: NXOpen.Expression = ...
    """
    Returns  the ball radius expression
    
    <hr>
    
    Getter Method
    
    Signature ``BallRadiusExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    BendMoment: bool = ...
    """
    Returns or sets  the bend moment 
    
    <hr>
    
    Getter Method
    
    Signature ``BendMoment`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``BendMoment`` 
    
    :param bendMoment: 
    :type bendMoment: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    BendingArmExpression: NXOpen.Expression = ...
    """
    Returns  the bending arm expression
    
    <hr>
    
    Getter Method
    
    Signature ``BendingArmExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Effect: JointFrictionAdamsFrictionEffect = ...
    """
    Returns or sets  the effect 
    
    <hr>
    
    Getter Method
    
    Signature ``Effect`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.JointFrictionAdamsFrictionEffect` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Effect`` 
    
    :param effect: 
    :type effect: :py:class:`NXOpen.Motion.JointFrictionAdamsFrictionEffect` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ForcePreloadExpression: NXOpen.Expression = ...
    """
    Returns  the force preload expression
    
    <hr>
    
    Getter Method
    
    Signature ``ForcePreloadExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    FrictionArmExpression: NXOpen.Expression = ...
    """
    Returns  the friction arm expression
    
    <hr>
    
    Getter Method
    
    Signature ``FrictionArmExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    InitialOverlapExpression: NXOpen.Expression = ...
    """
    Returns  the initial overlap expression
    
    <hr>
    
    Getter Method
    
    Signature ``InitialOverlapExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    MaxStictionDeformationExpression: NXOpen.Expression = ...
    """
    Returns  the max stiction deformation expression
    
    <hr>
    
    Getter Method
    
    Signature ``MaxStictionDeformationExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    MuDynamicExpression: NXOpen.Expression = ...
    """
    Returns  the mu dynamic expression
    
    <hr>
    
    Getter Method
    
    Signature ``MuDynamicExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    MuStaticExpression: NXOpen.Expression = ...
    """
    Returns  the mu static expression
    
    <hr>
    
    Getter Method
    
    Signature ``MuStaticExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OverlapDelta: JointFrictionAdamsFrictionOverlapDelta = ...
    """
    Returns or sets  the overlap delta 
    
    <hr>
    
    Getter Method
    
    Signature ``OverlapDelta`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.JointFrictionAdamsFrictionOverlapDelta` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``OverlapDelta`` 
    
    :param overlapDelta: 
    :type overlapDelta: :py:class:`NXOpen.Motion.JointFrictionAdamsFrictionOverlapDelta` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    PinRadiusExpression: NXOpen.Expression = ...
    """
    Returns  the pin radius expression
    
    <hr>
    
    Getter Method
    
    Signature ``PinRadiusExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Preload: bool = ...
    """
    Returns or sets  the preload 
    
    <hr>
    
    Getter Method
    
    Signature ``Preload`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Preload`` 
    
    :param preload: 
    :type preload: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ReactionArmExpression: NXOpen.Expression = ...
    """
    Returns  the reaction arm expression
    
    <hr>
    
    Getter Method
    
    Signature ``ReactionArmExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ReactionForce: bool = ...
    """
    Returns or sets  the reaction force 
    
    <hr>
    
    Getter Method
    
    Signature ``ReactionForce`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``ReactionForce`` 
    
    :param reactionForce: 
    :type reactionForce: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    StaticEqu: bool = ...
    """
    Returns or sets  the static equ 
    
    <hr>
    
    Getter Method
    
    Signature ``StaticEqu`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``StaticEqu`` 
    
    :param staticEqu: 
    :type staticEqu: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    StictionTransitionVelocityExpression: NXOpen.Expression = ...
    """
    Returns  the stiction transition velocity expression
    
    <hr>
    
    Getter Method
    
    Signature ``StictionTransitionVelocityExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    TorquePreloadExpression: NXOpen.Expression = ...
    """
    Returns  the torque preload expression
    
    <hr>
    
    Getter Method
    
    Signature ``TorquePreloadExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    TorsionalMoment: bool = ...
    """
    Returns or sets  the torsional moment 
    
    <hr>
    
    Getter Method
    
    Signature ``TorsionalMoment`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``TorsionalMoment`` 
    
    :param torsionalMoment: 
    :type torsionalMoment: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    YokeType: JointFrictionAdamsFrictionYokeType = ...
    """
    Returns or sets  the yoke type 
    
    <hr>
    
    Getter Method
    
    Signature ``YokeType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.JointFrictionAdamsFrictionYokeType` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``YokeType`` 
    
    :param yokeType: 
    :type yokeType: :py:class:`NXOpen.Motion.JointFrictionAdamsFrictionYokeType` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: JointFrictionAdams = ...  # unknown typename


class ArticulationControl(PostControl):
    """
    Represents the :py:class:`NXOpen.Motion.ArticulationControl`   
    
    An instance of this class can not be obtained
    
    .. versionadded:: NX9.0.0
    """
    
    def GetArticulationJointsDisplacement(self, jointTag: Joint) -> tuple:
        """
        Get the articulation joints displacement
        
        Signature ``GetArticulationJointsDisplacement(jointTag)`` 
        
        :param jointTag:  The special articulation joint object  
        :type jointTag: :py:class:`NXOpen.Motion.Joint` 
        :returns: a tuple 
        :rtype: A tuple consisting of (currentStep, displacement, displacementUnit). currentStep is a int.   The current step index displacement is a float.   The articulation joint displacement value within current step displacementUnit is a :py:class:`NXOpen.Unit`.   The articulation joint displacement unit 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    @typing.overload
    def ArticulationSolve(self, numSteps: int, jointTags: 'list[Joint]', stepSize: 'list[float]', stepSizeUnit: 'list[NXOpen.Unit]') -> None:
        """
        Articulation solve with joint driver step size and number of step as input 
        This method adds event loop that solves step by step and return. 
        It does not wait finishing the solving process. 
        For the case there is no UI button to control the solve and stop action, call another 
        :py:meth:`Motion.ArticulationControl.ArticulationSolve` 
        that has no numSteps input in a cycle to solve
        
        Signature ``ArticulationSolve(numSteps, jointTags, stepSize, stepSizeUnit)`` 
        
        :param numSteps: The number of step will take in one action 
        :type numSteps: int 
        :param jointTags: Articulation joint tags  
        :type jointTags: list of :py:class:`NXOpen.Motion.Joint` 
        :param stepSize: Articulation joint step size  
        :type stepSize: list of float 
        :param stepSizeUnit: Articulation joint step size unit 
        :type stepSizeUnit: list of :py:class:`NXOpen.Unit` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    @typing.overload
    def ArticulationSolve(self, jointTags: 'list[Joint]', displacement: 'list[float]', displacementUnit: 'list[NXOpen.Unit]') -> None:
        """
        Articulation solve with joint driver displacement as input 
        
        Signature ``ArticulationSolve(jointTags, displacement, displacementUnit)`` 
        
        :param jointTags:  Articulation joint tags  
        :type jointTags: list of :py:class:`NXOpen.Motion.Joint` 
        :param displacement:  Articulation joint displacement 
        :type displacement: list of float 
        :param displacementUnit:  Articulation joint displacement units 
        :type displacementUnit: list of :py:class:`NXOpen.Unit` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def StepToDesignPosition(self) -> None:
        """
        Articulation to design position 
        
        Signature ``StepToDesignPosition()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def StepToAssemblyPosition(self) -> None:
        """
        Articulation to assembly position 
        
        Signature ``StepToAssemblyPosition()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def Stop(self) -> None:
        """
        Articulation stop 
        
        Signature ``Stop()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def Finish(self) -> None:
        """
        Articulation finish 
        
        Signature ``Finish()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def GetArticulationJoints(self) -> 'list[Joint]':
        """
        Articulation joints 
        
        Signature ``GetArticulationJoints()`` 
        
        :returns:  The articulation joint array  
        :rtype: list of :py:class:`NXOpen.Motion.Joint` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    ActiveView: ActiveView = ...
    """
    Returns or sets  the active view 
    
    <hr>
    
    Getter Method
    
    Signature ``ActiveView`` 
    
    :returns:  The articulation active view  
    :rtype: :py:class:`NXOpen.Motion.ActiveView` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``ActiveView`` 
    
    :param activeView: 
    :type activeView: :py:class:`NXOpen.Motion.ActiveView` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Delay: int = ...
    """
    Returns or sets  the articulation delay 
    
    <hr>
    
    Getter Method
    
    Signature ``Delay`` 
    
    :returns:  The articulation delay  
    :rtype: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Delay`` 
    
    :param delay: 
    :type delay: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    JointsLimits: bool = ...
    """
    Returns or sets  the articulation joint limits setting 
    
    <hr>
    
    Getter Method
    
    Signature ``JointsLimits`` 
    
    :returns:  The joint limits on/off flag setting  
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``JointsLimits`` 
    
    :param jointLimits: 
    :type jointLimits: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: ArticulationControl = ...  # unknown typename


class VobjectApplicationTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class VobjectApplicationType():
    """
    the application type. Each application type has a specific application associated. A Vector Force or Vector Torque is invalid without the type of application
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "ActionReaction", "for Action-Reaction Appplication type"
       "ActionOnly", "for Action Only Appplication type"
    """
    ActionReaction = 0  # VobjectApplicationTypeMemberType
    ActionOnly = 1  # VobjectApplicationTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PlantInputCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Plant Input objects   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Motion.MotionManager`
    
    .. versionadded:: NX6.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreatePlantInputBuilder(self, plantinput: PlantInput) -> PlantInputBuilder:
        """
        Creates a :py:class:`NXOpen.Motion.PlantInputBuilder`  
        
        Signature ``CreatePlantInputBuilder(plantinput)`` 
        
        :param plantinput: 
        :type plantinput: :py:class:`NXOpen.Motion.PlantInput` 
        :returns: 
        :rtype: :py:class:`NXOpen.Motion.PlantInputBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: nx_motion_cosim ("NX Motion CoSimulation")
        """
        ...
    
    
    def FindObject(self, name: str) -> PlantInput:
        """
        Finds the :py:class:`NXOpen.Motion.PlantInput` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Motion.PlantInput`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Motion.PlantInput` with this name.  
        :rtype: :py:class:`NXOpen.Motion.PlantInput` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: nx_motion_cosim ("NX Motion CoSimulation")
        """
        ...
    


class PackagingCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Packaging objects   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Part`
    
    .. versionadded:: NX4.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateInterferenceBuilder(self, interference: PackagingInterference) -> PackagingInterferenceBuilder:
        """
        Creates an :py:class:`NXOpen.Motion.PackagingInterferenceBuilder`.  
        
        This class
        is used to construct an :py:class:`NXOpen.Motion.PackagingInterference` object.  
        
        Signature ``CreateInterferenceBuilder(interference)`` 
        
        :param interference:  :py:class:`NXOpen.Motion.PackagingInterference` object to edit.                                                                              None indicates that a new :py:class:`NXOpen.Motion.PackagingInterference`                                                                               object is being created.  
        :type interference: :py:class:`NXOpen.Motion.PackagingInterference` 
        :returns:  :py:class:`NXOpen.Motion.PackagingInterferenceBuilder` object  
        :rtype: :py:class:`NXOpen.Motion.PackagingInterferenceBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def CreateMeasureBuilder(self, measure: PackagingMeasure) -> PackagingMeasureBuilder:
        """
        Creates a :py:class:`NXOpen.Motion.PackagingMeasureBuilder`.  
        
        This class
        is used to construct a :py:class:`NXOpen.Measure` object.  
        
        Signature ``CreateMeasureBuilder(measure)`` 
        
        :param measure:  :py:class:`NXOpen.Measure` object to edit.                                                                    None indicates that a new :py:class:`NXOpen.Measure`                                                                     object is being created.  
        :type measure: :py:class:`NXOpen.Motion.PackagingMeasure` 
        :returns:  :py:class:`NXOpen.Motion.PackagingMeasureBuilder` object  
        :rtype: :py:class:`NXOpen.Motion.PackagingMeasureBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def CreateTraceBuilder(self, trace: PackagingTrace) -> PackagingTraceBuilder:
        """
        Creates a :py:class:`NXOpen.Motion.PackagingTraceBuilder`.  
        
        This class
        is used to construct a :py:class:`NXOpen.Motion.PackagingTrace` object.  
        
        Signature ``CreateTraceBuilder(trace)`` 
        
        :param trace:  :py:class:`NXOpen.Motion.PackagingTrace` object to edit.                                                                None indicates that a new :py:class:`NXOpen.Motion.PackagingTrace`                                                                 object is being created.  
        :type trace: :py:class:`NXOpen.Motion.PackagingTrace` 
        :returns:  :py:class:`NXOpen.Motion.PackagingTraceBuilder` object  
        :rtype: :py:class:`NXOpen.Motion.PackagingTraceBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def FindObject(self, name: str) -> Packaging:
        """
        Finds the :py:class:`NXOpen.Motion.Packaging` object with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  Name of the Packaging object.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Motion.Packaging` object with this name.  
        :rtype: :py:class:`NXOpen.Motion.Packaging` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def SetDistanceMeausreBodyOnlyFilterStatus(self, enableBodyOnly: bool) -> None:
        """
        Sets distance measure body only status 
        
        Signature ``SetDistanceMeausreBodyOnlyFilterStatus(enableBodyOnly)`` 
        
        :param enableBodyOnly: 
        :type enableBodyOnly: bool 
        
        .. versionadded:: NX11.0.2
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    


class PostProcessEnvelopeAccuracyModesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PostProcessEnvelopeAccuracyModes():
    """
    The modes for envelope accuracy 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Low", " - "
       "Medium", " - "
       "High", " - "
       "Custom", " - "
    """
    Low = 0  # PostProcessEnvelopeAccuracyModesMemberType
    Medium = 1  # PostProcessEnvelopeAccuracyModesMemberType
    High = 2  # PostProcessEnvelopeAccuracyModesMemberType
    Custom = 3  # PostProcessEnvelopeAccuracyModesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PostProcessEnvelopeToleranceTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PostProcessEnvelopeToleranceTypes():
    """
    Envelope tolerance types 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Percentage", " - "
       "Absolute", " - "
    """
    Percentage = 0  # PostProcessEnvelopeToleranceTypesMemberType
    Absolute = 1  # PostProcessEnvelopeToleranceTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PostProcess():
    """
    Represents the motion post process   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Motion.MotionSession`
    
    .. versionadded:: NX7.5.0
    """
    
    class EnvelopeAccuracyModes():
        """
        The modes for envelope accuracy 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Low", " - "
           "Medium", " - "
           "High", " - "
           "Custom", " - "
        """
        Low = 0  # PostProcessEnvelopeAccuracyModesMemberType
        Medium = 1  # PostProcessEnvelopeAccuracyModesMemberType
        High = 2  # PostProcessEnvelopeAccuracyModesMemberType
        Custom = 3  # PostProcessEnvelopeAccuracyModesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class EnvelopeToleranceTypes():
        """
        Envelope tolerance types 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Percentage", " - "
           "Absolute", " - "
        """
        Percentage = 0  # PostProcessEnvelopeToleranceTypesMemberType
        Absolute = 1  # PostProcessEnvelopeToleranceTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class EnvelopeTolerance():
        """
        Contains settings for envelope tolerance .  
        
        Constructor: 
        NXOpen.Motion.PostProcess.EnvelopeTolerance()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        AccuracyMode: PostProcessEnvelopeAccuracyModes = ...
        """
        Accuracy mode.  
        
        :py:class:`Motion.PostProcessEnvelopeAccuracyModes`.
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Motion.PostProcessEnvelopeAccuracyModes`
        """
        ToleranceType: PostProcessEnvelopeToleranceTypes = ...
        """
        Indicates if envelopeTolerance is specified as percentage value or absolute value.  
        
        Used only if accurcayMode is :py:class:`Motion.PostProcessEnvelopeAccuracyModes.Custom  <Motion.PostProcessEnvelopeAccuracyModes>`. 
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Motion.PostProcessEnvelopeToleranceTypes`
        """
        Tolerance: float = ...
        """
        Tolerance value.  
        
        Used only if accurcayMode is :py:class:`Motion.PostProcessEnvelopeAccuracyModes.Custom  <Motion.PostProcessEnvelopeAccuracyModes>`. 
        <hr>
        
        Field Value
        Type:float
        """
        DecimationEnabled: bool = ...
        """
        Indicates if decimation is enabled or not.  
        
        Used only if accurcayMode is :py:class:`Motion.PostProcessEnvelopeAccuracyModes.Custom  <Motion.PostProcessEnvelopeAccuracyModes>`.
        <hr>
        
        Field Value
        Type:bool
        """
        DecimationFactor: float = ...
        """
        Specifies targeted decimation rate which is decimated body/original body.  
        
        Used only if accurcayMode is :py:class:`Motion.PostProcessEnvelopeAccuracyModes.Custom  <Motion.PostProcessEnvelopeAccuracyModes>`. 
        <hr>
        
        Field Value
        Type:float
        """
        DecimationMaxError: float = ...
        """
        Specifies max decimation error: (bigger than 0): percentage, (less than 0): absolute value.  
        
        Used only if accurcayMode is :py:class:`Motion.PostProcessEnvelopeAccuracyModes.Custom  <Motion.PostProcessEnvelopeAccuracyModes>`. 
        <hr>
        
        Field Value
        Type:float
        """
    
    
    @typing.overload
    def CaptureArrangement(self, arrangementName: str, animationStep: int) -> NXOpen.Assemblies.Arrangement:
        """
        Capture or update an arrangement from motion result of active solution.
        If an arrangement with the given name is present, updates the arrangement. 
        Otherwise new arrangement of the standard type is created.  
        
        Signature ``CaptureArrangement(arrangementName, animationStep)`` 
        
        :param arrangementName:  Name for arrangement  
        :type arrangementName: str 
        :param animationStep:  Animation step  
        :type animationStep: int 
        :returns:  Assembly arrangement  
        :rtype: :py:class:`NXOpen.Assemblies.Arrangement` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    @typing.overload
    def CaptureArrangement(self, arrangementName: str, arrangementType: int, animationStep: int) -> NXOpen.Assemblies.Arrangement:
        """
        Capture or update an arrangement from motion result of active solution.
        If an arrangement with the given name is present, updates the arrangement.
        The arrangement type cannot be changed during update. If an arrangement with
        the given name is not present, new arrangement is created. The new arrangement 
        could be isolated or standard type. It depends on the arrangementType argument  
        
        Signature ``CaptureArrangement(arrangementName, arrangementType, animationStep)`` 
        
        :param arrangementName:  Name for arrangement  
        :type arrangementName: str 
        :param arrangementType:  Arrangement type  
        :type arrangementType: int 
        :param animationStep:  Animation step  
        :type animationStep: int 
        :returns:  Assembly arrangement  
        :rtype: :py:class:`NXOpen.Assemblies.Arrangement` 
        
        .. versionadded:: NX9.0.1
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def CreateEnvelope(self, tPostControl: IPostControl, destinationPart: NXOpen.NXObject, addToRefSets: bool, referenceFrameObj: NXOpen.NXObject, sourceObjs: 'list[NXOpen.NXObject]', stepFrom: int, stepTo: int, toleranceSetting: PostProcessEnvelopeTolerance_Struct) -> tuple:
        """
        Creates envelopes for the given objects 
        
        Signature ``CreateEnvelope(tPostControl, destinationPart, addToRefSets, referenceFrameObj, sourceObjs, stepFrom, stepTo, toleranceSetting)`` 
        
        :param tPostControl:  The IPostControl object  
        :type tPostControl: :py:class:`NXOpen.Motion.IPostControl` 
        :param destinationPart:   The part to save swept the objects into  
        :type destinationPart: :py:class:`NXOpen.NXObject` 
        :param addToRefSets:  Indicates whether the output should be added to Model/Lightweight reference sets or not  
        :type addToRefSets: bool 
        :param referenceFrameObj:  The object acts as reference frame  
        :type referenceFrameObj: :py:class:`NXOpen.NXObject` 
        :param sourceObjs:  The objects swept bodies are created from  
        :type sourceObjs: list of :py:class:`NXOpen.NXObject` 
        :param stepFrom:  The step index where the envelope starts  
        :type stepFrom: int 
        :param stepTo:  The step index where the envelope stops  
        :type stepTo: int 
        :param toleranceSetting:  The tolerance settings  
        :type toleranceSetting: :py:class:`NXOpen.Motion.PostProcessEnvelopeTolerance_Struct` 
        :returns: a tuple 
        :rtype: A tuple consisting of (sweptBodies, skipedObj, failedObjs, aborted). sweptBodies is a list of :py:class:`NXOpen.NXObject`.   The resulting swept bodies skipedObj is a list of :py:class:`NXOpen.NXObject`.   The objects skipped because invisible or not moving failedObjs is a list of :py:class:`NXOpen.NXObject`.   The objects failed because of an algorithm failure aborted is a bool.   True if user hits the stop button, false otherwise 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def UpdateDesignPosition(self) -> None:
        """
        Update design position 
        
        Signature ``UpdateDesignPosition()`` 
        
        .. versionadded:: NX9.0.0
        
        .. deprecated::  NX12.0.0
           This functionality is no longer supported.
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def CreateSequence(self, sequenceName: str) -> NXOpen.NXObject:
        """
        Create sequence  
        
        Signature ``CreateSequence(sequenceName)`` 
        
        :param sequenceName:  The sequence name  
        :type sequenceName: str 
        :returns:  Sequence  
        :rtype: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def TraceCurrentPosition(self) -> None:
        """
        Trace current position 
        
        Signature ``TraceCurrentPosition()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def TraceEntireMechanism(self) -> None:
        """
        Trace entire mechanism 
        
        Signature ``TraceEntireMechanism()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def TraceIntersectionCurve(self) -> None:
        """
        Trace intersection curve 
        
        Signature ``TraceIntersectionCurve()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def ExplodeMechanism(self, explosionName: str) -> NXOpen.Assemblies.Explosion:
        """
        Explode mechanism  
        
        Signature ``ExplodeMechanism(explosionName)`` 
        
        :param explosionName:  Name for explosion  
        :type explosionName: str 
        :returns:  :py:class:`NXOpen.Assemblies.Explosion`  
        :rtype: :py:class:`NXOpen.Assemblies.Explosion` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def ExportToMovie(self, movieName: str) -> None:
        """
        Export to movie 
        
        Signature ``ExportToMovie(movieName)`` 
        
        :param movieName:  Name for movie to export  
        :type movieName: str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def ListMeasure(self) -> None:
        """
        List measure 
        
        Signature ``ListMeasure()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def ListInterference(self) -> None:
        """
        List interference 
        
        Signature ``ListInterference()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def GetInterferenceOption(self) -> bool:
        """
        Get interference option for animation/articulation/spreadsheet run  
        
        Signature ``GetInterferenceOption()`` 
        
        :returns: Interference on/off options  
        :rtype: bool 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def SetInterferenceOption(self, interferenceOn: bool) -> None:
        """
        Set interference option for animation/articulation/spreadsheet run 
        
        Signature ``SetInterferenceOption(interferenceOn)`` 
        
        :param interferenceOn: Interference on/off options  
        :type interferenceOn: bool 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def GetMeasureOption(self) -> bool:
        """
        Get measure option animation/articulation/spreadsheet run 
        
        Signature ``GetMeasureOption()`` 
        
        :returns: Measure on/off options  
        :rtype: bool 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def SetMeasureOption(self, measureOn: bool) -> None:
        """
        Set measure option animation/articulation/spreadsheet run
        
        Signature ``SetMeasureOption(measureOn)`` 
        
        :param measureOn: Measure on/off options  
        :type measureOn: bool 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def GetTraceOption(self) -> bool:
        """
        Get trace option animation/articulation/spreadsheet run 
        
        Signature ``GetTraceOption()`` 
        
        :returns: Trace on/off options  
        :rtype: bool 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def SetTraceOption(self, traceOn: bool) -> None:
        """
        Set articulation trace option animation/articulation/spreadsheet run
        
        Signature ``SetTraceOption(traceOn)`` 
        
        :param traceOn: Trace on/off options  
        :type traceOn: bool 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def GetStopOnEventOption(self) -> bool:
        """
        Get stop on event option animation/articulation/spreadsheet run 
        
        Signature ``GetStopOnEventOption()`` 
        
        :returns: Stop on event on/off options  
        :rtype: bool 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def SetStopOnEventOption(self, stopOnEventOn: bool) -> None:
        """
        Set articulation stop on event option animation/articulation/spreadsheet run
        
        Signature ``SetStopOnEventOption(stopOnEventOn)`` 
        
        :param stopOnEventOn: Stop on event on/off options  
        :type stopOnEventOn: bool 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def GetSpeed(self) -> int:
        """
        Get the animation speed for motion animation  
        
        Signature ``GetSpeed()`` 
        
        :returns:  The animation speed  
        :rtype: int 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def SetSpeed(self, speed: int) -> None:
        """
        Set the animation speed for motion animation 
        
        Signature ``SetSpeed(speed)`` 
        
        :param speed:  The animation speed  
        :type speed: int 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def RegisterUserButton(self, buttonName: str, buttonTips: str, buttonMenuScriptName: str, functionBeforeUIDestroy: typing.Callable) -> None:
        """
        Register user button for post process.  
        
        If the functionBeforeUIDestroy is register, the motion post animation, articulation, spreadsheet run UI 
        will display the user button as the buttonName and buttonTips setting. and in this button action, it will invoke the register function and 
        the function by menu script registered 
        
        Signature ``RegisterUserButton(buttonName, buttonTips, buttonMenuScriptName, functionBeforeUIDestroy)`` 
        
        :param buttonName:  the name displayed on the button 
        :type buttonName: str 
        :param buttonTips:  the button tool tip  
        :type buttonTips: str 
        :param buttonMenuScriptName:  the menu script name of the button  
        :type buttonMenuScriptName: str 
        :param functionBeforeUIDestroy:  User function for this button before dialog destroy  
        :type functionBeforeUIDestroy: CallableObject 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def ExportRealTimeMovie(self, movieName: str) -> None:
        """
        Export a real-time movie 
        
        Signature ``ExportRealTimeMovie(movieName)`` 
        
        :param movieName:  Name for movie to export  
        :type movieName: str 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    


class MotionSensor(MotionObject, IGraphSource):
    """
    Represents a motion sensor   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Motion.MotionSensorBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: MotionSensor = ...  # unknown typename


class GraphObjectBuilder(MotionBuilder):
    """
    Represents a :py:class:`NXOpen.Motion.GraphObjectBuilder`,
    only creation is supported
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.GraphManager.CreateGraphObjectBuilder`
    
    .. versionadded:: NX11.0.0
    """
    
    def GetQuantityTypes(self) -> tuple:
        """
        Returns the graph object quantity types and its values 
        
        Signature ``GetQuantityTypes()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (typeStrings, valueStrings). typeStrings is a list of str. valueStrings is a list of str. 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetQuantityType(self, typeString: str, valueString: str) -> None:
        """
        Sets a pair of quantity type and its value of graph object
        
        Signature ``SetQuantityType(typeString, valueString)`` 
        
        :param typeString: 
        :type typeString: str 
        :param valueString: 
        :type valueString: str 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def FindEquivalent(self) -> Graph:
        """
        Find an existing graph object that is equivalent to the request in builder 
        
        Signature ``FindEquivalent()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Motion.Graph` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    AdvancedSolutionObject: AdvancedSolution = ...
    """
    Returns or sets  the advanced solution object who owns the graph object 
    
    <hr>
    
    Getter Method
    
    Signature ``AdvancedSolutionObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.AdvancedSolution` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AdvancedSolutionObject`` 
    
    :param solutionObject: 
    :type solutionObject: :py:class:`NXOpen.Motion.AdvancedSolution` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ReferenceObject: IGraphSource = ...
    """
    Returns or sets  the reference object of graph object 
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.IGraphSource` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReferenceObject`` 
    
    :param referObject: 
    :type referObject: :py:class:`NXOpen.Motion.IGraphSource` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SolutionObject: MotionSolution = ...
    """
    Returns or sets  the solution object who owns the graph object 
    
    <hr>
    
    Getter Method
    
    Signature ``SolutionObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.MotionSolution` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SolutionObject`` 
    
    :param solutionObject: 
    :type solutionObject: :py:class:`NXOpen.Motion.MotionSolution` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: GraphObjectBuilder = ...  # unknown typename


class PortVariableList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[PortVariable]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.Motion.PortVariable` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: PortVariable) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.Motion.PortVariable` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: PortVariable) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.Motion.PortVariable` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> PortVariable:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.Motion.PortVariable` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: PortVariable) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Motion.PortVariable` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: PortVariable, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Motion.PortVariable` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[PortVariable]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.Motion.PortVariable` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[PortVariable]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.Motion.PortVariable` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: PortVariable, object2: PortVariable) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.Motion.PortVariable` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.Motion.PortVariable` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: PortVariable) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.Motion.PortVariable` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: PortVariableList = ...  # unknown typename


class BushingDefineOrientationTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BushingDefineOrientationTypes():
    """
    Defines the orientation type of bushing 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Vector", "Vector orientation type"
       "Csys", "CSYS orientation type"
    """
    Vector = 0  # BushingDefineOrientationTypesMemberType
    Csys = 1  # BushingDefineOrientationTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BushingDefineAngleCalculationOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BushingDefineAngleCalculationOption():
    """
    Defines the Angle Calculation option 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "LargeAngle", "Large Angle"
       "SmallAngle", "Small Angle"
    """
    LargeAngle = 0  # BushingDefineAngleCalculationOptionMemberType
    SmallAngle = 1  # BushingDefineAngleCalculationOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BushingDefineForceCalculationOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BushingDefineForceCalculationOption():
    """
    Defines the Force Calculation option 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Abc", "ABC"
       "Standard", "Standard"
       "Bab", "BAB"
    """
    Abc = 0  # BushingDefineForceCalculationOptionMemberType
    Standard = 1  # BushingDefineForceCalculationOptionMemberType
    Bab = 2  # BushingDefineForceCalculationOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BushingDefine(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a Motion BushingDefine   
    
    .. versionadded:: NX6.0.0
    """
    
    class OrientationTypes():
        """
        Defines the orientation type of bushing 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Vector", "Vector orientation type"
           "Csys", "CSYS orientation type"
        """
        Vector = 0  # BushingDefineOrientationTypesMemberType
        Csys = 1  # BushingDefineOrientationTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class AngleCalculationOption():
        """
        Defines the Angle Calculation option 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "LargeAngle", "Large Angle"
           "SmallAngle", "Small Angle"
        """
        LargeAngle = 0  # BushingDefineAngleCalculationOptionMemberType
        SmallAngle = 1  # BushingDefineAngleCalculationOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ForceCalculationOption():
        """
        Defines the Force Calculation option 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Abc", "ABC"
           "Standard", "Standard"
           "Bab", "BAB"
        """
        Abc = 0  # BushingDefineForceCalculationOptionMemberType
        Standard = 1  # BushingDefineForceCalculationOptionMemberType
        Bab = 2  # BushingDefineForceCalculationOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    ActionLink: SelectLink = ...
    """
    Returns  the action link 
    
    <hr>
    
    Getter Method
    
    Signature ``ActionLink`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectLink` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ActionOffsetX: NXOpen.Expression = ...
    """
    Returns  the offset to be applied on X Axis, if Action Offset is used 
    
    <hr>
    
    Getter Method
    
    Signature ``ActionOffsetX`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ActionOffsetY: NXOpen.Expression = ...
    """
    Returns  the offset to be applied on Y Axis, if Action Offset is used 
    
    <hr>
    
    Getter Method
    
    Signature ``ActionOffsetY`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ActionOffsetZ: NXOpen.Expression = ...
    """
    Returns  the offset to be applied on Z Axis, if Action Offset is used 
    
    <hr>
    
    Getter Method
    
    Signature ``ActionOffsetZ`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ActionPoint: NXOpen.Point = ...
    """
    Returns or sets  the action point 
    
    <hr>
    
    Getter Method
    
    Signature ``ActionPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ActionPoint`` 
    
    :param actionPoint: 
    :type actionPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    AngleCalculation: BushingDefineAngleCalculationOption = ...
    """
    Returns or sets  the angle calculation option  
    
    <hr>
    
    Getter Method
    
    Signature ``AngleCalculation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.BushingDefineAngleCalculationOption` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``AngleCalculation`` 
    
    :param opt: 
    :type opt: :py:class:`NXOpen.Motion.BushingDefineAngleCalculationOption` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ApplyActionOffset: bool = ...
    """
    Returns or sets  the flag to specify whether Action Offset should be applied 
    
    <hr>
    
    Getter Method
    
    Signature ``ApplyActionOffset`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``ApplyActionOffset`` 
    
    :param apply: 
    :type apply: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ApplyBaseOffset: bool = ...
    """
    Returns or sets  the flag to specify whether Base Offset should be applied 
    
    <hr>
    
    Getter Method
    
    Signature ``ApplyBaseOffset`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``ApplyBaseOffset`` 
    
    :param apply: 
    :type apply: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    BaseOffsetX: NXOpen.Expression = ...
    """
    Returns  the offset to be applied on X Axis, if Base Offset is used 
    
    <hr>
    
    Getter Method
    
    Signature ``BaseOffsetX`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    BaseOffsetY: NXOpen.Expression = ...
    """
    Returns  the offset to be applied on Y Axis, if Base Offset is used 
    
    <hr>
    
    Getter Method
    
    Signature ``BaseOffsetY`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    BaseOffsetZ: NXOpen.Expression = ...
    """
    Returns  the offset to be applied on Z Axis, if Base Offset is used 
    
    <hr>
    
    Getter Method
    
    Signature ``BaseOffsetZ`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Csys: NXOpen.CoordinateSystem = ...
    """
    Returns or sets  the csys of bushing, the coordinate system of action and reaction are same each other 
    
    <hr>
    
    Getter Method
    
    Signature ``Csys`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Csys`` 
    
    :param csys: 
    :type csys: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Dipole: bool = ...
    """
    Returns or sets  the dipole option 
    
    <hr>
    
    Getter Method
    
    Signature ``Dipole`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Dipole`` 
    
    :param opt: 
    :type opt: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Direction: NXOpen.Direction = ...
    """
    Returns or sets  the direction 
    
    <hr>
    
    Getter Method
    
    Signature ``Direction`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Direction`` 
    
    :param direction: 
    :type direction: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ForceCalculation: BushingDefineForceCalculationOption = ...
    """
    Returns or sets  the force calculation option 
    
    <hr>
    
    Getter Method
    
    Signature ``ForceCalculation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.BushingDefineForceCalculationOption` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``ForceCalculation`` 
    
    :param opt: 
    :type opt: :py:class:`NXOpen.Motion.BushingDefineForceCalculationOption` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Name: str = ...
    """
    Returns or sets  the name 
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Orientation: NXOpen.NXMatrix = ...
    """
    Returns or sets  the matrix of bushing 
    
    <hr>
    
    Getter Method
    
    Signature ``Orientation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.NXMatrix` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Orientation`` 
    
    :param orientation: 
    :type orientation: :py:class:`NXOpen.NXMatrix` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    OrientationType: BushingDefineOrientationTypes = ...
    """
    Returns or sets  the orientation type of bushing 
    
    <hr>
    
    Getter Method
    
    Signature ``OrientationType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.BushingDefineOrientationTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``OrientationType`` 
    
    :param orientationType: 
    :type orientationType: :py:class:`NXOpen.Motion.BushingDefineOrientationTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ReactionLink: SelectLink = ...
    """
    Returns  the reaction link 
    
    <hr>
    
    Getter Method
    
    Signature ``ReactionLink`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectLink` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ReactionPoint: NXOpen.Point = ...
    """
    Returns or sets  the reaction point 
    
    <hr>
    
    Getter Method
    
    Signature ``ReactionPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReactionPoint`` 
    
    :param reactionPoint: 
    :type reactionPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: BushingDefine = ...  # unknown typename


class VectorTorque(MotionObject, IGraphSource):
    """
    Represents a vector torque   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Motion.VectorTorqueBuilder`
    
    .. versionadded:: NX5.0.0
    """
    Null: VectorTorque = ...  # unknown typename


class SelectSplineBeamProperty(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a single object selection.  
    
    .. versionadded:: NX5.0.0
    """
    
    @typing.overload
    def SetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def SetValue(self, selection: SplineBeamProperty) -> None:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.SplineBeamProperty` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: SplineBeamProperty) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.SplineBeamProperty` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: SplineBeamProperty, view: NXOpen.View, point: NXOpen.Point3d) -> None:
        """
        The object being selected with the object's view and object's point
        
        Signature ``SetValue(selection, view, point)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.SplineBeamProperty` 
        :param view:  selected object view 
        :type view: :py:class:`NXOpen.View` 
        :param point:  selected object point 
        :type point: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, snapType: NXOpen.InferSnapTypeSnapType, selection1: SplineBeamProperty, view1: NXOpen.View, point1: NXOpen.Point3d, selection2: SplineBeamProperty, view2: NXOpen.View, point2: NXOpen.Point3d) -> None:
        """
        The object being selected with the objects view and objects point and snap information.
        
        Signature ``SetValue(snapType, selection1, view1, point1, selection2, view2, point2)`` 
        
        :param snapType:   snap point type 
        :type snapType: :py:class:`NXOpen.InferSnapTypeSnapType` 
        :param selection1:  first selected object  
        :type selection1: :py:class:`NXOpen.Motion.SplineBeamProperty` 
        :param view1:  first selected object view 
        :type view1: :py:class:`NXOpen.View` 
        :param point1:  first selected object point 
        :type point1: :py:class:`NXOpen.Point3d` 
        :param selection2:  second selected object  
        :type selection2: :py:class:`NXOpen.Motion.SplineBeamProperty` 
        :param view2:  second selected object view 
        :type view2: :py:class:`NXOpen.View` 
        :param point2:  second selected object point 
        :type point2: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: SplineBeamProperty, caeSubType: NXOpen.CaeObjectTypeCaeSubType, caeSubId: int) -> None:
        """
        The object being selected with CAE set object information.
        
        Signature ``SetValue(selection, caeSubType, caeSubId)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.SplineBeamProperty` 
        :param caeSubType:  CAE set object sub type 
        :type caeSubType: :py:class:`NXOpen.CaeObjectTypeCaeSubType` 
        :param caeSubId:  CAE set object sub id 
        :type caeSubId: int 
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.SetValue`.
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def GetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def GetValue(self) -> SplineBeamProperty:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :returns:  selected object  
        :rtype: :py:class:`NXOpen.Motion.SplineBeamProperty` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self, selection: SplineBeamProperty) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.SplineBeamProperty` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the object's view and point.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, view, point). selection is a :py:class:`NXOpen.Motion.SplineBeamProperty`.   selected object view is a :py:class:`NXOpen.View`.   selected object viewpoint is a :py:class:`NXOpen.Point3d`.   selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the objects view and point and snap information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (snapType, selection1, view1, point1, selection2, view2, point2). snapType is a :py:class:`NXOpen.InferSnapTypeSnapType`.    snap point typeselection1 is a :py:class:`NXOpen.Motion.SplineBeamProperty`.   first selected object view1 is a :py:class:`NXOpen.View`.   first selected object viewpoint1 is a :py:class:`NXOpen.Point3d`.   first selected object pointselection2 is a :py:class:`NXOpen.Motion.SplineBeamProperty`.   second selected object view2 is a :py:class:`NXOpen.View`.   second selected object viewpoint2 is a :py:class:`NXOpen.Point3d`.   second selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with CAE set object information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, caeSubType, caeSubId). selection is a :py:class:`NXOpen.Motion.SplineBeamProperty`.   selected object caeSubType is a :py:class:`NXOpen.CaeObjectTypeCaeSubType`.   CAE set object sub typecaeSubId is a int.   CAE set object sub id
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.GetValue`.
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Value: SplineBeamProperty = ...
    """
    Returns or sets  the object being selected
    
    <hr>
    
    Getter Method
    
    Signature ``Value`` 
    
    :returns:  selected object  
    :rtype: :py:class:`NXOpen.Motion.SplineBeamProperty` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Value`` 
    
    :param selection:  selected object  
    :type selection: :py:class:`NXOpen.Motion.SplineBeamProperty` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SelectSplineBeamProperty = ...  # unknown typename


class TirePropertyBasicBuilder(TirePropertyBuilder):
    """
    Represents a builder for a :py:class:`Motion.TirePropertyBasic`  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.TirePropertyBasicCollection.CreateTirePropertyBasicBuilder`
    
    Default values.
    
    =========================================================  =======================================================
    Property                                                   Value
    =========================================================  =======================================================
    AdvancedTab.AligningMomentArm.Value                        0.0 (millimeters part), 0.0 (inches part) 
    ---------------------------------------------------------  -------------------------------------------------------
    AdvancedTab.ConeIndex.Value                                0.0 (millimeters part), 0.0 (inches part) 
    ---------------------------------------------------------  -------------------------------------------------------
    AdvancedTab.ContactAreaType                                Function 
    ---------------------------------------------------------  -------------------------------------------------------
    AdvancedTab.DistributedContact                             0 
    ---------------------------------------------------------  -------------------------------------------------------
    AdvancedTab.FrictionType                                   Function 
    ---------------------------------------------------------  -------------------------------------------------------
    AdvancedTab.NumDivisions.Value                             1 (millimeters part), 1 (inches part) 
    ---------------------------------------------------------  -------------------------------------------------------
    AdvancedTab.RelaxationLength.Value                         0.0 (millimeters part), 0.0 (inches part) 
    ---------------------------------------------------------  -------------------------------------------------------
    AdvancedTab.RollingRadiusType                              None 
    ---------------------------------------------------------  -------------------------------------------------------
    AdvancedTab.RollingRadiusValue.Value                       0.0 (millimeters part), 0.0 (inches part) 
    ---------------------------------------------------------  -------------------------------------------------------
    AdvancedTab.SectionHeight.Value                            0.0 (millimeters part), 0.0 (inches part) 
    ---------------------------------------------------------  -------------------------------------------------------
    AdvancedTab.SectionWidth.Value                             0.0 (millimeters part), 0.0 (inches part) 
    ---------------------------------------------------------  -------------------------------------------------------
    AdvancedTab.StaticHold                                     1 
    ---------------------------------------------------------  -------------------------------------------------------
    AdvancedTab.SurfaceType                                    Simple 
    ---------------------------------------------------------  -------------------------------------------------------
    AdvancedTab.TransDampingDeflection.Value                   0.0 (millimeters part), 0.0 (inches part) 
    ---------------------------------------------------------  -------------------------------------------------------
    BasicTab.CorneringStiffness.Value                          1000000.0 (millimeters part), 224808.944 (inches part) 
    ---------------------------------------------------------  -------------------------------------------------------
    BasicTab.FrictionCoefficient.Value                         1.0 (millimeters part), 1.0 (inches part) 
    ---------------------------------------------------------  -------------------------------------------------------
    BasicTab.LateralForceType                                  Cornering 
    ---------------------------------------------------------  -------------------------------------------------------
    BasicTab.Radius.Value                                      300 (millimeters part), 11.811 (inches part) 
    ---------------------------------------------------------  -------------------------------------------------------
    BasicTab.RollingResistance.Value                           0.0 (millimeters part), 0.0 (inches part) 
    ---------------------------------------------------------  -------------------------------------------------------
    BasicTab.VerticalDamping.DataType                          Expression 
    ---------------------------------------------------------  -------------------------------------------------------
    HighOrderEffectsTab.CarcassMass.Value                      0.0 (millimeters part), 0.0 (inches part) 
    ---------------------------------------------------------  -------------------------------------------------------
    HighOrderEffectsTab.LateralDamping.Value                   0 (millimeters part), 0 (inches part) 
    ---------------------------------------------------------  -------------------------------------------------------
    HighOrderEffectsTab.LateralStiffness.Value                 0 (millimeters part), 0 (inches part) 
    ---------------------------------------------------------  -------------------------------------------------------
    HighOrderEffectsTab.LongDamping.Value                      0 (millimeters part), 0 (inches part) 
    ---------------------------------------------------------  -------------------------------------------------------
    HighOrderEffectsTab.LongStiffness.Value                    0 (millimeters part), 0 (inches part) 
    ---------------------------------------------------------  -------------------------------------------------------
    HighOrderEffectsTab.RollMoment                             1 
    ---------------------------------------------------------  -------------------------------------------------------
    HighOrderEffectsTab.UnloadingVerticalStiffnessType         Function 
    ---------------------------------------------------------  -------------------------------------------------------
    HighOrderEffectsTab.VerticalStiffnessTransVelocity.Value   10 (millimeters part), 0.393701 (inches part) 
    =========================================================  =======================================================
    
    .. versionadded:: NX11.0.0
    """
    AdvancedTab: TirePropertyAdvancedParameters = ...
    """
    Returns  the advancedTab.  
    
    This is a builder for the parameters in the TirePropertyBasic UI Advanced tab. 
    
    <hr>
    
    Getter Method
    
    Signature ``AdvancedTab`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.TirePropertyAdvancedParameters` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    BasicTab: TirePropertyBasicParameters = ...
    """
    Returns  the basicTab.  
    
    This is a builder for the parameters in the TirePropertyBasic UI Basic tab. 
    
    <hr>
    
    Getter Method
    
    Signature ``BasicTab`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.TirePropertyBasicParameters` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    HighOrderEffectsTab: TirePropertyHighOrderParameters = ...
    """
    Returns  the highOrderTab.  
    
    This is a builder for the parameters in the TirePropertyBasic UI High Order Effects tab. 
    
    <hr>
    
    Getter Method
    
    Signature ``HighOrderEffectsTab`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.TirePropertyHighOrderParameters` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: TirePropertyBasicBuilder = ...  # unknown typename


class VectorTorqueCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of vector torque objects   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Motion.MotionManager`
    
    .. versionadded:: NX5.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateVectorTorqueBuilder(self, vectortorque: VectorTorque) -> VectorTorqueBuilder:
        """
        Creates a :py:class:`NXOpen.Motion.JointDriverBuilder`  
        
        Signature ``CreateVectorTorqueBuilder(vectortorque)`` 
        
        :param vectortorque:  ":py:class:`NXOpen.Motion.VectorTorque` to be edited,                                                                                               if None then create a new one 
        :type vectortorque: :py:class:`NXOpen.Motion.VectorTorque` 
        :returns: 
        :rtype: :py:class:`NXOpen.Motion.VectorTorqueBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def FindObject(self, name: str) -> VectorTorque:
        """
        Finds the :py:class:`NXOpen.Motion.VectorTorque` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Motion.VectorTorque`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Motion.VectorTorque` with this name.  
        :rtype: :py:class:`NXOpen.Motion.VectorTorque` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    


class DamperCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of motion damper   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Motion.MotionManager`
    
    .. versionadded:: NX6.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateDamperBuilder(self, damper: Damper) -> DamperBuilder:
        """
        Return  :py:class:`NXOpen.Motion.DamperBuilder` object   
        
        Signature ``CreateDamperBuilder(damper)`` 
        
        :param damper:  :py:class:`NXOpen.Motion.Damper` to be edited,                                                         if None then create a new one  
        :type damper: :py:class:`NXOpen.Motion.Damper` 
        :returns:  DamperBuilder object  
        :rtype: :py:class:`NXOpen.Motion.DamperBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def FindObject(self, name: str) -> Damper:
        """
        Finds the :py:class:`NXOpen.Motion.Damper` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name: 
        :type name: str 
        :returns: 
        :rtype: :py:class:`NXOpen.Motion.Damper` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    


class SplineBeamPropertyCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of SplineBeamProperty   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Motion.MotionManager`
    
    .. versionadded:: NX12.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateSplineBeamPropertyBuilder(self, splineBeamProperty: SplineBeamProperty) -> SplineBeamPropertyBuilder:
        """
        Creates a :py:class:`Motion.SplineBeamPropertyBuilder`  
        
        Signature ``CreateSplineBeamPropertyBuilder(splineBeamProperty)`` 
        
        :param splineBeamProperty:  :py:class:`NXOpen.Motion.SplineBeamProperty`                                                                                                                to be edited, if None then create a new one  
        :type splineBeamProperty: :py:class:`NXOpen.Motion.SplineBeamProperty` 
        :returns:  SplineBeamPropertyBuilder object  
        :rtype: :py:class:`NXOpen.Motion.SplineBeamPropertyBuilder` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def FindObject(self, name: str) -> SplineBeamProperty:
        """
        Finds the :py:class:`NXOpen.Motion.SplineBeamProperty` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Motion.SplineBeamProperty`  
        :type name: str 
        :returns:  :py:class:`NXOpen.Motion.SplineBeamProperty` with this name  
        :rtype: :py:class:`NXOpen.Motion.SplineBeamProperty` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    


class CouplerCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of motion couplers   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Motion.MotionManager`
    
    .. versionadded:: NX6.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateCouplerGearBuilder(self, coupler: CouplerGear) -> CouplerGearBuilder:
        """
        Creates the builder object of :py:class:`NXOpen.Motion.CouplerGear` object   
        
        Signature ``CreateCouplerGearBuilder(coupler)`` 
        
        :param coupler: 
        :type coupler: :py:class:`NXOpen.Motion.CouplerGear` 
        :returns: 
        :rtype: :py:class:`NXOpen.Motion.CouplerGearBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def CreateCouplerRckpnBuilder(self, coupler: CouplerRckpn) -> CouplerRckpnBuilder:
        """
        Creates the builder object of :py:class:`NXOpen.Motion.CouplerRckpn` object   
        
        Signature ``CreateCouplerRckpnBuilder(coupler)`` 
        
        :param coupler: 
        :type coupler: :py:class:`NXOpen.Motion.CouplerRckpn` 
        :returns: 
        :rtype: :py:class:`NXOpen.Motion.CouplerRckpnBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def CreateCouplerCableBuilder(self, coupler: CouplerCable) -> CouplerCableBuilder:
        """
        Creates the builder object of :py:class:`NXOpen.Motion.CouplerCable` object   
        
        Signature ``CreateCouplerCableBuilder(coupler)`` 
        
        :param coupler: 
        :type coupler: :py:class:`NXOpen.Motion.CouplerCable` 
        :returns: 
        :rtype: :py:class:`NXOpen.Motion.CouplerCableBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def FindObject(self, name: str) -> Coupler:
        """
        Finds a coupler with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:   The name of the :py:class:`Motion.Coupler`.  
        :type name: str 
        :returns:  :py:class:`Motion.Coupler` with this name.  
        :rtype: :py:class:`NXOpen.Motion.Coupler` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    


class Joint(MotionObject, IGraphSource):
    """
    Represents a motion joint object   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Motion.JointBuilder`
    
    .. versionadded:: NX5.0.0
    """
    Null: Joint = ...  # unknown typename


class Tire(MotionObject, IGraphSource):
    """
    Tire Motion element.
    
    This object contains force elements required in a vehicle multi-body model 
    to represent the forces generated at the interface between the road and the tire.
    The forces are calculated by the solver based on the applied tire model parameters
    and the applied road surface.
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Motion.TireBuilder`
    
    .. versionadded:: NX11.0.0
    """
    Null: Tire = ...  # unknown typename


class SelectRoad(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a single object selection.  
    
    .. versionadded:: NX5.0.0
    """
    
    @typing.overload
    def SetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def SetValue(self, selection: Road) -> None:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.Road` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: Road) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.Road` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: Road, view: NXOpen.View, point: NXOpen.Point3d) -> None:
        """
        The object being selected with the object's view and object's point
        
        Signature ``SetValue(selection, view, point)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.Road` 
        :param view:  selected object view 
        :type view: :py:class:`NXOpen.View` 
        :param point:  selected object point 
        :type point: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, snapType: NXOpen.InferSnapTypeSnapType, selection1: Road, view1: NXOpen.View, point1: NXOpen.Point3d, selection2: Road, view2: NXOpen.View, point2: NXOpen.Point3d) -> None:
        """
        The object being selected with the objects view and objects point and snap information.
        
        Signature ``SetValue(snapType, selection1, view1, point1, selection2, view2, point2)`` 
        
        :param snapType:   snap point type 
        :type snapType: :py:class:`NXOpen.InferSnapTypeSnapType` 
        :param selection1:  first selected object  
        :type selection1: :py:class:`NXOpen.Motion.Road` 
        :param view1:  first selected object view 
        :type view1: :py:class:`NXOpen.View` 
        :param point1:  first selected object point 
        :type point1: :py:class:`NXOpen.Point3d` 
        :param selection2:  second selected object  
        :type selection2: :py:class:`NXOpen.Motion.Road` 
        :param view2:  second selected object view 
        :type view2: :py:class:`NXOpen.View` 
        :param point2:  second selected object point 
        :type point2: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: Road, caeSubType: NXOpen.CaeObjectTypeCaeSubType, caeSubId: int) -> None:
        """
        The object being selected with CAE set object information.
        
        Signature ``SetValue(selection, caeSubType, caeSubId)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.Road` 
        :param caeSubType:  CAE set object sub type 
        :type caeSubType: :py:class:`NXOpen.CaeObjectTypeCaeSubType` 
        :param caeSubId:  CAE set object sub id 
        :type caeSubId: int 
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.SetValue`.
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def GetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def GetValue(self) -> Road:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :returns:  selected object  
        :rtype: :py:class:`NXOpen.Motion.Road` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self, selection: Road) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.Road` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the object's view and point.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, view, point). selection is a :py:class:`NXOpen.Motion.Road`.   selected object view is a :py:class:`NXOpen.View`.   selected object viewpoint is a :py:class:`NXOpen.Point3d`.   selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the objects view and point and snap information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (snapType, selection1, view1, point1, selection2, view2, point2). snapType is a :py:class:`NXOpen.InferSnapTypeSnapType`.    snap point typeselection1 is a :py:class:`NXOpen.Motion.Road`.   first selected object view1 is a :py:class:`NXOpen.View`.   first selected object viewpoint1 is a :py:class:`NXOpen.Point3d`.   first selected object pointselection2 is a :py:class:`NXOpen.Motion.Road`.   second selected object view2 is a :py:class:`NXOpen.View`.   second selected object viewpoint2 is a :py:class:`NXOpen.Point3d`.   second selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with CAE set object information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, caeSubType, caeSubId). selection is a :py:class:`NXOpen.Motion.Road`.   selected object caeSubType is a :py:class:`NXOpen.CaeObjectTypeCaeSubType`.   CAE set object sub typecaeSubId is a int.   CAE set object sub id
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.GetValue`.
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Value: Road = ...
    """
    Returns or sets  the object being selected
    
    <hr>
    
    Getter Method
    
    Signature ``Value`` 
    
    :returns:  selected object  
    :rtype: :py:class:`NXOpen.Motion.Road` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Value`` 
    
    :param selection:  selected object  
    :type selection: :py:class:`NXOpen.Motion.Road` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SelectRoad = ...  # unknown typename


class OutputPortAssociation(PortAssociation):
    """
    Represents a :py:class:`Motion.OutputPortAssociation`.  
    
    This class
    contains the port association for the output of a mechatronics element 
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.MechatronicsBuilder.NewOutputListItem`
    
    .. versionadded:: NX11.0.0
    """
    AssociatedPortName: str = ...
    """
    Returns or sets  the created and associated port name 
    
    <hr>
    
    Getter Method
    
    Signature ``AssociatedPortName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``AssociatedPortName`` 
    
    :param associatedPortName: 
    :type associatedPortName: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Port: ControlPort = ...
    """
    Returns  the associated port 
    
    <hr>
    
    Getter Method
    
    Signature ``Port`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.ControlPort` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: OutputPortAssociation = ...  # unknown typename


class MarkerCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Markers   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Part`
    
    .. versionadded:: NX4.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def Create(self, name: str, subtype: MarkerMarkerType, link: Link, origin: NXOpen.Point, orientation: NXOpen.NXMatrix) -> Marker:
        """
        Create a :py:class:`NXOpen.Motion.Marker` in the Scenario for Motion+ database.  
        
        Signature ``Create(name, subtype, link, origin, orientation)`` 
        
        :param name: 
        :type name: str 
        :param subtype: 
        :type subtype: :py:class:`NXOpen.Motion.MarkerMarkerType` 
        :param link: 
        :type link: :py:class:`NXOpen.Motion.Link` 
        :param origin: 
        :type origin: :py:class:`NXOpen.Point` 
        :param orientation: 
        :type orientation: :py:class:`NXOpen.NXMatrix` 
        :returns:  New :py:class:`NXOpen.Motion.Marker`  
        :rtype: :py:class:`NXOpen.Motion.Marker` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def FindObject(self, name: str) -> Marker:
        """
        Finds the :py:class:`NXOpen.Motion.Marker` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Motion.Marker`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Motion.Marker` with this name.  
        :rtype: :py:class:`NXOpen.Motion.Marker` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def CreateMarkerBuilder(self, marker: Marker) -> MarkerBuilder:
        """
        Creates a :py:class:`NXOpen.Motion.MarkerBuilder`  
        
        Signature ``CreateMarkerBuilder(marker)`` 
        
        :param marker:  :py:class:`NXOpen.Motion.Marker` to be edited, if None then create a new one  
        :type marker: :py:class:`NXOpen.Motion.Marker` 
        :returns: 
        :rtype: :py:class:`NXOpen.Motion.MarkerBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    


class TextBasedElement(MotionObject):
    """
    Represents a :py:class:`Motion.TextBasedElement`.  
    
    This class
    exposes the Text Based Element. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Motion.TextBasedElementBuilder`
    
    .. versionadded:: NX12.0.0
    """
    Null: TextBasedElement = ...  # unknown typename


class UserDefinedSection(BaseSection):
    """
    Represents a user defined section function   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Motion.UserDefinedSectionBuilder`
    
    .. versionadded:: NX12.0.0
    """
    Null: UserDefinedSection = ...  # unknown typename


class MarkerMarkerTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MarkerMarkerType():
    """
    Marker subtype 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Undefined", " - "
       "Inertia", "Defines the center of inertia for a link. It will be automatically created for a link."
       "UserDefined", "User created marker. It can be attached to any motion object."
       "CenterOfMass", "Defines the center of mass for a link. It will be automatically created for a link."
    """
    Undefined = 0  # MarkerMarkerTypeMemberType
    Inertia = 1  # MarkerMarkerTypeMemberType
    UserDefined = 2  # MarkerMarkerTypeMemberType
    CenterOfMass = 3  # MarkerMarkerTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class Marker(NXOpen.DisplayableObject, IGraphSource):
    """
    Represents the Motion Marker class.  
    
    A Marker defines a point with
    orientations to request motion results at, and must be associated
    with a Motion Link. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Motion.MarkerBuilder`
    
    .. versionadded:: NX4.0.0
    """
    
    class MarkerType():
        """
        Marker subtype 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Undefined", " - "
           "Inertia", "Defines the center of inertia for a link. It will be automatically created for a link."
           "UserDefined", "User created marker. It can be attached to any motion object."
           "CenterOfMass", "Defines the center of mass for a link. It will be automatically created for a link."
        """
        Undefined = 0  # MarkerMarkerTypeMemberType
        Inertia = 1  # MarkerMarkerTypeMemberType
        UserDefined = 2  # MarkerMarkerTypeMemberType
        CenterOfMass = 3  # MarkerMarkerTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    Null: Marker = ...  # unknown typename


class ForceValueTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ForceValueTypes():
    """
    Defines function value type 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Constant", "constant type use constant value define force magnitude"
       "Function", "function type use function define force magnitude"
       "Profile", "profile type use profiles to define force magnitude"
    """
    Constant = 0  # ForceValueTypesMemberType
    Function = 1  # ForceValueTypesMemberType
    Profile = 2  # ForceValueTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class GraphLegendData(NXOpen.NXObject, NXOpen.CAE.FTK.IApplicationData):
    """
    Represents a motion graph legend data   
    
    Not support KF.
    
    .. versionadded:: NX12.0.0
    """
    
    def AskNumberOfDisplayableAttributes(self) -> int:
        """
        Asks the count of attributes which could be showed on legend table  
        
        Signature ``AskNumberOfDisplayableAttributes()`` 
        
        :returns: 
        :rtype: int 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    
    def AskNthDisplayableAttributeName(self, nth: int) -> str:
        """
        Asks the name of a displayable attribute  
        
        Signature ``AskNthDisplayableAttributeName(nth)`` 
        
        :param nth: 
        :type nth: int 
        :returns: 
        :rtype: str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    
    def AskNthDisplayableAttributeValue(self, nth: int) -> str:
        """
        Asks the value of a displayable attribute  
        
        Signature ``AskNthDisplayableAttributeValue(nth)`` 
        
        :param nth: 
        :type nth: int 
        :returns: 
        :rtype: str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    Null: GraphLegendData = ...  # unknown typename


class CurveContactAdams(NXOpen.NXObject):
    """
    Represents a :py:class:`NXOpen.Motion.CurveContactAdams`   
    
    .. versionadded:: NX5.0.0
    """
    DynamicCoefficientExpression: NXOpen.Expression = ...
    """
    Returns  the dynamic coefficient expression
    
    <hr>
    
    Getter Method
    
    Signature ``DynamicCoefficientExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ForceExponentExpression: NXOpen.Expression = ...
    """
    Returns  the force exponent expression
    
    <hr>
    
    Getter Method
    
    Signature ``ForceExponentExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    MaterialDampingExpression: NXOpen.Expression = ...
    """
    Returns  the material damping expression
    
    <hr>
    
    Getter Method
    
    Signature ``MaterialDampingExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    PenetrationDepthExpression: NXOpen.Expression = ...
    """
    Returns  the penetration depth expression
    
    <hr>
    
    Getter Method
    
    Signature ``PenetrationDepthExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SlipVelocityExpression: NXOpen.Expression = ...
    """
    Returns  the slip velocity expression
    
    <hr>
    
    Getter Method
    
    Signature ``SlipVelocityExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    StaticCoefficientExpression: NXOpen.Expression = ...
    """
    Returns  the static coefficient expression
    
    <hr>
    
    Getter Method
    
    Signature ``StaticCoefficientExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    StiffnessExpression: NXOpen.Expression = ...
    """
    Returns  the stiffness expression
    
    <hr>
    
    Getter Method
    
    Signature ``StiffnessExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    TransitionVelocityExpression: NXOpen.Expression = ...
    """
    Returns  the transition velocity expression
    
    <hr>
    
    Getter Method
    
    Signature ``TransitionVelocityExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: CurveContactAdams = ...  # unknown typename


class ScalarForce(MotionObject, IGraphSource):
    """
    Represents the Motion ScalarForce class.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Motion.ScalarForceBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: ScalarForce = ...  # unknown typename


class LoadTransferCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of load transfer objects   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Motion.MotionManager`
    
    .. versionadded:: NX9.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateLoadTransferBuilder(self, loadTransfer: LoadTransfer) -> LoadTransferBuilder:
        """
        Creates a :py:class:`NXOpen.Motion.LoadTransferBuilder`.  
        
        If active :py:class:`NXOpen.Motion.MotionSolution` is not present, builder will not be created.  
        
        Signature ``CreateLoadTransferBuilder(loadTransfer)`` 
        
        :param loadTransfer:  :py:class:`NXOpen.Motion.LoadTransfer` to be edited, if None then create a new one  
        :type loadTransfer: :py:class:`NXOpen.Motion.LoadTransfer` 
        :returns: 
        :rtype: :py:class:`NXOpen.Motion.LoadTransferBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def FindObject(self, name: str) -> LoadTransfer:
        """
        Finds the :py:class:`NXOpen.Motion.LoadTransfer` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Motion.LoadTransfer`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Motion.LoadTransfer` with this name.  
        :rtype: :py:class:`NXOpen.Motion.LoadTransfer` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    


class CouplerCableBuilder(CouplerBuilder):
    """
    Represents a :py:class:`NXOpen.Motion.CouplerCableBuilder`   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.CouplerCollection.CreateCouplerCableBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: CouplerCableBuilder = ...  # unknown typename


class Damper(Connector, IGraphSource):
    """
    Represents a damper   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Motion.DamperBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: Damper = ...  # unknown typename


class SplineBeamProperty(MotionObject):
    """
    Represents a SplineBeam Property  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Motion.SplineBeamPropertyBuilder`
    
    .. versionadded:: NX12.0.0
    """
    Null: SplineBeamProperty = ...  # unknown typename


class JointBuilder(MotionBuilder):
    """
    This builder class is used to create or edit :py:class:`NXOpen.Motion.Joint` objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.JointCollection.CreateJointBuilder`
    
    .. versionadded:: NX5.0.0
    """
    JointDefine: JointDefine = ...
    """
    Returns  the joint define 
    
    <hr>
    
    Getter Method
    
    Signature ``JointDefine`` 
    
    :returns:  The Joint define  
    :rtype: :py:class:`NXOpen.Motion.JointDefine` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    JointFriction: JointFriction = ...
    """
    Returns  the joint friction 
    
    <hr>
    
    Getter Method
    
    Signature ``JointFriction`` 
    
    :returns:  The Joint friction  
    :rtype: :py:class:`NXOpen.Motion.JointFriction` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    JointMultiDrivers: DriverMultiOperations = ...
    """
    Returns  the driver multi operations : DriverMultiOperations Block 
    
    <hr>
    
    Getter Method
    
    Signature ``JointMultiDrivers`` 
    
    :returns:  The driver multi operations  
    :rtype: :py:class:`NXOpen.Motion.DriverMultiOperations` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: JointBuilder = ...  # unknown typename


class MechatronicsBuilderMechatronicsModelTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MechatronicsBuilderMechatronicsModelType():
    """
    the mechatronics type - possible values are Matlab or Amesim
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Amesim", " - "
       "Matlab", " - "
    """
    Amesim = 0  # MechatronicsBuilderMechatronicsModelTypeMemberType
    Matlab = 1  # MechatronicsBuilderMechatronicsModelTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MechatronicsBuilderPurposeTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MechatronicsBuilderPurposeType():
    """
    the mechatronics purpose type - possible values are Import and Export
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Import", " - "
       "Export", " - "
    """
    Import = 0  # MechatronicsBuilderPurposeTypeMemberType
    Export = 1  # MechatronicsBuilderPurposeTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MechatronicsBuilderSolverIntegrationTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MechatronicsBuilderSolverIntegrationType():
    """
    the mechatronics integration type - possible values are ModelExchange and CoSimulation
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "CoSimulation", " - "
       "ModelExchange", " - "
    """
    CoSimulation = 0  # MechatronicsBuilderSolverIntegrationTypeMemberType
    ModelExchange = 1  # MechatronicsBuilderSolverIntegrationTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MechatronicsBuilderSolverCommunicationIntervalTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MechatronicsBuilderSolverCommunicationIntervalType():
    """
    the mechatronics communication interval type - only for Amesim! - possible values are Constant and Variable
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Constant", " - "
       "Variable", " - "
    """
    Constant = 0  # MechatronicsBuilderSolverCommunicationIntervalTypeMemberType
    Variable = 1  # MechatronicsBuilderSolverCommunicationIntervalTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MechatronicsBuilder(MotionBuilder):
    """
    Represents a :py:class:`Motion.Mechatronics` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.MechatronicsCollection.CreateMechatronicsBuilder`
    
    Default values.
    
    ============================  ============================================
    Property                      Value
    ============================  ============================================
    CommunicationInterval.Value   0.01 (millimeters part), 0.01 (inches part) 
    ----------------------------  --------------------------------------------
    CommunicationIntervalType     Constant 
    ----------------------------  --------------------------------------------
    IntegrationType               CoSimulation 
    ----------------------------  --------------------------------------------
    MechatronicsType              Amesim 
    ----------------------------  --------------------------------------------
    Purpose                       Import 
    ============================  ============================================
    
    .. versionadded:: NX11.0.0
    """
    
    class MechatronicsModelType():
        """
        the mechatronics type - possible values are Matlab or Amesim
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Amesim", " - "
           "Matlab", " - "
        """
        Amesim = 0  # MechatronicsBuilderMechatronicsModelTypeMemberType
        Matlab = 1  # MechatronicsBuilderMechatronicsModelTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class PurposeType():
        """
        the mechatronics purpose type - possible values are Import and Export
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Import", " - "
           "Export", " - "
        """
        Import = 0  # MechatronicsBuilderPurposeTypeMemberType
        Export = 1  # MechatronicsBuilderPurposeTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SolverIntegrationType():
        """
        the mechatronics integration type - possible values are ModelExchange and CoSimulation
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "CoSimulation", " - "
           "ModelExchange", " - "
        """
        CoSimulation = 0  # MechatronicsBuilderSolverIntegrationTypeMemberType
        ModelExchange = 1  # MechatronicsBuilderSolverIntegrationTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SolverCommunicationIntervalType():
        """
        the mechatronics communication interval type - only for Amesim! - possible values are Constant and Variable
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Constant", " - "
           "Variable", " - "
        """
        Constant = 0  # MechatronicsBuilderSolverCommunicationIntervalTypeMemberType
        Variable = 1  # MechatronicsBuilderSolverCommunicationIntervalTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def ReadInterfaceFromFile(self, filePath: str) -> None:
        """
        Reads the input/output definition of a mechatronics element from an external file, when purpose 
        is specified as Export.  
        
        Allowed file types are .txt, .csv, and Excel files
        
        Signature ``ReadInterfaceFromFile(filePath)`` 
        
        :param filePath: 
        :type filePath: str 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def RefreshLists(self) -> None:
        """
        Updates the list of available inputs and outputs (for both MATLAB ans Amesim models) and Configuration Parametersa and port Variables (for Amesim only) from the selected HeaderFile/ModelFile 
        
        Signature ``RefreshLists()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def GetParameterGroupNames(self) -> 'list[str]':
        """
        Allows retrieving the list of names  of available configuration parameter groups  
        
        Signature ``GetParameterGroupNames()`` 
        
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def GetPortVariableGroupNames(self) -> 'list[str]':
        """
        Allows retrieving the list of names  of available port variables groups   
        
        Signature ``GetPortVariableGroupNames()`` 
        
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def GetInput(self, inputName: str) -> InputPortAssociation:
        """
        Retrieves an input port association from its name  
        
        Signature ``GetInput(inputName)`` 
        
        :param inputName: 
        :type inputName: str 
        :returns: 
        :rtype: :py:class:`NXOpen.Motion.InputPortAssociation` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def GetOutput(self, inputName: str) -> OutputPortAssociation:
        """
        Retrieves an output port association from its name  
        
        Signature ``GetOutput(inputName)`` 
        
        :param inputName: 
        :type inputName: str 
        :returns: 
        :rtype: :py:class:`NXOpen.Motion.OutputPortAssociation` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def GetPortVariable(self, inputName: str) -> PortVariable:
        """
        Searches for the watch variable by name in the active group  
        
        Signature ``GetPortVariable(inputName)`` 
        
        :param inputName: 
        :type inputName: str 
        :returns: 
        :rtype: :py:class:`NXOpen.Motion.PortVariable` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def GetConfigurationParameter(self, inputName: str) -> ConfigurationParameter:
        """
        Searches for the watch parameter by name in the active group  
        
        Signature ``GetConfigurationParameter(inputName)`` 
        
        :param inputName: 
        :type inputName: str 
        :returns: 
        :rtype: :py:class:`NXOpen.Motion.ConfigurationParameter` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def NewOutputListItem(self) -> OutputPortAssociation:
        """
        Creates a new output list item including expressions  
        
        Signature ``NewOutputListItem()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Motion.OutputPortAssociation` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def NewInputListItem(self) -> InputPortAssociation:
        """
        Creates a new input list item including expressions  
        
        Signature ``NewInputListItem()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Motion.InputPortAssociation` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    ActiveParameterGroupName: str = ...
    """
    Returns or sets  the active configuration parameters group name 
    
    <hr>
    
    Getter Method
    
    Signature ``ActiveParameterGroupName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``ActiveParameterGroupName`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ActivePortVariableGroupName: str = ...
    """
    Returns or sets  the active port variable  group name 
    
    <hr>
    
    Getter Method
    
    Signature ``ActivePortVariableGroupName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``ActivePortVariableGroupName`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    CommunicationInterval: NXOpen.Expression = ...
    """
    Returns or sets  the communication interval  
    
    <hr>
    
    Getter Method
    
    Signature ``CommunicationInterval`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``CommunicationInterval`` 
    
    :param communicationInterval: 
    :type communicationInterval: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    CommunicationIntervalType: MechatronicsBuilderSolverCommunicationIntervalType = ...
    """
    Returns or sets  the communication interval type - possible values are Constant, Variable 
    
    <hr>
    
    Getter Method
    
    Signature ``CommunicationIntervalType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.MechatronicsBuilderSolverCommunicationIntervalType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``CommunicationIntervalType`` 
    
    :param communicationIntervalType: 
    :type communicationIntervalType: :py:class:`NXOpen.Motion.MechatronicsBuilderSolverCommunicationIntervalType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ConfigurationParametersList: ConfigurationParameterList = ...
    """
    Returns  the configuration/watch parameters list 
    
    <hr>
    
    Getter Method
    
    Signature ``ConfigurationParametersList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.ConfigurationParameterList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    HeaderFile: str = ...
    """
    Returns or sets  the header file - matlab speciffic header file, that contains the definition of the interface (inputs, outputs) 
    
    <hr>
    
    Getter Method
    
    Signature ``HeaderFile`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``HeaderFile`` 
    
    :param filename: 
    :type filename: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    InputPortsList: InputPortAssociationList = ...
    """
    Returns  the input ports list 
    
    <hr>
    
    Getter Method
    
    Signature ``InputPortsList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.InputPortAssociationList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    IntegrationType: MechatronicsBuilderSolverIntegrationType = ...
    """
    Returns or sets  the integration type - possible values are CoSimulation, ModelExchange 
    
    <hr>
    
    Getter Method
    
    Signature ``IntegrationType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.MechatronicsBuilderSolverIntegrationType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``IntegrationType`` 
    
    :param integrationType: 
    :type integrationType: :py:class:`NXOpen.Motion.MechatronicsBuilderSolverIntegrationType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    MechatronicsType: MechatronicsBuilderMechatronicsModelType = ...
    """
    Returns or sets  the mechatronics type - possible values are Matlab or Amesim
    
    <hr>
    
    Getter Method
    
    Signature ``MechatronicsType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.MechatronicsBuilderMechatronicsModelType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``MechatronicsType`` 
    
    :param mechatronicsType: 
    :type mechatronicsType: :py:class:`NXOpen.Motion.MechatronicsBuilderMechatronicsModelType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ModelFile: str = ...
    """
    Returns or sets  the model file - a file path to a MATLAB generated DLL or to an Amesim ame file 
    
    <hr>
    
    Getter Method
    
    Signature ``ModelFile`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``ModelFile`` 
    
    :param filename: 
    :type filename: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Name: str = ...
    """
    Returns or sets  the name of the element
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    OutputPortsList: OutputPortAssociationList = ...
    """
    Returns  the output ports list 
    
    <hr>
    
    Getter Method
    
    Signature ``OutputPortsList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.OutputPortAssociationList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    PortVariablesList: PortVariableList = ...
    """
    Returns  the watch variables list 
    
    <hr>
    
    Getter Method
    
    Signature ``PortVariablesList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.PortVariableList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Purpose: MechatronicsBuilderPurposeType = ...
    """
    Returns or sets  the purpose of the mechatronics element - possible values are Import, Export 
    
    <hr>
    
    Getter Method
    
    Signature ``Purpose`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.MechatronicsBuilderPurposeType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Purpose`` 
    
    :param purpose: 
    :type purpose: :py:class:`NXOpen.Motion.MechatronicsBuilderPurposeType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: MechatronicsBuilder = ...  # unknown typename


class BushingSphericalCoefficientsComponent(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a Motion BushingSphericalCoefficientsComponent
    
    .. versionadded:: NX12.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    ConicalCurveProfile: SelectFieldData = ...
    """
    Returns  the conical curve profile.  
    
    It is available only when 
    :py:meth:`Motion.BushingSphericalCoefficientsComponent.ConicalType` is set to :py:class:`MotionConnectorCoefficientTypes.Profile2d <MotionConnectorCoefficientTypes>` or
    :py:class:`MotionConnectorCoefficientTypes.ExpressionAndProfile2d <MotionConnectorCoefficientTypes>` 
    
    <hr>
    
    Getter Method
    
    Signature ``ConicalCurveProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectFieldData` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ConicalExpression: NXOpen.Expression = ...
    """
    Returns  the conical expression type 
    
    <hr>
    
    Getter Method
    
    Signature ``ConicalExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    ConicalFunction: NXOpen.CAE.Function = ...
    """
    Returns or sets  the conical function type 
    
    <hr>
    
    Getter Method
    
    Signature ``ConicalFunction`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CAE.Function` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ConicalFunction`` 
    
    :param conicalFunction: 
    :type conicalFunction: :py:class:`NXOpen.CAE.Function` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ConicalType: ConnectorCoefficientTypes = ...
    """
    Returns or sets  the conical coefficient type 
    
    <hr>
    
    Getter Method
    
    Signature ``ConicalType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.ConnectorCoefficientTypes` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ConicalType`` 
    
    :param conicalType: 
    :type conicalType: :py:class:`NXOpen.Motion.ConnectorCoefficientTypes` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    RadialCurveProfile: SelectFieldData = ...
    """
    Returns  the radial curve profile.  
    
    It is available only when 
    :py:meth:`Motion.BushingSphericalCoefficientsComponent.RadialType` is set to :py:class:`MotionConnectorCoefficientTypes.Profile2d <MotionConnectorCoefficientTypes>` or
    :py:class:`MotionConnectorCoefficientTypes.ExpressionAndProfile2d <MotionConnectorCoefficientTypes>` 
    
    <hr>
    
    Getter Method
    
    Signature ``RadialCurveProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectFieldData` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    RadialExpression: NXOpen.Expression = ...
    """
    Returns  the radial expression type 
    
    <hr>
    
    Getter Method
    
    Signature ``RadialExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    RadialFunction: NXOpen.CAE.Function = ...
    """
    Returns or sets  the radial function type 
    
    <hr>
    
    Getter Method
    
    Signature ``RadialFunction`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CAE.Function` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RadialFunction`` 
    
    :param radialFunction: 
    :type radialFunction: :py:class:`NXOpen.CAE.Function` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    RadialType: ConnectorCoefficientTypes = ...
    """
    Returns or sets  the radial type 
    
    <hr>
    
    Getter Method
    
    Signature ``RadialType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.ConnectorCoefficientTypes` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RadialType`` 
    
    :param radialType: 
    :type radialType: :py:class:`NXOpen.Motion.ConnectorCoefficientTypes` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: BushingSphericalCoefficientsComponent = ...  # unknown typename


class TirePropertyCdCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Motion CDTire Tire Property elements   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Motion.MotionManager`
    
    .. versionadded:: NX11.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateTirePropertyCdBuilder(self, tireProperty: TirePropertyCd) -> TirePropertyCdBuilder:
        """
        Return  :py:class:`NXOpen.Motion.TirePropertyCdBuilder` object   
        
        Signature ``CreateTirePropertyCdBuilder(tireProperty)`` 
        
        :param tireProperty:  :py:class:`NXOpen.Motion.TirePropertyCd`                                                                                                                to be edited, if None then create a new one  
        :type tireProperty: :py:class:`NXOpen.Motion.TirePropertyCd` 
        :returns:  TirePropertyCdBuilder object  
        :rtype: :py:class:`NXOpen.Motion.TirePropertyCdBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def FindObject(self, name: str) -> TirePropertyCd:
        """
        Finds the :py:class:`NXOpen.Motion.TirePropertyCd` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Motion.TirePropertyCd`  
        :type name: str 
        :returns:  :py:class:`NXOpen.Motion.TirePropertyCd` with this name  
        :rtype: :py:class:`NXOpen.Motion.TirePropertyCd` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    


class JointFrictionLms(NXOpen.TaggedObject):
    """
    Represents a lms joint friction object   
    
    .. versionadded:: NX10.0.0
    """
    BallRadius: NXOpen.Expression = ...
    """
    Returns  the ball radius 
    
    <hr>
    
    Getter Method
    
    Signature ``BallRadius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    BendingReactionArm: NXOpen.Expression = ...
    """
    Returns  the bending reaction arm 
    
    <hr>
    
    Getter Method
    
    Signature ``BendingReactionArm`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    FrictionArm: NXOpen.Expression = ...
    """
    Returns  the friction arm 
    
    <hr>
    
    Getter Method
    
    Signature ``FrictionArm`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    InitialOverlap: NXOpen.Expression = ...
    """
    Returns  the initial overlap 
    
    <hr>
    
    Getter Method
    
    Signature ``InitialOverlap`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    MuDynamic: NXOpen.Expression = ...
    """
    Returns  the mu dynamic 
    
    <hr>
    
    Getter Method
    
    Signature ``MuDynamic`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    MuStatic: NXOpen.Expression = ...
    """
    Returns  the mu static 
    
    <hr>
    
    Getter Method
    
    Signature ``MuStatic`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    PinRadius: NXOpen.Expression = ...
    """
    Returns  the pin radius 
    
    <hr>
    
    Getter Method
    
    Signature ``PinRadius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    ReactionArm: NXOpen.Expression = ...
    """
    Returns  the reaction arm 
    
    <hr>
    
    Getter Method
    
    Signature ``ReactionArm`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    RotationalStictionTransitionVelocity: NXOpen.Expression = ...
    """
    Returns  the rotational velocity tolerance 
    
    <hr>
    
    Getter Method
    
    Signature ``RotationalStictionTransitionVelocity`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    TranslationalStictionTransitionVelocity: NXOpen.Expression = ...
    """
    Returns  the translational velocity tolerance 
    
    <hr>
    
    Getter Method
    
    Signature ``TranslationalStictionTransitionVelocity`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Null: JointFrictionLms = ...  # unknown typename


class PointOnCurveBuilder(MotionBuilder):
    """
    Represents a :py:class:`NXOpen.Motion.PointOnCurveBuilder`
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.PointOnCurveCollection.CreatePointOnCurveBuilder`
    
    Default values.
    
    =======================  ========
    Property                 Value
    =======================  ========
    CurveParameterizedType   Spacing 
    =======================  ========
    
    .. versionadded:: NX6.0.0
    """
    
    def GetCurves(self) -> 'list[NXOpen.NXObject]':
        """
        Returns the curves  
        
        Signature ``GetCurves()`` 
        
        :returns:  curve or edge 
        :rtype: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetCurves(self, curves: 'list[NXOpen.NXObject]') -> None:
        """
        Sets the curves 
        
        Signature ``SetCurves(curves)`` 
        
        :param curves:  curve or edge 
        :type curves: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    CurveParameterizedType: CurveParameterizedTypes = ...
    """
    Returns or sets  the curve parameterized type 
    
    <hr>
    
    Getter Method
    
    Signature ``CurveParameterizedType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.CurveParameterizedTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CurveParameterizedType`` 
    
    :param curveParameterizedType: 
    :type curveParameterizedType: :py:class:`NXOpen.Motion.CurveParameterizedTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Link: SelectLink = ...
    """
    Returns  the action link 
    
    <hr>
    
    Getter Method
    
    Signature ``Link`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectLink` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Name: str = ...
    """
    Returns or sets  the name 
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Point: NXOpen.Point = ...
    """
    Returns or sets  the selected point 
    
    <hr>
    
    Getter Method
    
    Signature ``Point`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Point`` 
    
    :param point: 
    :type point: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SpacingExpression: NXOpen.Expression = ...
    """
    Returns  the user defined spacing 
    
    <hr>
    
    Getter Method
    
    Signature ``SpacingExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: PointOnCurveBuilder = ...  # unknown typename


class TirePropertyMotorcycleBuilder(TirePropertyBuilder):
    """
    Represents a TirePropertyMotorcycleBuilder builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.TirePropertyMotorcycleCollection.CreateTirePropertyMotorcycleBuilder`
    
    Default values.
    
    =========================================================  =======================================================
    Property                                                   Value
    =========================================================  =======================================================
    AdvancedTab.AligningMomentArm.Value                        0.0 (millimeters part), 0.0 (inches part) 
    ---------------------------------------------------------  -------------------------------------------------------
    AdvancedTab.ConeIndex.Value                                0.0 (millimeters part), 0.0 (inches part) 
    ---------------------------------------------------------  -------------------------------------------------------
    AdvancedTab.ContactAreaType                                Function 
    ---------------------------------------------------------  -------------------------------------------------------
    AdvancedTab.DistributedContact                             0 
    ---------------------------------------------------------  -------------------------------------------------------
    AdvancedTab.FrictionType                                   Function 
    ---------------------------------------------------------  -------------------------------------------------------
    AdvancedTab.NumDivisions.Value                             1 (millimeters part), 1 (inches part) 
    ---------------------------------------------------------  -------------------------------------------------------
    AdvancedTab.RelaxationLength.Value                         0.0 (millimeters part), 0.0 (inches part) 
    ---------------------------------------------------------  -------------------------------------------------------
    AdvancedTab.RollingRadiusType                              None 
    ---------------------------------------------------------  -------------------------------------------------------
    AdvancedTab.RollingRadiusValue.Value                       0.0 (millimeters part), 0.0 (inches part) 
    ---------------------------------------------------------  -------------------------------------------------------
    AdvancedTab.SectionHeight.Value                            0.0 (millimeters part), 0.0 (inches part) 
    ---------------------------------------------------------  -------------------------------------------------------
    AdvancedTab.SectionWidth.Value                             0.0 (millimeters part), 0.0 (inches part) 
    ---------------------------------------------------------  -------------------------------------------------------
    AdvancedTab.StaticHold                                     1 
    ---------------------------------------------------------  -------------------------------------------------------
    AdvancedTab.SurfaceType                                    Simple 
    ---------------------------------------------------------  -------------------------------------------------------
    AdvancedTab.TransDampingDeflection.Value                   0.0 (millimeters part), 0.0 (inches part) 
    ---------------------------------------------------------  -------------------------------------------------------
    BasicTab.CorneringStiffness.Value                          1000000.0 (millimeters part), 224808.944 (inches part) 
    ---------------------------------------------------------  -------------------------------------------------------
    BasicTab.FrictionCoefficient.Value                         1.0 (millimeters part), 1.0 (inches part) 
    ---------------------------------------------------------  -------------------------------------------------------
    BasicTab.LateralForceType                                  Cornering 
    ---------------------------------------------------------  -------------------------------------------------------
    BasicTab.Radius.Value                                      300 (millimeters part), 11.811 (inches part) 
    ---------------------------------------------------------  -------------------------------------------------------
    BasicTab.RollingResistance.Value                           0.0 (millimeters part), 0.0 (inches part) 
    ---------------------------------------------------------  -------------------------------------------------------
    BasicTab.VerticalDamping.DataType                          Expression 
    ---------------------------------------------------------  -------------------------------------------------------
    HighOrderEffectsTab.CarcassMass.Value                      0.0 (millimeters part), 0.0 (inches part) 
    ---------------------------------------------------------  -------------------------------------------------------
    HighOrderEffectsTab.LateralDamping.Value                   0 (millimeters part), 0 (inches part) 
    ---------------------------------------------------------  -------------------------------------------------------
    HighOrderEffectsTab.LateralStiffness.Value                 0 (millimeters part), 0 (inches part) 
    ---------------------------------------------------------  -------------------------------------------------------
    HighOrderEffectsTab.LongDamping.Value                      0 (millimeters part), 0 (inches part) 
    ---------------------------------------------------------  -------------------------------------------------------
    HighOrderEffectsTab.LongStiffness.Value                    0 (millimeters part), 0 (inches part) 
    ---------------------------------------------------------  -------------------------------------------------------
    HighOrderEffectsTab.RollMoment                             1 
    ---------------------------------------------------------  -------------------------------------------------------
    HighOrderEffectsTab.UnloadingVerticalStiffnessType         Function 
    ---------------------------------------------------------  -------------------------------------------------------
    HighOrderEffectsTab.VerticalStiffnessTransVelocity.Value   10 (millimeters part), 0.393701 (inches part) 
    =========================================================  =======================================================
    
    .. versionadded:: NX11.0.0
    """
    AdvancedTab: TirePropertyAdvancedParameters = ...
    """
    Returns  the advancedTab.  
    
    This is a builder for the parameters in the TirePropertyMotorcycle UI Advanced tab. 
    
    <hr>
    
    Getter Method
    
    Signature ``AdvancedTab`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.TirePropertyAdvancedParameters` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    BasicTab: TirePropertyBasicParameters = ...
    """
    Returns  the basicTab.  
    
    This is a builder for the parameters in the TirePropertyMotorcycle UI Basic tab. 
    
    <hr>
    
    Getter Method
    
    Signature ``BasicTab`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.TirePropertyBasicParameters` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    HighOrderEffectsTab: TirePropertyHighOrderParameters = ...
    """
    Returns  the highOrderTab.  
    
    This is a builder for the parameters in the TirePropertyMotorcycle UI High Order Effects tab. 
    
    <hr>
    
    Getter Method
    
    Signature ``HighOrderEffectsTab`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.TirePropertyHighOrderParameters` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: TirePropertyMotorcycleBuilder = ...  # unknown typename


class SegmentBuilderTypeChoicesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SegmentBuilderTypeChoices():
    """
    type attribute of the segment 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Straight", "Straight"
       "ConstantRadius", "Constant Radius"
       "LaneChange", "Lane Change"
       "Slalom", "Slalom"
       "UserDefined", "User Defined"
    """
    Straight = 0  # SegmentBuilderTypeChoicesMemberType
    ConstantRadius = 1  # SegmentBuilderTypeChoicesMemberType
    LaneChange = 2  # SegmentBuilderTypeChoicesMemberType
    Slalom = 3  # SegmentBuilderTypeChoicesMemberType
    UserDefined = 4  # SegmentBuilderTypeChoicesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SegmentBuilderStraightTransitionTypeChoicesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SegmentBuilderStraightTransitionTypeChoices():
    """
    data type attribute of the straight data 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Linear", "Linear"
       "Cubic", "Cubic"
    """
    Linear = 0  # SegmentBuilderStraightTransitionTypeChoicesMemberType
    Cubic = 1  # SegmentBuilderStraightTransitionTypeChoicesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SegmentBuilderSplineDatatypeChoicesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SegmentBuilderSplineDatatypeChoices():
    """
    data type attribute of the straight data 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Function", "Function"
       "Profile2D", "Profile 2D"
    """
    Function = 0  # SegmentBuilderSplineDatatypeChoicesMemberType
    Profile2D = 1  # SegmentBuilderSplineDatatypeChoicesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SegmentBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Motion.SegmentBuilder`,
    only creation is supported
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.RoadBuilder.CreateSegmentBuilder`
    
    .. versionadded:: NX11.0.0
    """
    
    class TypeChoices():
        """
        type attribute of the segment 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Straight", "Straight"
           "ConstantRadius", "Constant Radius"
           "LaneChange", "Lane Change"
           "Slalom", "Slalom"
           "UserDefined", "User Defined"
        """
        Straight = 0  # SegmentBuilderTypeChoicesMemberType
        ConstantRadius = 1  # SegmentBuilderTypeChoicesMemberType
        LaneChange = 2  # SegmentBuilderTypeChoicesMemberType
        Slalom = 3  # SegmentBuilderTypeChoicesMemberType
        UserDefined = 4  # SegmentBuilderTypeChoicesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class StraightTransitionTypeChoices():
        """
        data type attribute of the straight data 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Linear", "Linear"
           "Cubic", "Cubic"
        """
        Linear = 0  # SegmentBuilderStraightTransitionTypeChoicesMemberType
        Cubic = 1  # SegmentBuilderStraightTransitionTypeChoicesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SplineDatatypeChoices():
        """
        data type attribute of the straight data 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Function", "Function"
           "Profile2D", "Profile 2D"
        """
        Function = 0  # SegmentBuilderSplineDatatypeChoicesMemberType
        Profile2D = 1  # SegmentBuilderSplineDatatypeChoicesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Angle: NXOpen.Expression = ...
    """
    Returns  the angle of a constant radius segment 
    
    <hr>
    
    Getter Method
    
    Signature ``Angle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    BankAngleCurve: MotionFunction = ...
    """
    Returns or sets  the bank angle spline curve of a user defined segment 
    
    <hr>
    
    Getter Method
    
    Signature ``BankAngleCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.MotionFunction` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``BankAngleCurve`` 
    
    :param spline: 
    :type spline: :py:class:`NXOpen.Motion.MotionFunction` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    BankAngleCurveProfile: SelectFieldData = ...
    """
    Returns  the bank angle spline curve defined by a profile for the user defined road segment object 
    
    <hr>
    
    Getter Method
    
    Signature ``BankAngleCurveProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectFieldData` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ConstantRadiusBankAngle: NXOpen.Expression = ...
    """
    Returns  the bank angle of a constant radius segment 
    
    <hr>
    
    Getter Method
    
    Signature ``ConstantRadiusBankAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ConstantRadiusElevationChange: NXOpen.Expression = ...
    """
    Returns  the elevation change of a constant radius segment 
    
    <hr>
    
    Getter Method
    
    Signature ``ConstantRadiusElevationChange`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    LaneChangeElevationChange: NXOpen.Expression = ...
    """
    Returns  the elevation change of a lane change segment 
    
    <hr>
    
    Getter Method
    
    Signature ``LaneChangeElevationChange`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    LaneChangeForwardLength: NXOpen.Expression = ...
    """
    Returns  the forward length of a lane change segment 
    
    <hr>
    
    Getter Method
    
    Signature ``LaneChangeForwardLength`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    LateralAmplitude: NXOpen.Expression = ...
    """
    Returns  the lateral amplitude of a slalom segment 
    
    <hr>
    
    Getter Method
    
    Signature ``LateralAmplitude`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    LateralShiftLength: NXOpen.Expression = ...
    """
    Returns  the lateral shift length of a lane change segment 
    
    <hr>
    
    Getter Method
    
    Signature ``LateralShiftLength`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Length: NXOpen.Expression = ...
    """
    Returns  the length of a straight segment 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Name: str = ...
    """
    Returns or sets  the name 
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    NumberOfPylons: NXOpen.Expression = ...
    """
    Returns  the number of pylons of a slalom segment 
    
    <hr>
    
    Getter Method
    
    Signature ``NumberOfPylons`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Radius: NXOpen.Expression = ...
    """
    Returns  the radius of a constant radius segment 
    
    <hr>
    
    Getter Method
    
    Signature ``Radius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SegmentType: SegmentBuilderTypeChoices = ...
    """
    Returns or sets  the segment type of a road segment 
    
    <hr>
    
    Getter Method
    
    Signature ``SegmentType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SegmentBuilderTypeChoices` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``SegmentType`` 
    
    :param segmentType: 
    :type segmentType: :py:class:`NXOpen.Motion.SegmentBuilderTypeChoices` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SlalomElevationChange: NXOpen.Expression = ...
    """
    Returns  the elevation change of a slalom segment 
    
    <hr>
    
    Getter Method
    
    Signature ``SlalomElevationChange`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SlalomForwardLength: NXOpen.Expression = ...
    """
    Returns  the forward length of a slalom segment 
    
    <hr>
    
    Getter Method
    
    Signature ``SlalomForwardLength`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SplineType: SegmentBuilderSplineDatatypeChoices = ...
    """
    Returns or sets  the spline type 
    
    <hr>
    
    Getter Method
    
    Signature ``SplineType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SegmentBuilderSplineDatatypeChoices` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``SplineType`` 
    
    :param splineType: 
    :type splineType: :py:class:`NXOpen.Motion.SegmentBuilderSplineDatatypeChoices` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    StraightElevationChange: NXOpen.Expression = ...
    """
    Returns  the elevation change of a straight segment 
    
    <hr>
    
    Getter Method
    
    Signature ``StraightElevationChange`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    TransitionType: SegmentBuilderStraightTransitionTypeChoices = ...
    """
    Returns or sets  the transition type of a straight segment 
    
    <hr>
    
    Getter Method
    
    Signature ``TransitionType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SegmentBuilderStraightTransitionTypeChoices` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``TransitionType`` 
    
    :param segmentType: 
    :type segmentType: :py:class:`NXOpen.Motion.SegmentBuilderStraightTransitionTypeChoices` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    YCurve: MotionFunction = ...
    """
    Returns or sets  the y spline curve of a user defined segment 
    
    <hr>
    
    Getter Method
    
    Signature ``YCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.MotionFunction` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``YCurve`` 
    
    :param spline: 
    :type spline: :py:class:`NXOpen.Motion.MotionFunction` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    YCurveProfile: SelectFieldData = ...
    """
    Returns  the y spline curve defined by a profile for the user defined road segment object 
    
    <hr>
    
    Getter Method
    
    Signature ``YCurveProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectFieldData` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ZCurve: MotionFunction = ...
    """
    Returns or sets  the z spline curve of a user defined segment 
    
    <hr>
    
    Getter Method
    
    Signature ``ZCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.MotionFunction` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``ZCurve`` 
    
    :param spline: 
    :type spline: :py:class:`NXOpen.Motion.MotionFunction` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ZCurveProfile: SelectFieldData = ...
    """
    Returns  the z spline curve defined by a profile for the user defined road segment object 
    
    <hr>
    
    Getter Method
    
    Signature ``ZCurveProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectFieldData` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: SegmentBuilder = ...  # unknown typename


class PointOnSurfaceBuilder(MotionBuilder):
    """
    Represents a :py:class:`NXOpen.Motion.PointOnSurfaceBuilder`
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.PointOnSurfaceCollection.CreatePointOnSurfaceBuilder`
    
    .. versionadded:: NX6.0.0
    """
    
    def GetFaces(self) -> 'list[NXOpen.Face]':
        """
        Returns the selected faces  
        
        Signature ``GetFaces()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Face` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetFaces(self, faces: 'list[NXOpen.Face]') -> None:
        """
        Set the faces 
        
        Signature ``SetFaces(faces)`` 
        
        :param faces: 
        :type faces: list of :py:class:`NXOpen.Face` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    Link: SelectLink = ...
    """
    Returns  the link 
    
    <hr>
    
    Getter Method
    
    Signature ``Link`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectLink` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Name: str = ...
    """
    Returns or sets  the name 
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Point: NXOpen.Point = ...
    """
    Returns or sets  the selected point 
    
    <hr>
    
    Getter Method
    
    Signature ``Point`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Point`` 
    
    :param point: 
    :type point: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: PointOnSurfaceBuilder = ...  # unknown typename


class ConfigurationIntegerParameter(ConfigurationParameter):
    """
    Represents a :py:class:`Motion.ConfigurationIntegerParameter`.  
    
    This class
    contains the port association for the output of a mechatronics element 
    No KF support
    
    .. versionadded:: NX11.0.0
    """
    ActualValue: int = ...
    """
    Returns or sets  the actual value 
    
    <hr>
    
    Getter Method
    
    Signature ``ActualValue`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``ActualValue`` 
    
    :param actualValue: 
    :type actualValue: int 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    InitialValue: int = ...
    """
    Returns  the initial value 
    
    <hr>
    
    Getter Method
    
    Signature ``InitialValue`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: ConfigurationIntegerParameter = ...  # unknown typename


class Graph(NXOpen.NXObject):
    """
    Represents a graph, only creation is supported   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Motion.GraphObjectBuilder`
    
    .. versionadded:: NX5.0.0
    """
    
    def CreateGraphLegendData(self) -> NXOpen.CAE.FTK.IApplicationData:
        """
        Creates a :py:class:`CAE.FTK.IApplicationData`   
        
        Signature ``CreateGraphLegendData()`` 
        
        :returns:  IApplicationData object  
        :rtype: :py:class:`NXOpen.CAE.FTK.IApplicationData` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    Null: Graph = ...  # unknown typename


class BodyContact(MotionObject, IGraphSource):
    """
    Represents a :py:class:`NXOpen.Motion.BodyContact`
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Motion.BodyContactBuilder`
    
    .. versionadded:: NX5.0.0
    """
    Null: BodyContact = ...  # unknown typename


class BushingGeneralCoefficientTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BushingGeneralCoefficientTypes():
    """
    Definitions of bushing general coefficient component type 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "TranslationalStiffness", "translational stiffness component"
       "TranslationalDamping", "translational damping component"
       "TranslationalPreload", "translational preload component"
       "TorsionalStiffness", "torsional stiffness component"
       "TorsionalDamping", "torsional damping component"
       "TorsionalPreload", "torsional preload component"
    """
    TranslationalStiffness = 0  # BushingGeneralCoefficientTypesMemberType
    TranslationalDamping = 1  # BushingGeneralCoefficientTypesMemberType
    TranslationalPreload = 2  # BushingGeneralCoefficientTypesMemberType
    TorsionalStiffness = 3  # BushingGeneralCoefficientTypesMemberType
    TorsionalDamping = 4  # BushingGeneralCoefficientTypesMemberType
    TorsionalPreload = 5  # BushingGeneralCoefficientTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SignalChartListItemList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[SignalChartListItem]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.Motion.SignalChartListItem` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: SignalChartListItem) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.Motion.SignalChartListItem` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: SignalChartListItem) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.Motion.SignalChartListItem` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> SignalChartListItem:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.Motion.SignalChartListItem` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: SignalChartListItem) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Motion.SignalChartListItem` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: SignalChartListItem, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Motion.SignalChartListItem` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[SignalChartListItem]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.Motion.SignalChartListItem` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[SignalChartListItem]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.Motion.SignalChartListItem` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: SignalChartListItem, object2: SignalChartListItem) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.Motion.SignalChartListItem` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.Motion.SignalChartListItem` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: SignalChartListItem) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.Motion.SignalChartListItem` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SignalChartListItemList = ...  # unknown typename


class PlayModeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PlayMode():
    """
    Definitions of post animation and spreadsheet run play mode type
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "PlayOnce", "Play once mode"
       "Loop", "Loop mode"
       "Retrace", "Retrace mode"
    """
    PlayOnce = 0  # PlayModeMemberType
    Loop = 1  # PlayModeMemberType
    Retrace = 2  # PlayModeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class Bushing(MotionObject, IGraphSource):
    """
    Represents a bushing   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Motion.BushingBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: Bushing = ...  # unknown typename


class MechatronicsCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Mechatronics   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Motion.MotionManager`
    
    .. versionadded:: NX11.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateMechatronicsBuilder(self, mechatronics: Mechatronics) -> MechatronicsBuilder:
        """
        Creates a :py:class:`Motion.MechatronicsBuilder`  
        
        Signature ``CreateMechatronicsBuilder(mechatronics)`` 
        
        :param mechatronics: 
        :type mechatronics: :py:class:`NXOpen.Motion.Mechatronics` 
        :returns: 
        :rtype: :py:class:`NXOpen.Motion.MechatronicsBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def FindObject(self, name: str) -> Mechatronics:
        """
        Finds the :py:class:`NXOpen.Motion.Mechatronics` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name: 
        :type name: str 
        :returns: 
        :rtype: :py:class:`NXOpen.Motion.Mechatronics` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    


class TirePropertyFtCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Motion FTire Tire Property elements   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Motion.MotionManager`
    
    .. versionadded:: NX11.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateTirePropertyFtBuilder(self, tireProperty: TirePropertyFt) -> TirePropertyFtBuilder:
        """
        Return  :py:class:`NXOpen.Motion.TirePropertyFtBuilder` object   
        
        Signature ``CreateTirePropertyFtBuilder(tireProperty)`` 
        
        :param tireProperty:  :py:class:`NXOpen.Motion.TirePropertyFt`                                                                                                                to be edited, if None then create a new one  
        :type tireProperty: :py:class:`NXOpen.Motion.TirePropertyFt` 
        :returns:  TirePropertyFtBuilder object  
        :rtype: :py:class:`NXOpen.Motion.TirePropertyFtBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def FindObject(self, name: str) -> TirePropertyFt:
        """
        Finds the :py:class:`NXOpen.Motion.TirePropertyFt` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Motion.TirePropertyFt`  
        :type name: str 
        :returns:  :py:class:`NXOpen.Motion.TirePropertyFt` with this name  
        :rtype: :py:class:`NXOpen.Motion.TirePropertyFt` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    


class BushingCylindricalCoefficients(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a Motion BushingCylindricalCoefficients
    
    .. versionadded:: NX6.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    DampingCoefficients: BushingCylindricalCoefficientsComponent = ...
    """
    Returns  the damping coefficients.  
    
    It is used in :py:class:`Motion.BushingBuilderBushingTypes.Cylindrical <Motion.BushingBuilderBushingTypes>` case 
    
    <hr>
    
    Getter Method
    
    Signature ``DampingCoefficients`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.BushingCylindricalCoefficientsComponent` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    PreloadCoefficients: BushingCylindricalCoefficientsComponent = ...
    """
    Returns  the preload coefficients.  
    
    It is used in :py:class:`Motion.BushingBuilderBushingTypes.Cylindrical <Motion.BushingBuilderBushingTypes>` case 
    
    <hr>
    
    Getter Method
    
    Signature ``PreloadCoefficients`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.BushingCylindricalCoefficientsComponent` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    StiffnessCoefficients: BushingCylindricalCoefficientsComponent = ...
    """
    Returns  the stiffness coefficients.  
    
    It is used in :py:class:`Motion.BushingBuilderBushingTypes.Cylindrical <Motion.BushingBuilderBushingTypes>` case 
    
    <hr>
    
    Getter Method
    
    Signature ``StiffnessCoefficients`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.BushingCylindricalCoefficientsComponent` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: BushingCylindricalCoefficients = ...  # unknown typename


class ControlPort(MotionObject, IGraphSource):
    """
    Represents a motion control port object class.  
    
    It acts as the medium between input and
    output control elements or mechatronics interfaces. It is created either by a
    control input element or a mechatronics interface to output the measured value and
    referred by the control output element or mechatronics interface to utilize the value.  
    This is created by Control Input.
    
    .. versionadded:: NX11.0.0
    """
    Null: ControlPort = ...  # unknown typename


class LinkMassPropertyMassPropertyTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LinkMassPropertyMassPropertyType():
    """
    Defines mass property type of link 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Automatic", "Mass property automatic generate"
       "UserDefined", "Mass property defined by user"
       "NotSet", "No mass property"
    """
    Automatic = 0  # LinkMassPropertyMassPropertyTypeMemberType
    UserDefined = 1  # LinkMassPropertyMassPropertyTypeMemberType
    NotSet = 2  # LinkMassPropertyMassPropertyTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LinkMassProperty(NXOpen.TaggedObject):
    """
    Represents a :py:class:`NXOpen.Motion.LinkMassProperty`
    
    .. versionadded:: NX5.0.0
    """
    
    class MassPropertyType():
        """
        Defines mass property type of link 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Automatic", "Mass property automatic generate"
           "UserDefined", "Mass property defined by user"
           "NotSet", "No mass property"
        """
        Automatic = 0  # LinkMassPropertyMassPropertyTypeMemberType
        UserDefined = 1  # LinkMassPropertyMassPropertyTypeMemberType
        NotSet = 2  # LinkMassPropertyMassPropertyTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    InertiaCsys: NXOpen.CoordinateSystem = ...
    """
    Returns or sets  the inertia csys 
    
    <hr>
    
    Getter Method
    
    Signature ``InertiaCsys`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InertiaCsys`` 
    
    :param inertiaCsys: 
    :type inertiaCsys: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    IxxExpression: NXOpen.Expression = ...
    """
    Returns  the principle moment of inertia expression about the X axis 
    
    <hr>
    
    Getter Method
    
    Signature ``IxxExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    IxyExpression: NXOpen.Expression = ...
    """
    Returns  the product of inertia expression for the X and Y axes  
    
    <hr>
    
    Getter Method
    
    Signature ``IxyExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    IxzExpression: NXOpen.Expression = ...
    """
    Returns  the product of inertia expression for the X and Z axes 
    
    <hr>
    
    Getter Method
    
    Signature ``IxzExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    IyyExpression: NXOpen.Expression = ...
    """
    Returns  the principle moment of inertia expression about the Y axis 
    
    <hr>
    
    Getter Method
    
    Signature ``IyyExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    IyzExpression: NXOpen.Expression = ...
    """
    Returns  the product of inertia expression for the Y and Z axes 
    
    <hr>
    
    Getter Method
    
    Signature ``IyzExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    IzzExpression: NXOpen.Expression = ...
    """
    Returns  the principle moment of inertia expression about the Z axis 
    
    <hr>
    
    Getter Method
    
    Signature ``IzzExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    MassCenter: NXOpen.Point = ...
    """
    Returns or sets  the mass center 
    
    <hr>
    
    Getter Method
    
    Signature ``MassCenter`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MassCenter`` 
    
    :param massCenter: 
    :type massCenter: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    MassExpression: NXOpen.Expression = ...
    """
    Returns  the mass expression 
    
    <hr>
    
    Getter Method
    
    Signature ``MassExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    MassType: LinkMassPropertyMassPropertyType = ...
    """
    Returns or sets  the mass type 
    
    <hr>
    
    Getter Method
    
    Signature ``MassType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.LinkMassPropertyMassPropertyType` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MassType`` 
    
    :param massType: 
    :type massType: :py:class:`NXOpen.Motion.LinkMassPropertyMassPropertyType` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: LinkMassProperty = ...  # unknown typename


class TireBuilderTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TireBuilderType():
    """
    the Tire type.
    Each tire type has a specific tire property associated. A tire is invalid without a tire property associated.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Basic", "for Basic Tire Model"
       "Tno", "for TNO Tire Model"
       "CDTire", "for CDTire Tire Model"
       "FTire", "for FTire Tire Model"
       "Motorcycle", "for Motorcycle Tire Model"
       "NonInertial", "for Non-Inertial Tire Model"
    """
    Basic = 0  # TireBuilderTypeMemberType
    Tno = 1  # TireBuilderTypeMemberType
    CDTire = 2  # TireBuilderTypeMemberType
    FTire = 3  # TireBuilderTypeMemberType
    Motorcycle = 4  # TireBuilderTypeMemberType
    NonInertial = 5  # TireBuilderTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TireBuilder(MotionBuilder):
    """
    Represents a :py:class:`Motion.Tire` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.TireCollection.CreateTireBuilder`
    
    Default values.
    
    =============  ======
    Property       Value
    =============  ======
    DisplayScale   1.0 
    -------------  ------
    TireType       Basic 
    =============  ======
    
    .. versionadded:: NX11.0.0
    """
    
    class Type():
        """
        the Tire type.
        Each tire type has a specific tire property associated. A tire is invalid without a tire property associated.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Basic", "for Basic Tire Model"
           "Tno", "for TNO Tire Model"
           "CDTire", "for CDTire Tire Model"
           "FTire", "for FTire Tire Model"
           "Motorcycle", "for Motorcycle Tire Model"
           "NonInertial", "for Non-Inertial Tire Model"
        """
        Basic = 0  # TireBuilderTypeMemberType
        Tno = 1  # TireBuilderTypeMemberType
        CDTire = 2  # TireBuilderTypeMemberType
        FTire = 3  # TireBuilderTypeMemberType
        Motorcycle = 4  # TireBuilderTypeMemberType
        NonInertial = 5  # TireBuilderTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    BodyLink: SelectLink = ...
    """
    Returns  the body link.  
    
    This is a link defining the Tire body. 
    
    <hr>
    
    Getter Method
    
    Signature ``BodyLink`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectLink` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    BodyPoint: NXOpen.Point = ...
    """
    Returns or sets  the body point.  
    
    This represents the center of the wheel. 
    
    <hr>
    
    Getter Method
    
    Signature ``BodyPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``BodyPoint`` 
    
    :param bodyPoint: 
    :type bodyPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    BodyVector: NXOpen.Direction = ...
    """
    Returns or sets  the body vector.  
    
    This defines the spinning direction. 
    
    <hr>
    
    Getter Method
    
    Signature ``BodyVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``BodyVector`` 
    
    :param bodyVector: 
    :type bodyVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    CarrierCsys: NXOpen.CoordinateSystem = ...
    """
    Returns or sets  the carrier coordinate system.  
    
    This represents a coordinate systeme attached to the chassis for which: 
    z axis defines the up direction and the
    x axis defines the forward direction of the chassis.
    It is only used by external tires.
    
    <hr>
    
    Getter Method
    
    Signature ``CarrierCsys`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``CarrierCsys`` 
    
    :param csys: 
    :type csys: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    CarrierLink: SelectLink = ...
    """
    Returns  the carrier link.  
    
    This represents the link where the tire will be attached.
    It is only used by external tires.
    
    <hr>
    
    Getter Method
    
    Signature ``CarrierLink`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectLink` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    CarrierPoint: NXOpen.Point = ...
    """
    Returns or sets  the carrier point.  
    
    This represents the attachment point of the tire link on the chassis link.
    It is only used by external tires.
    
    <hr>
    
    Getter Method
    
    Signature ``CarrierPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``CarrierPoint`` 
    
    :param point: 
    :type point: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ChassisCsys: NXOpen.CoordinateSystem = ...
    """
    Returns or sets  the chassis coordinate system.  
    
    This represents a coordinate systeme attached to the chassis for which
    z axis defines the up direction and the 
    x axis defines the forward direction of the chassis.
    For external tires it is optional and it is used for the purposes of including additional stabilizing stiffness 
    to the vehicle link during static analysis, provided that the Static Hold variable is TRUE.
    Ideally all tire elements should refer to the same Chassis axis system. 
    If this optional parameter is not defined, the stabilizing stiffness will be applied to the selected axis system on the carrier link.
    This approach may introduce unwanted transients into a STATIC/DYNAMIC simulation.
    
    <hr>
    
    Getter Method
    
    Signature ``ChassisCsys`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``ChassisCsys`` 
    
    :param chassisCsys: 
    :type chassisCsys: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ChassisLink: SelectLink = ...
    """
    Returns  the chassis link.  
    
    This represents the link where the tire will be attached.
    For external tires it is used for static data analysis.
    
    <hr>
    
    Getter Method
    
    Signature ``ChassisLink`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectLink` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ChassisPoint: NXOpen.Point = ...
    """
    Returns or sets  the chassis point.  
    
    This represents the attachment point of the tire body on the chassis link.
    
    <hr>
    
    Getter Method
    
    Signature ``ChassisPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``ChassisPoint`` 
    
    :param chassisPoint: 
    :type chassisPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Name: str = ...
    """
    Returns or sets  the unique name assigned to the tire component 
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    PropertyBasic: SelectTirePropertyBasic = ...
    """
    Returns  the basic tire property.  
    
    This is an object used to hold parameters for Basic tire type. 
    
    <hr>
    
    Getter Method
    
    Signature ``PropertyBasic`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectTirePropertyBasic` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    PropertyCd: SelectTirePropertyCd = ...
    """
    Returns  the CD tire property.  
    
    This is an object used to hold parameters for CDTire type 
    
    <hr>
    
    Getter Method
    
    Signature ``PropertyCd`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectTirePropertyCd` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    PropertyFTire: SelectTirePropertyFt = ...
    """
    Returns  the FT tire property.  
    
    This is an object used to hold parameters for FTire type 
    
    <hr>
    
    Getter Method
    
    Signature ``PropertyFTire`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectTirePropertyFt` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    PropertyMotorcycle: SelectTirePropertyMotorcycle = ...
    """
    Returns  the motorcycle tire property.  
    
    This is an object used to hold parameters for Motorcycle tire type. 
    
    <hr>
    
    Getter Method
    
    Signature ``PropertyMotorcycle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectTirePropertyMotorcycle` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    PropertyNonInertial: SelectTirePropertyNonInertial = ...
    """
    Returns  the non-inertial tire property.  
    
    This is an object used to hold parameters for Non-Inertial tire type. 
    
    <hr>
    
    Getter Method
    
    Signature ``PropertyNonInertial`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectTirePropertyNonInertial` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    PropertyTno: SelectTirePropertyTno = ...
    """
    Returns  the TNO tire property.  
    
    This is an object used to hold parameters for TNO Tire type 
    
    <hr>
    
    Getter Method
    
    Signature ``PropertyTno`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectTirePropertyTno` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Road: SelectRoad = ...
    """
    Returns  the road.  
    
    This parameter defines the road height Z and slope of the road surface 
    depending on the X and Y location of the tire. If no road is selected,
    the road profile will default to the global XY plane.
    
    <hr>
    
    Getter Method
    
    Signature ``Road`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectRoad` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    TireType: TireBuilderType = ...
    """
    Returns or sets  the tire type.  
    
    Defines the type of the tire used, different tire types use different parameters 
    
    <hr>
    
    Getter Method
    
    Signature ``TireType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.TireBuilderType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``TireType`` 
    
    :param typeSelection: 
    :type typeSelection: :py:class:`NXOpen.Motion.TireBuilderType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: TireBuilder = ...  # unknown typename


class PlantInput(NXOpen.NXObject, IGraphSource):
    """
    Represents a Plant Input motion object   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Motion.PlantInputBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: PlantInput = ...  # unknown typename


class VObject(NXOpen.TaggedObject):
    """
    Represents a VObject
    
    .. versionadded:: NX6.0.0
    """
    ActionLink: SelectLink = ...
    """
    Returns  the action link 
    
    <hr>
    
    Getter Method
    
    Signature ``ActionLink`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectLink` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Applicationtype: VobjectApplicationType = ...
    """
    Returns or sets  the application type  
    
    <hr>
    
    Getter Method
    
    Signature ``Applicationtype`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.VobjectApplicationType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Applicationtype`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Motion.VobjectApplicationType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Csys: VobjectCsysType = ...
    """
    Returns or sets  the force csys 
    
    <hr>
    
    Getter Method
    
    Signature ``Csys`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.VobjectCsysType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Csys`` 
    
    :param csys: 
    :type csys: :py:class:`NXOpen.Motion.VobjectCsysType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Direction: NXOpen.Direction = ...
    """
    Returns or sets  the direction 
    
    <hr>
    
    Getter Method
    
    Signature ``Direction`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Direction`` 
    
    :param direction: 
    :type direction: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    DisplayScale: float = ...
    """
    Returns or sets  the display scale 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayScale`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayScale`` 
    
    :param displayScale: 
    :type displayScale: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    MagFunction: NXOpen.CAE.Function = ...
    """
    Returns or sets  the magnitude function  
    
    <hr>
    
    Getter Method
    
    Signature ``MagFunction`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CAE.Function` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MagFunction`` 
    
    :param function: 
    :type function: :py:class:`NXOpen.CAE.Function` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    MagnitudeExpression: NXOpen.Expression = ...
    """
    Returns  the magtitude expression 
    
    <hr>
    
    Getter Method
    
    Signature ``MagnitudeExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    MagnitudeProfile: SelectFieldData = ...
    """
    Returns  the magnitude profile 
    
    <hr>
    
    Getter Method
    
    Signature ``MagnitudeProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectFieldData` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    Name: str = ...
    """
    Returns or sets  the name 
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Origin: NXOpen.Point = ...
    """
    Returns or sets  the origin 
    
    <hr>
    
    Getter Method
    
    Signature ``Origin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Origin`` 
    
    :param origin: 
    :type origin: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ReactionLink: SelectLink = ...
    """
    Returns  the reaction link 
    
    <hr>
    
    Getter Method
    
    Signature ``ReactionLink`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectLink` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ReferenceCsys: NXOpen.CoordinateSystem = ...
    """
    Returns or sets  the csys of reference link, the coordinate system of action and reaction are same each other 
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceCsys`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``ReferenceCsys`` 
    
    :param csys: 
    :type csys: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ReferenceDirection: NXOpen.Direction = ...
    """
    Returns or sets  the reference direction 
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReferenceDirection`` 
    
    :param direction: 
    :type direction: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ReferenceLink: SelectLink = ...
    """
    Returns  the reference link 
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceLink`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectLink` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    ReferenceOrigin: NXOpen.Point = ...
    """
    Returns or sets  the reference point 
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceOrigin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReferenceOrigin`` 
    
    :param referencePoint: 
    :type referencePoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ValueType: ForceValueTypes = ...
    """
    Returns or sets  the value type 
    
    <hr>
    
    Getter Method
    
    Signature ``ValueType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.ForceValueTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ValueType`` 
    
    :param valueType: 
    :type valueType: :py:class:`NXOpen.Motion.ForceValueTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    XExpression: NXOpen.Expression = ...
    """
    Returns  the x component expression 
    
    <hr>
    
    Getter Method
    
    Signature ``XExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    XFunction: NXOpen.CAE.Function = ...
    """
    Returns or sets  the x component function  
    
    <hr>
    
    Getter Method
    
    Signature ``XFunction`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CAE.Function` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``XFunction`` 
    
    :param function: 
    :type function: :py:class:`NXOpen.CAE.Function` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    XProfile: SelectFieldData = ...
    """
    Returns  the x profile 
    
    <hr>
    
    Getter Method
    
    Signature ``XProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectFieldData` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    YExpression: NXOpen.Expression = ...
    """
    Returns  the y component expression 
    
    <hr>
    
    Getter Method
    
    Signature ``YExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    YFunction: NXOpen.CAE.Function = ...
    """
    Returns or sets  the y component function  
    
    <hr>
    
    Getter Method
    
    Signature ``YFunction`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CAE.Function` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``YFunction`` 
    
    :param function: 
    :type function: :py:class:`NXOpen.CAE.Function` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    YProfile: SelectFieldData = ...
    """
    Returns  the y profile 
    
    <hr>
    
    Getter Method
    
    Signature ``YProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectFieldData` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    ZExpression: NXOpen.Expression = ...
    """
    Returns  the z component expression 
    
    <hr>
    
    Getter Method
    
    Signature ``ZExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ZFunction: NXOpen.CAE.Function = ...
    """
    Returns or sets  the z component function  
    
    <hr>
    
    Getter Method
    
    Signature ``ZFunction`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CAE.Function` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ZFunction`` 
    
    :param function: 
    :type function: :py:class:`NXOpen.CAE.Function` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ZProfile: SelectFieldData = ...
    """
    Returns  the z profile 
    
    <hr>
    
    Getter Method
    
    Signature ``ZProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectFieldData` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    Null: VObject = ...  # unknown typename


class ControlInputPortBuilderMeasuredComponentMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ControlInputPortBuilderMeasuredComponent():
    """
    the types of components that can be measured by the control input element for the selected variable. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "LinearMagnitude", "Linear Magnitude"
       "X", "X"
       "Y", "Y"
       "Z", "Z"
       "AngularMagnitude", "Angular Magnitude"
       "Rx", "RX"
       "Ry", "RY"
       "Rz", "RZ"
    """
    LinearMagnitude = 0  # ControlInputPortBuilderMeasuredComponentMemberType
    X = 1  # ControlInputPortBuilderMeasuredComponentMemberType
    Y = 2  # ControlInputPortBuilderMeasuredComponentMemberType
    Z = 3  # ControlInputPortBuilderMeasuredComponentMemberType
    AngularMagnitude = 4  # ControlInputPortBuilderMeasuredComponentMemberType
    Rx = 5  # ControlInputPortBuilderMeasuredComponentMemberType
    Ry = 6  # ControlInputPortBuilderMeasuredComponentMemberType
    Rz = 7  # ControlInputPortBuilderMeasuredComponentMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ControlInputPortBuilderMeasuredVariableMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ControlInputPortBuilderMeasuredVariable():
    """
    the types of variables that can be measured by the control input element.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Displacement", "Displacement"
       "Velocity", "Velocity"
       "Acceleration", "Acceleration"
    """
    Displacement = 0  # ControlInputPortBuilderMeasuredVariableMemberType
    Velocity = 1  # ControlInputPortBuilderMeasuredVariableMemberType
    Acceleration = 2  # ControlInputPortBuilderMeasuredVariableMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ControlInputPortBuilder(MotionBuilder, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`Motion.ControlPort` builder specific to control input element.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.ControlInputBuilder.CreateControlInputPortBuilder`
    
    .. versionadded:: NX11.0.0
    """
    
    class MeasuredComponent():
        """
        the types of components that can be measured by the control input element for the selected variable. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "LinearMagnitude", "Linear Magnitude"
           "X", "X"
           "Y", "Y"
           "Z", "Z"
           "AngularMagnitude", "Angular Magnitude"
           "Rx", "RX"
           "Ry", "RY"
           "Rz", "RZ"
        """
        LinearMagnitude = 0  # ControlInputPortBuilderMeasuredComponentMemberType
        X = 1  # ControlInputPortBuilderMeasuredComponentMemberType
        Y = 2  # ControlInputPortBuilderMeasuredComponentMemberType
        Z = 3  # ControlInputPortBuilderMeasuredComponentMemberType
        AngularMagnitude = 4  # ControlInputPortBuilderMeasuredComponentMemberType
        Rx = 5  # ControlInputPortBuilderMeasuredComponentMemberType
        Ry = 6  # ControlInputPortBuilderMeasuredComponentMemberType
        Rz = 7  # ControlInputPortBuilderMeasuredComponentMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class MeasuredVariable():
        """
        the types of variables that can be measured by the control input element.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Displacement", "Displacement"
           "Velocity", "Velocity"
           "Acceleration", "Acceleration"
        """
        Displacement = 0  # ControlInputPortBuilderMeasuredVariableMemberType
        Velocity = 1  # ControlInputPortBuilderMeasuredVariableMemberType
        Acceleration = 2  # ControlInputPortBuilderMeasuredVariableMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    Component: ControlInputPortBuilderMeasuredComponent = ...
    """
    Returns or sets  the component that is measured by the control input element for the selected variable.  
    
    <hr>
    
    Getter Method
    
    Signature ``Component`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.ControlInputPortBuilderMeasuredComponent` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Component`` 
    
    :param component: 
    :type component: :py:class:`NXOpen.Motion.ControlInputPortBuilderMeasuredComponent` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Digital: bool = ...
    """
    Returns or sets  a logical flag to specify whether the element is digital (sampled) or analog.  
    
    If TRUE, the element will be considered digital and will require a sample rate. 
    
    <hr>
    
    Getter Method
    
    Signature ``Digital`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Digital`` 
    
    :param digital: 
    :type digital: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Name: str = ...
    """
    Returns or sets  the control input port name.  
    
    Must be unique across all motion elements. 
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SampleRate: NXOpen.Expression = ...
    """
    Returns  the Sample Rate specifies the sampling frequency in samples per second for this element.  
    
    A value is required if Digital flag is set to TRUE. 
    
    <hr>
    
    Getter Method
    
    Signature ``SampleRate`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Variable: ControlInputPortBuilderMeasuredVariable = ...
    """
    Returns or sets  the variable that is measured by the control input element.  
    
    <hr>
    
    Getter Method
    
    Signature ``Variable`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.ControlInputPortBuilderMeasuredVariable` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Variable`` 
    
    :param variable: 
    :type variable: :py:class:`NXOpen.Motion.ControlInputPortBuilderMeasuredVariable` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: ControlInputPortBuilder = ...  # unknown typename


class PackagingTraceBuilderFrameMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PackagingTraceBuilderFrame():
    """
    Trace reference frame type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Absolute", "Traced copies positioned in absolute coordinate system."
       "Relative", "Traced copies positioned relative to selected links."
    """
    Absolute = 0  # PackagingTraceBuilderFrameMemberType
    Relative = 1  # PackagingTraceBuilderFrameMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PackagingTraceBuilder(PackagingBuilder):
    """
    This is the builder class to create or edit a Trace object.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.PackagingCollection.CreateTraceBuilder`
    
    .. versionadded:: NX4.0.0
    """
    
    class Frame():
        """
        Trace reference frame type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Absolute", "Traced copies positioned in absolute coordinate system."
           "Relative", "Traced copies positioned relative to selected links."
        """
        Absolute = 0  # PackagingTraceBuilderFrameMemberType
        Relative = 1  # PackagingTraceBuilderFrameMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetRelativeLinks(self) -> 'list[NXOpen.DisplayableObject]':
        """
        Returns :py:class:`NXOpen.Motion.PackagingTrace` relative links.  
        
        Only available
        when frame type is :py:class:` NXOpen.Motion.PackagingTraceBuilderFrame.Relative  < NXOpen.Motion.PackagingTraceBuilderFrame>`.  
        
        Signature ``GetRelativeLinks()`` 
        
        :returns:  The list pointer  
        :rtype: list of :py:class:`NXOpen.DisplayableObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def SetRelativeLinks(self, links: 'list[NXOpen.DisplayableObject]') -> None:
        """
        Sets :py:class:`NXOpen.Motion.PackagingTrace` relative links.  
        
        Only used when
        frame type is :py:class:` NXOpen.Motion.PackagingTraceBuilderFrame.Relative  < NXOpen.Motion.PackagingTraceBuilderFrame>`. 
        
        Signature ``SetRelativeLinks(links)`` 
        
        :param links:  The list pointer 
        :type links: list of :py:class:`NXOpen.DisplayableObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    FrameType: PackagingTraceBuilderFrame = ...
    """
    Returns or sets  the :py:class:`NXOpen.Motion.PackagingTrace` reference frame type 
    defined at :py:class:`NXOpen.Motion.PackagingTraceBuilderFrame` 
    
    <hr>
    
    Getter Method
    
    Signature ``FrameType`` 
    
    :returns:  Trace reference frame type defined in 
    :py:class:`NXOpen.Motion.PackagingTraceBuilderFrame` 
    :rtype: :py:class:`NXOpen.Motion.PackagingTraceBuilderFrame` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``FrameType`` 
    
    :param fType:  Trace reference frame type defined in                                                            :py:class:`NXOpen.Motion.PackagingTraceBuilderFrame`  
    :type fType: :py:class:`NXOpen.Motion.PackagingTraceBuilderFrame` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    TargetLayer: int = ...
    """
    Returns or sets  the :py:class:`NXOpen.Motion.PackagingTrace` target layer 
    
    <hr>
    
    Getter Method
    
    Signature ``TargetLayer`` 
    
    :returns:  Target layer  
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``TargetLayer`` 
    
    :param targetLayer:  Target layer  
    :type targetLayer: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: PackagingTraceBuilder = ...  # unknown typename


class TirePropertyBasicCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Motion.TirePropertyBasic` elements   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Motion.MotionManager`
    
    .. versionadded:: NX11.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateTirePropertyBasicBuilder(self, tireProperty: TirePropertyBasic) -> TirePropertyBasicBuilder:
        """
        Return  :py:class:`NXOpen.Motion.TirePropertyBasicBuilder` object   
        
        Signature ``CreateTirePropertyBasicBuilder(tireProperty)`` 
        
        :param tireProperty:  :py:class:`NXOpen.Motion.TirePropertyBasic`                                                                                                                to be edited, if None then create a new one  
        :type tireProperty: :py:class:`NXOpen.Motion.TirePropertyBasic` 
        :returns:  TirePropertyBasicBuilder object  
        :rtype: :py:class:`NXOpen.Motion.TirePropertyBasicBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def FindObject(self, name: str) -> TirePropertyBasic:
        """
        Finds the :py:class:`NXOpen.Motion.TirePropertyBasic` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Motion.TirePropertyBasic`  
        :type name: str 
        :returns:  :py:class:`NXOpen.Motion.TirePropertyBasic` with this name  
        :rtype: :py:class:`NXOpen.Motion.TirePropertyBasic` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    


class TirePropertyNonInertialCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Motion Non-inertial Tire Property elements   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Motion.MotionManager`
    
    .. versionadded:: NX11.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateTirePropertyNonInertialBuilder(self, tireProperty: TirePropertyNonInertial) -> TirePropertyNonInertialBuilder:
        """
        Return  :py:class:`NXOpen.Motion.TirePropertyNonInertialBuilder` object   
        
        Signature ``CreateTirePropertyNonInertialBuilder(tireProperty)`` 
        
        :param tireProperty:  :py:class:`NXOpen.Motion.TirePropertyNonInertial`                                                                                                                to be edited, if None then create a new one  
        :type tireProperty: :py:class:`NXOpen.Motion.TirePropertyNonInertial` 
        :returns:  TirePropertyNonInertialBuilder object  
        :rtype: :py:class:`NXOpen.Motion.TirePropertyNonInertialBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def FindObject(self, name: str) -> TirePropertyNonInertial:
        """
        Finds the :py:class:`NXOpen.Motion.TirePropertyNonInertial` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Motion.TirePropertyNonInertial`  
        :type name: str 
        :returns:  :py:class:`NXOpen.Motion.TirePropertyNonInertial` with this name  
        :rtype: :py:class:`NXOpen.Motion.TirePropertyNonInertial` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    


class GeneralCoupler(MotionObject, IGraphSource):
    """
    Represents motion 2-3 joint coupler   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Motion.GeneralCouplerBuilder`
    
    .. versionadded:: NX7.5.0
    """
    Null: GeneralCoupler = ...  # unknown typename


class SubmechanismPositioner(NXOpen.DisplayableObject):
    """
    Represents a Submechanism Positioner object.  
    
    Submechanism Positioner are used to associatively
    position a submechanism in a motion assembly. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Motion.SubmechanismPositionerBuilder`
    
    .. versionadded:: NX12.0.0
    """
    Null: SubmechanismPositioner = ...  # unknown typename


class StandardSectionBuilderStandardSectionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class StandardSectionBuilderStandardSectionType():
    """
    the standard section type
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Rod", "Rod"
       "Tube", "Tube"
       "Bar", "Bar"
       "Box", "Box"
       "Box1", "Box1"
       "I", "I"
       "I1", "I1"
       "T", "T"
       "T1", "T1"
       "T2", "T2"
       "Chan", "Chan"
       "Chan1", "Chan1"
       "Chan2", "Chan2"
       "Hat", "Hat"
       "Hat1", "Hat1"
       "H", "H"
       "L", "L"
       "Z", "Z"
       "Hexa", "Hexa"
       "Cross", "Cross"
    """
    Rod = 0  # StandardSectionBuilderStandardSectionTypeMemberType
    Tube = 1  # StandardSectionBuilderStandardSectionTypeMemberType
    Bar = 2  # StandardSectionBuilderStandardSectionTypeMemberType
    Box = 3  # StandardSectionBuilderStandardSectionTypeMemberType
    Box1 = 4  # StandardSectionBuilderStandardSectionTypeMemberType
    I = 5  # StandardSectionBuilderStandardSectionTypeMemberType
    I1 = 6  # StandardSectionBuilderStandardSectionTypeMemberType
    T = 7  # StandardSectionBuilderStandardSectionTypeMemberType
    T1 = 8  # StandardSectionBuilderStandardSectionTypeMemberType
    T2 = 9  # StandardSectionBuilderStandardSectionTypeMemberType
    Chan = 10  # StandardSectionBuilderStandardSectionTypeMemberType
    Chan1 = 11  # StandardSectionBuilderStandardSectionTypeMemberType
    Chan2 = 12  # StandardSectionBuilderStandardSectionTypeMemberType
    Hat = 13  # StandardSectionBuilderStandardSectionTypeMemberType
    Hat1 = 14  # StandardSectionBuilderStandardSectionTypeMemberType
    H = 15  # StandardSectionBuilderStandardSectionTypeMemberType
    L = 16  # StandardSectionBuilderStandardSectionTypeMemberType
    Z = 17  # StandardSectionBuilderStandardSectionTypeMemberType
    Hexa = 18  # StandardSectionBuilderStandardSectionTypeMemberType
    Cross = 19  # StandardSectionBuilderStandardSectionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class StandardSectionBuilder(BaseSectionBuilder):
    """
    Represents a :py:class:`Motion.StandardSectionBuilder`.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.BaseSectionCollection.CreateStandardSectionBuilder`
    
    .. versionadded:: NX12.0.0
    """
    
    class StandardSectionType():
        """
        the standard section type
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Rod", "Rod"
           "Tube", "Tube"
           "Bar", "Bar"
           "Box", "Box"
           "Box1", "Box1"
           "I", "I"
           "I1", "I1"
           "T", "T"
           "T1", "T1"
           "T2", "T2"
           "Chan", "Chan"
           "Chan1", "Chan1"
           "Chan2", "Chan2"
           "Hat", "Hat"
           "Hat1", "Hat1"
           "H", "H"
           "L", "L"
           "Z", "Z"
           "Hexa", "Hexa"
           "Cross", "Cross"
        """
        Rod = 0  # StandardSectionBuilderStandardSectionTypeMemberType
        Tube = 1  # StandardSectionBuilderStandardSectionTypeMemberType
        Bar = 2  # StandardSectionBuilderStandardSectionTypeMemberType
        Box = 3  # StandardSectionBuilderStandardSectionTypeMemberType
        Box1 = 4  # StandardSectionBuilderStandardSectionTypeMemberType
        I = 5  # StandardSectionBuilderStandardSectionTypeMemberType
        I1 = 6  # StandardSectionBuilderStandardSectionTypeMemberType
        T = 7  # StandardSectionBuilderStandardSectionTypeMemberType
        T1 = 8  # StandardSectionBuilderStandardSectionTypeMemberType
        T2 = 9  # StandardSectionBuilderStandardSectionTypeMemberType
        Chan = 10  # StandardSectionBuilderStandardSectionTypeMemberType
        Chan1 = 11  # StandardSectionBuilderStandardSectionTypeMemberType
        Chan2 = 12  # StandardSectionBuilderStandardSectionTypeMemberType
        Hat = 13  # StandardSectionBuilderStandardSectionTypeMemberType
        Hat1 = 14  # StandardSectionBuilderStandardSectionTypeMemberType
        H = 15  # StandardSectionBuilderStandardSectionTypeMemberType
        L = 16  # StandardSectionBuilderStandardSectionTypeMemberType
        Z = 17  # StandardSectionBuilderStandardSectionTypeMemberType
        Hexa = 18  # StandardSectionBuilderStandardSectionTypeMemberType
        Cross = 19  # StandardSectionBuilderStandardSectionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    Dim1: NXOpen.Expression = ...
    """
    Returns  the Dim1 
    
    <hr>
    
    Getter Method
    
    Signature ``Dim1`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Dim2: NXOpen.Expression = ...
    """
    Returns  the Dim2 
    
    <hr>
    
    Getter Method
    
    Signature ``Dim2`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Dim3: NXOpen.Expression = ...
    """
    Returns  the Dim3 
    
    <hr>
    
    Getter Method
    
    Signature ``Dim3`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Dim4: NXOpen.Expression = ...
    """
    Returns  the Dim4 
    
    <hr>
    
    Getter Method
    
    Signature ``Dim4`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Dim5: NXOpen.Expression = ...
    """
    Returns  the Dim5 
    
    <hr>
    
    Getter Method
    
    Signature ``Dim5`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Dim6: NXOpen.Expression = ...
    """
    Returns  the Dim6 
    
    <hr>
    
    Getter Method
    
    Signature ``Dim6`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SectionType: StandardSectionBuilderStandardSectionType = ...
    """
    Returns or sets  the section type 
    
    <hr>
    
    Getter Method
    
    Signature ``SectionType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.StandardSectionBuilderStandardSectionType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``SectionType`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Motion.StandardSectionBuilderStandardSectionType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: StandardSectionBuilder = ...  # unknown typename


class BeamForce(MotionObject, IGraphSource):
    """
    Represents a BeamForce   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Motion.BeamForceBuilder`
    
    .. versionadded:: NX12.0.0
    """
    Null: BeamForce = ...  # unknown typename


class ControlInputPortBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[ControlInputPortBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.Motion.ControlInputPortBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: ControlInputPortBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.Motion.ControlInputPortBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: ControlInputPortBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.Motion.ControlInputPortBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> ControlInputPortBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.Motion.ControlInputPortBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: ControlInputPortBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Motion.ControlInputPortBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: ControlInputPortBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Motion.ControlInputPortBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[ControlInputPortBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.Motion.ControlInputPortBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[ControlInputPortBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.Motion.ControlInputPortBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: ControlInputPortBuilder, object2: ControlInputPortBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.Motion.ControlInputPortBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.Motion.ControlInputPortBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: ControlInputPortBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.Motion.ControlInputPortBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: ControlInputPortBuilderList = ...  # unknown typename


class MotionSolutionCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Driver objects   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Motion.MotionManager`
    
    .. versionadded:: NX5.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateSolutionBuilder(self, solution: MotionSolution) -> MotionSolutionBuilder:
        """
        Creates an :py:class:`NXOpen.Motion.MotionSolutionBuilder`.  
        
        This class
        is used to construct an :py:class:`NXOpen.Motion.MotionSolution` object.  
        
        Signature ``CreateSolutionBuilder(solution)`` 
        
        :param solution:  ":py:class:`NXOpen.Motion.MotionSolution` to be edited,                                                                                           if None then create a new one 
        :type solution: :py:class:`NXOpen.Motion.MotionSolution` 
        :returns: 
        :rtype: :py:class:`NXOpen.Motion.MotionSolutionBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def FindObject(self, name: str) -> MotionSolution:
        """
        Finds the :py:class:`NXOpen.Motion.MotionSolution` object with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  Name of the Solution object.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Motion.MotionSolution` object with this name.  
        :rtype: :py:class:`NXOpen.Motion.MotionSolution` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def GetActiveSolution(self) -> MotionSolution:
        """
        Get the active :py:class:`NXOpen.Motion.MotionSolution` object of current session.  
        
        Signature ``GetActiveSolution()`` 
        
        :returns:  the active solution:py:class:`NXOpen.Motion.MotionSolution` 
        :rtype: :py:class:`NXOpen.Motion.MotionSolution` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def SetActiveSolution(self, activeSolution: MotionSolution) -> None:
        """
        Set the active :py:class:`NXOpen.Motion.MotionSolution` object of current session.  
        
        Signature ``SetActiveSolution(activeSolution)`` 
        
        :param activeSolution:  the active solution :py:class:`NXOpen.Motion.MotionSolution` 
        :type activeSolution: :py:class:`NXOpen.Motion.MotionSolution` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def DeleteSolution(self, tSolution: MotionSolution, ifDeleteResult: bool) -> None:
        """
        Delete the :py:class:`NXOpen.Motion.MotionSolution` object of current session.  
        
        Signature ``DeleteSolution(tSolution, ifDeleteResult)`` 
        
        :param tSolution:  the :py:class:`NXOpen.Motion.MotionSolution` object to be deleted  
        :type tSolution: :py:class:`NXOpen.Motion.MotionSolution` 
        :param ifDeleteResult:  Delete the result files if it is true  
        :type ifDeleteResult: bool 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def CreateAdvancedSolutionBuilder(self, advancedSolution: AdvancedSolution) -> AdvancedSolutionBuilder:
        """
        Creates a :py:class:`NXOpen.Motion.AdvancedSolution`  
        
        Signature ``CreateAdvancedSolutionBuilder(advancedSolution)`` 
        
        :param advancedSolution:  :py:class:`NXOpen.Motion.AdvancedSolution` to be edited  
        :type advancedSolution: :py:class:`NXOpen.Motion.AdvancedSolution` 
        :returns:  AdvancedSolutionBuilder object  
        :rtype: :py:class:`NXOpen.Motion.AdvancedSolutionBuilder` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    


class BeamForceCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of BeamForces   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Motion.MotionManager`
    
    .. versionadded:: NX12.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateBeamForceBuilder(self, beamForce: BeamForce) -> BeamForceBuilder:
        """
        Creates a :py:class:`Motion.BeamForceBuilder`  
        
        Signature ``CreateBeamForceBuilder(beamForce)`` 
        
        :param beamForce:  :py:class:`NXOpen.Motion.BeamForce`                                                                                        to be edited, if None then create a new one  
        :type beamForce: :py:class:`NXOpen.Motion.BeamForce` 
        :returns:  BeamForceBuilder object  
        :rtype: :py:class:`NXOpen.Motion.BeamForceBuilder` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def FindObject(self, name: str) -> BeamForce:
        """
        Finds the :py:class:`NXOpen.Motion.BeamForce` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Motion.BeamForce`  
        :type name: str 
        :returns:  :py:class:`NXOpen.Motion.BeamForce` with this name  
        :rtype: :py:class:`NXOpen.Motion.BeamForce` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    


class LinkCouplerBuilderTypeChoicesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LinkCouplerBuilderTypeChoices():
    """
    the LinkCoupler type.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "TwoLink", "2-Link"
       "ThreeLink", "3-Link"
       "FourLink", "4-Link"
    """
    TwoLink = 0  # LinkCouplerBuilderTypeChoicesMemberType
    ThreeLink = 1  # LinkCouplerBuilderTypeChoicesMemberType
    FourLink = 2  # LinkCouplerBuilderTypeChoicesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LinkCouplerBuilderMethodChoicesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LinkCouplerBuilderMethodChoices():
    """
    the LinkCoupler method.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Scales", "Scales"
       "CouplingCurve", "Coupling Curve"
    """
    Scales = 0  # LinkCouplerBuilderMethodChoicesMemberType
    CouplingCurve = 1  # LinkCouplerBuilderMethodChoicesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LinkCouplerBuilderCurveChoicesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LinkCouplerBuilderCurveChoices():
    """
    the LinkCoupler Curve type.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Function", "Function"
       "Profile", "Profile"
    """
    Function = 0  # LinkCouplerBuilderCurveChoicesMemberType
    Profile = 1  # LinkCouplerBuilderCurveChoicesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LinkCouplerBuilder(MotionBuilder):
    """
    Represents a :py:class:`NXOpen.Motion.LinkCouplerBuilder`   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.LinkCouplerCollection.CreateLinkCouplerBuilder`
    
    Default values.
    
    =============  =====
    Property       Value
    =============  =====
    DisplayScale   1.0 
    =============  =====
    
    .. versionadded:: NX12.0.0
    """
    
    class TypeChoices():
        """
        the LinkCoupler type.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "TwoLink", "2-Link"
           "ThreeLink", "3-Link"
           "FourLink", "4-Link"
        """
        TwoLink = 0  # LinkCouplerBuilderTypeChoicesMemberType
        ThreeLink = 1  # LinkCouplerBuilderTypeChoicesMemberType
        FourLink = 2  # LinkCouplerBuilderTypeChoicesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class MethodChoices():
        """
        the LinkCoupler method.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Scales", "Scales"
           "CouplingCurve", "Coupling Curve"
        """
        Scales = 0  # LinkCouplerBuilderMethodChoicesMemberType
        CouplingCurve = 1  # LinkCouplerBuilderMethodChoicesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class CurveChoices():
        """
        the LinkCoupler Curve type.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Function", "Function"
           "Profile", "Profile"
        """
        Function = 0  # LinkCouplerBuilderCurveChoicesMemberType
        Profile = 1  # LinkCouplerBuilderCurveChoicesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    Curve: MotionFunction = ...
    """
    Returns or sets  the coupling curve function 
    
    <hr>
    
    Getter Method
    
    Signature ``Curve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.MotionFunction` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Curve`` 
    
    :param spline: 
    :type spline: :py:class:`NXOpen.Motion.MotionFunction` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    CurveProfile: SelectFieldData = ...
    """
    Returns  the profile 
    
    <hr>
    
    Getter Method
    
    Signature ``CurveProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectFieldData` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    CurveType: LinkCouplerBuilderCurveChoices = ...
    """
    Returns or sets  the coupling curve type 
    
    <hr>
    
    Getter Method
    
    Signature ``CurveType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.LinkCouplerBuilderCurveChoices` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``CurveType`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Motion.LinkCouplerBuilderCurveChoices` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    FirstCouple: LinkCouplerCoupleBuilder = ...
    """
    Returns  the first couple 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstCouple`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.LinkCouplerCoupleBuilder` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    Method: LinkCouplerBuilderMethodChoices = ...
    """
    Returns or sets  the method 
    
    <hr>
    
    Getter Method
    
    Signature ``Method`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.LinkCouplerBuilderMethodChoices` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Method`` 
    
    :param method: 
    :type method: :py:class:`NXOpen.Motion.LinkCouplerBuilderMethodChoices` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Name: str = ...
    """
    Returns or sets  the unique name assigned to the Link Coupler component 
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SecondCouple: LinkCouplerCoupleBuilder = ...
    """
    Returns  the second couple 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondCouple`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.LinkCouplerCoupleBuilder` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    Type: LinkCouplerBuilderTypeChoices = ...
    """
    Returns or sets  the type 
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.LinkCouplerBuilderTypeChoices` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Motion.LinkCouplerBuilderTypeChoices` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: LinkCouplerBuilder = ...  # unknown typename


class TirePropertyAdvancedParametersRollingTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TirePropertyAdvancedParametersRollingType():
    """
    the rolling radius type.
    When 'None' is selected a 0.0 value is exported for the Rolling Radius parameter.
    'Bias' is used for a bias-ply tire and 'Belted' is for a belted radial tire.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", " - "
       "Bias", " - "
       "Belted", " - "
    """
    NotSet = 0  # TirePropertyAdvancedParametersRollingTypeMemberType
    Bias = 1  # TirePropertyAdvancedParametersRollingTypeMemberType
    Belted = 2  # TirePropertyAdvancedParametersRollingTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TirePropertyAdvancedParametersFrictTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TirePropertyAdvancedParametersFrictType():
    """
    The block type can be Function when a spline curve is used or
    Profile when a profile is used.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Function", " - "
       "Profile", " - "
    """
    Function = 0  # TirePropertyAdvancedParametersFrictTypeMemberType
    Profile = 1  # TirePropertyAdvancedParametersFrictTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TirePropertyAdvancedParametersContactTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TirePropertyAdvancedParametersContactType():
    """
    The block type can be Function when a spline curve is used or
    Profile when a profile is used.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Function", " - "
       "Profile", " - "
    """
    Function = 0  # TirePropertyAdvancedParametersContactTypeMemberType
    Profile = 1  # TirePropertyAdvancedParametersContactTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TirePropertyAdvancedParametersSurfTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TirePropertyAdvancedParametersSurfType():
    """
    the type of surface interaction calculations used.
    
    If type Simple is selected, the longitudinal friction coefficient is a function of the rolling slip only.
    If type Hard is selected, the longitudinal friction coefficient is a function of the rolling slip,
    section width, and the surface hardness.
    If type Soil is selected, the longitudinal friction coefficient is a function of the rolling slip,
    section width, section height, and the cone index.
    If FrictCurve (Rolling Slip Friction Curve) is selected, a curve is used to describe the longitudinal friction coefficient
    as a function of rolling slip (using the friction coefficient parameter from Standard Tire Property).
    If VelFrictCurve (Rolling Slip Velocity Friction Curve) is selected, a curve is used to describe the longitudinal 
    friction coefficient as a function of tirepatch rolling slip velocity (using the friction coefficient parameter from the TirePropertyBasicParameters)
    If FrictSurface or VelFrictSurface are selected, spline surface from data table files are used instead of curves. 
    In this case an additional contact area curve can be selected.
    If Soil is selected, the rolling resistance is calculated as part of the longitudinal friction coefficient formula;
    in all other case, the nominal rolling resistance coefficient (Rolling Resistence variable) is used.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Simple", " - "
       "Hard", " - "
       "Soil", " - "
       "VelFrictCurve", " - "
       "FrictCurve", " - "
       "VelFrictSurface", " - "
       "FrictSurface", " - "
    """
    Simple = 0  # TirePropertyAdvancedParametersSurfTypeMemberType
    Hard = 1  # TirePropertyAdvancedParametersSurfTypeMemberType
    Soil = 2  # TirePropertyAdvancedParametersSurfTypeMemberType
    VelFrictCurve = 3  # TirePropertyAdvancedParametersSurfTypeMemberType
    FrictCurve = 4  # TirePropertyAdvancedParametersSurfTypeMemberType
    VelFrictSurface = 5  # TirePropertyAdvancedParametersSurfTypeMemberType
    FrictSurface = 6  # TirePropertyAdvancedParametersSurfTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TirePropertyAdvancedParameters(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a TirePropertyAdvancedParameters builder   
    
    .. versionadded:: NX11.0.0
    """
    
    class RollingType():
        """
        the rolling radius type.
        When 'None' is selected a 0.0 value is exported for the Rolling Radius parameter.
        'Bias' is used for a bias-ply tire and 'Belted' is for a belted radial tire.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", " - "
           "Bias", " - "
           "Belted", " - "
        """
        NotSet = 0  # TirePropertyAdvancedParametersRollingTypeMemberType
        Bias = 1  # TirePropertyAdvancedParametersRollingTypeMemberType
        Belted = 2  # TirePropertyAdvancedParametersRollingTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class FrictType():
        """
        The block type can be Function when a spline curve is used or
        Profile when a profile is used.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Function", " - "
           "Profile", " - "
        """
        Function = 0  # TirePropertyAdvancedParametersFrictTypeMemberType
        Profile = 1  # TirePropertyAdvancedParametersFrictTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ContactType():
        """
        The block type can be Function when a spline curve is used or
        Profile when a profile is used.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Function", " - "
           "Profile", " - "
        """
        Function = 0  # TirePropertyAdvancedParametersContactTypeMemberType
        Profile = 1  # TirePropertyAdvancedParametersContactTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SurfType():
        """
        the type of surface interaction calculations used.
        
        If type Simple is selected, the longitudinal friction coefficient is a function of the rolling slip only.
        If type Hard is selected, the longitudinal friction coefficient is a function of the rolling slip,
        section width, and the surface hardness.
        If type Soil is selected, the longitudinal friction coefficient is a function of the rolling slip,
        section width, section height, and the cone index.
        If FrictCurve (Rolling Slip Friction Curve) is selected, a curve is used to describe the longitudinal friction coefficient
        as a function of rolling slip (using the friction coefficient parameter from Standard Tire Property).
        If VelFrictCurve (Rolling Slip Velocity Friction Curve) is selected, a curve is used to describe the longitudinal 
        friction coefficient as a function of tirepatch rolling slip velocity (using the friction coefficient parameter from the TirePropertyBasicParameters)
        If FrictSurface or VelFrictSurface are selected, spline surface from data table files are used instead of curves. 
        In this case an additional contact area curve can be selected.
        If Soil is selected, the rolling resistance is calculated as part of the longitudinal friction coefficient formula;
        in all other case, the nominal rolling resistance coefficient (Rolling Resistence variable) is used.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Simple", " - "
           "Hard", " - "
           "Soil", " - "
           "VelFrictCurve", " - "
           "FrictCurve", " - "
           "VelFrictSurface", " - "
           "FrictSurface", " - "
        """
        Simple = 0  # TirePropertyAdvancedParametersSurfTypeMemberType
        Hard = 1  # TirePropertyAdvancedParametersSurfTypeMemberType
        Soil = 2  # TirePropertyAdvancedParametersSurfTypeMemberType
        VelFrictCurve = 3  # TirePropertyAdvancedParametersSurfTypeMemberType
        FrictCurve = 4  # TirePropertyAdvancedParametersSurfTypeMemberType
        VelFrictSurface = 5  # TirePropertyAdvancedParametersSurfTypeMemberType
        FrictSurface = 6  # TirePropertyAdvancedParametersSurfTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    AligningMomentArm: NXOpen.Expression = ...
    """
    Returns  the aligning moment arm.  
    
    This parameter is only used in the :py:class:`Motion.TirePropertyBasic`. 
    It is produced about the tire vertical axis using this coefficient and the lateral force acting at the tire/road interface.
    
    <hr>
    
    Getter Method
    
    Signature ``AligningMomentArm`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ConeIndex: NXOpen.Expression = ...
    """
    Returns  the cone index.  
    
    This is an index value of the Surface type.
    For Soil Surface type, this value is the cone index. 
    For Hard Surface type, this is the rubber hardness. Units are force per length squared.
    
    <hr>
    
    Getter Method
    
    Signature ``ConeIndex`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ContactAreaFunction: MotionFunction = ...
    """
    Returns or sets  the contact area function.  
    
    <hr>
    
    Getter Method
    
    Signature ``ContactAreaFunction`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.MotionFunction` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``ContactAreaFunction`` 
    
    :param func: 
    :type func: :py:class:`NXOpen.Motion.MotionFunction` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ContactAreaProfile: SelectFieldData = ...
    """
    Returns  the Contact Area Profile.  
    
    <hr>
    
    Getter Method
    
    Signature ``ContactAreaProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectFieldData` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ContactAreaType: TirePropertyAdvancedParametersContactType = ...
    """
    Returns or sets  the contact area type.  
    
    <hr>
    
    Getter Method
    
    Signature ``ContactAreaType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.TirePropertyAdvancedParametersContactType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``ContactAreaType`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Motion.TirePropertyAdvancedParametersContactType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    DistributedContact: bool = ...
    """
    Returns or sets  the distributed contact 
    
    <hr>
    
    Getter Method
    
    Signature ``DistributedContact`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``DistributedContact`` 
    
    :param inValue: 
    :type inValue: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    FrictionFunction: MotionFunction = ...
    """
    Returns or sets  the friction function.  
    
    <hr>
    
    Getter Method
    
    Signature ``FrictionFunction`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.MotionFunction` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``FrictionFunction`` 
    
    :param func: 
    :type func: :py:class:`NXOpen.Motion.MotionFunction` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    FrictionProfile: SelectFieldData = ...
    """
    Returns  the friction Profile.  
    
    <hr>
    
    Getter Method
    
    Signature ``FrictionProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectFieldData` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    FrictionSurfaceFile: str = ...
    """
    Returns or sets  the friction surface file 
    
    <hr>
    
    Getter Method
    
    Signature ``FrictionSurfaceFile`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``FrictionSurfaceFile`` 
    
    :param fileName: 
    :type fileName: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    FrictionSurfaceProfile: SelectFieldData = ...
    """
    Returns  the friction surface profile 
    
    <hr>
    
    Getter Method
    
    Signature ``FrictionSurfaceProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectFieldData` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    FrictionType: TirePropertyAdvancedParametersFrictType = ...
    """
    Returns or sets  the friction type.  
    
    <hr>
    
    Getter Method
    
    Signature ``FrictionType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.TirePropertyAdvancedParametersFrictType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``FrictionType`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Motion.TirePropertyAdvancedParametersFrictType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    NumDivisions: NXOpen.Expression = ...
    """
    Returns  the number of divisions.  
    
    When the distributed contact normal force model is to be used, 
    this variable should be set to the number of vertical "slices" into which the tire is divided.
    If a simple "point-contact" normal force model is desired, this variable should be set to zero.
    The distributed contact model should be used when the road profile contains abrupt changes. 
    NumDivisions should be set high enough so that each "slice" is smaller than the smallest road profile feature. 
    
    <hr>
    
    Getter Method
    
    Signature ``NumDivisions`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    RelaxationLength: NXOpen.Expression = ...
    """
    Returns  the relaxation length.  
    
    This value, combined with the fore/aft velocity, determines the time constant 
    of a first-order equation, which is used to attenuate response of the lateral 
    force and aligning torque. A value of zero results in no lag. If a variable 
    relaxation length is desired the user can place a user defined equation in the
    file relaxln.f. This file can be found in the user defined subroutines directory.
    If a user defined relaxation length is used, then the value in the form-fill should
    be an approximation of the nominal value. 
    
    <hr>
    
    Getter Method
    
    Signature ``RelaxationLength`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    RollingRadiusType: TirePropertyAdvancedParametersRollingType = ...
    """
    Returns or sets  the rolling radius type.  
    
    <hr>
    
    Getter Method
    
    Signature ``RollingRadiusType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.TirePropertyAdvancedParametersRollingType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``RollingRadiusType`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Motion.TirePropertyAdvancedParametersRollingType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    RollingRadiusValue: NXOpen.Expression = ...
    """
    Returns  the rolling radius of the tire.  
    
    This value is found by dividing the distance traveled during one rotation by 2 PI.
    If a value of zero is entered, the deflected radius found in the tire normal force calculation
    will be used to calculate the tirepatch slip and tire force application point.
    If a positive value is entered, this value will be used to calculate the tirepatch slip 
    and tire force application point.
    If a negative value is entered, this value will be used to calculate the tirepatch slip,
    but the tire force application point will be at the deflected radius
    (this formulation simulates a tire with steel non-deformable belt).
    
    <hr>
    
    Getter Method
    
    Signature ``RollingRadiusValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SectionHeight: NXOpen.Expression = ...
    """
    Returns  the section height.  
    
    This is used by the Soil surface model and is related to unloaded diameter and rim diameter.
    The section height is also used as the carcass diameter to calculate the lateral offset of the
    tire patch due to carcass roll. This is used in calculating the roll moment due to lateral offset
    of the tire patch.        
    
    <hr>
    
    Getter Method
    
    Signature ``SectionHeight`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SectionWidth: NXOpen.Expression = ...
    """
    Returns  the section width.  
    
    This is used by the Hard and Soil surface models.
    
    <hr>
    
    Getter Method
    
    Signature ``SectionWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    StaticHold: bool = ...
    """
    Returns or sets  the static hold.  
    
    it controls whether or not the tire should generate holding forces during static or quasistatic analysis.
    When this parameter is true, the tire will generate the following fictitious forces during static analysis,
    or during the static phase of STATIC/DYNAMIC analysis (see the System Data and Static elements documentation for more details).
    First, a torque is applied to the chassis to introduce stiffness for vehicle yaw motion.
    Finally, forces are applied in the fore-aft and lateral chassis directions in order to prevent equilibrium problems.
    Disabling these forces may cause the static analysis to fail. If the vehicle is on a flat road,
    then the fictitious forces will yield a physically meaningful static vehicle position. These forces attempt to keep the tire spin angle, 
    chassis lateral/longitudinal postion at their initial values. 
    
    <hr>
    
    Getter Method
    
    Signature ``StaticHold`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``StaticHold`` 
    
    :param inValue: 
    :type inValue: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SurfaceType: TirePropertyAdvancedParametersSurfType = ...
    """
    Returns or sets  the surface type.  
    
    <hr>
    
    Getter Method
    
    Signature ``SurfaceType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.TirePropertyAdvancedParametersSurfType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``SurfaceType`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Motion.TirePropertyAdvancedParametersSurfType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    TransDampingDeflection: NXOpen.Expression = ...
    """
    Returns  the transitional damping deflection.  
    
    When non-zero, this value is used to attenuate the normal damping force for small tire deflections.
    If a value of zero is entered, the nominal damping rate is used.
    The normal damping rate is found by the formula:
    CD (1 - e-3d/d0)
    where:
    CD is the nominal damping rate (from damping coeff or curve damping), 
    d is the tire normal deflection,
    and d0 is the transitional normal damping deflection.
    
    <hr>
    
    Getter Method
    
    Signature ``TransDampingDeflection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: TirePropertyAdvancedParameters = ...  # unknown typename


class MechanismExportPositionOrientationFormatMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MechanismExportPositionOrientationFormat():
    """
    Format to export the position and orientation data.  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "TransformationMatrix", "Origin and X, Y, Z vectors"
       "Pqr", "P, Q, R points"
       "BryantAngles", "Origin and Bryant angles"
       "EulerAngles", "Origin and Euler angles"
       "EulerParameters", "Origin and Euler parameters"
    """
    TransformationMatrix = 0  # MechanismExportPositionOrientationFormatMemberType
    Pqr = 1  # MechanismExportPositionOrientationFormatMemberType
    BryantAngles = 2  # MechanismExportPositionOrientationFormatMemberType
    EulerAngles = 3  # MechanismExportPositionOrientationFormatMemberType
    EulerParameters = 4  # MechanismExportPositionOrientationFormatMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MechanismExport():
    """
    Represents a Mechanism Export object used to export one or more Motion objects to a text file.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Motion.MotionSession`
    
    .. versionadded:: NX12.0.0
    """
    
    class PositionOrientationFormat():
        """
        Format to export the position and orientation data.  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "TransformationMatrix", "Origin and X, Y, Z vectors"
           "Pqr", "P, Q, R points"
           "BryantAngles", "Origin and Bryant angles"
           "EulerAngles", "Origin and Euler angles"
           "EulerParameters", "Origin and Euler parameters"
        """
        TransformationMatrix = 0  # MechanismExportPositionOrientationFormatMemberType
        Pqr = 1  # MechanismExportPositionOrientationFormatMemberType
        BryantAngles = 2  # MechanismExportPositionOrientationFormatMemberType
        EulerAngles = 3  # MechanismExportPositionOrientationFormatMemberType
        EulerParameters = 4  # MechanismExportPositionOrientationFormatMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def ExportMdef(self, fileName: str, posOrientFormat: MechanismExportPositionOrientationFormat, exportEmptyInputFields: bool, exportUnusedOptions: bool, exportSubmechAsMdef: bool, enablePublish: bool, publishedFolder: str, objects: 'list[NXOpen.NXObject]') -> None:
        """
        Exports selected objects to .  
        
        mdef file
        
        Signature ``ExportMdef(fileName, posOrientFormat, exportEmptyInputFields, exportUnusedOptions, exportSubmechAsMdef, enablePublish, publishedFolder, objects)`` 
        
        :param fileName:  Full path to the .mdef file  
        :type fileName: str 
        :param posOrientFormat:  Format to export the position and orientation data  
        :type posOrientFormat: :py:class:`NXOpen.Motion.MechanismExportPositionOrientationFormat` 
        :param exportEmptyInputFields:  When TRUE, exports data that do not have any values defined  
        :type exportEmptyInputFields: bool 
        :param exportUnusedOptions:  When TRUE, exports data currently unused in the Motion objects  
        :type exportUnusedOptions: bool 
        :param exportSubmechAsMdef:  When TRUE, export the submechanisms as .mdef files. Otherwise references them as .sim files. 
        :type exportSubmechAsMdef: bool 
        :param enablePublish:  When TRUE, the publish option is enabled.  
        :type enablePublish: bool 
        :param publishedFolder:  Full path to the published folder  
        :type publishedFolder: str 
        :param objects:  Motion objects to export  
        :type objects: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def ExportPlmxml(self, fileName: str, objects: 'list[NXOpen.NXObject]') -> None:
        """
        Exports Mechanism to .  
        
        xml file. If Motion part is included, exports all the Motion objects from it. 
        
        Signature ``ExportPlmxml(fileName, objects)`` 
        
        :param fileName:  Full path of the .xml file  
        :type fileName: str 
        :param objects:  Motion objects or Motion part tag  
        :type objects: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    


class JointDriverCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Driver objects   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Motion.MotionManager`
    
    .. versionadded:: NX5.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateJointDriverBuilder(self, jointdriver: JointDriver) -> JointDriverBuilder:
        """
        Creates a :py:class:`NXOpen.Motion.JointDriverBuilder`  
        
        Signature ``CreateJointDriverBuilder(jointdriver)`` 
        
        :param jointdriver:  :py:class:`NXOpen.Motion.JointDriver` to be edited,                                                                                               if None then create a new one 
        :type jointdriver: :py:class:`NXOpen.Motion.JointDriver` 
        :returns: 
        :rtype: :py:class:`NXOpen.Motion.JointDriverBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def FindObject(self, name: str) -> JointDriver:
        """
        Finds the :py:class:`NXOpen.Motion.JointDriver` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Motion.JointDriver`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Motion.JointDriver` with this name.  
        :rtype: :py:class:`NXOpen.Motion.JointDriver` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    


class BushingCylindricalCoefficientsComponent(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a Motion BushingCylindricalCoefficientsComponent
    
    .. versionadded:: NX6.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    ConicalCurveProfile: SelectFieldData = ...
    """
    Returns  the conical curve profile.  
    
    It is available only when 
    :py:meth:`Motion.BushingCylindricalCoefficientsComponent.ConicalType`` is set to :py:class:`MotionConnectorCoefficientTypes.Profile2d <MotionConnectorCoefficientTypes>` or
    :py:class:`MotionConnectorCoefficientTypes.ExpressionAndProfile2d <MotionConnectorCoefficientTypes>` 
    
    <hr>
    
    Getter Method
    
    Signature ``ConicalCurveProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectFieldData` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ConicalExpression: NXOpen.Expression = ...
    """
    Returns  the conical coefficient expression, it is available only when 
    :py:meth:`Motion.BushingCylindricalCoefficientsComponent.ConicalType`` set to :py:class:`MotionConnectorCoefficientTypes.Constant <MotionConnectorCoefficientTypes>` case 
    
    <hr>
    
    Getter Method
    
    Signature ``ConicalExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ConicalFunction: NXOpen.CAE.Function = ...
    """
    Returns or sets  the conical function tag, it is available only when 
    :py:meth:`Motion.BushingCylindricalCoefficientsComponent.ConicalType`` set to :py:class:`MotionConnectorCoefficientTypes.Spline <MotionConnectorCoefficientTypes>` case 
    
    <hr>
    
    Getter Method
    
    Signature ``ConicalFunction`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CAE.Function` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ConicalFunction`` 
    
    :param function: 
    :type function: :py:class:`NXOpen.CAE.Function` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ConicalType: ConnectorCoefficientTypes = ...
    """
    Returns or sets  the conical coefficient type 
    
    <hr>
    
    Getter Method
    
    Signature ``ConicalType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.ConnectorCoefficientTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ConicalType`` 
    
    :param conicalType: 
    :type conicalType: :py:class:`NXOpen.Motion.ConnectorCoefficientTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    LongCurveProfile: SelectFieldData = ...
    """
    Returns  the longitudinal curve profile.  
    
    It is available only when 
    :py:meth:`Motion.BushingCylindricalCoefficientsComponent.LongitudinalType`` is set to :py:class:`MotionConnectorCoefficientTypes.Profile2d <MotionConnectorCoefficientTypes>` or
    :py:class:`MotionConnectorCoefficientTypes.ExpressionAndProfile2d <MotionConnectorCoefficientTypes>` 
    
    <hr>
    
    Getter Method
    
    Signature ``LongCurveProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectFieldData` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    LongitudinalExpression: NXOpen.Expression = ...
    """
    Returns  the longitudinal coefficient expression, it is available only when 
    :py:meth:`Motion.BushingCylindricalCoefficientsComponent.LongitudinalType`` set to :py:class:`MotionConnectorCoefficientTypes.Constant <MotionConnectorCoefficientTypes>` case 
    
    <hr>
    
    Getter Method
    
    Signature ``LongitudinalExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    LongitudinalFunction: NXOpen.CAE.Function = ...
    """
    Returns or sets  the longitudinal function tag, it is available only when 
    :py:meth:`Motion.BushingCylindricalCoefficientsComponent.LongitudinalType`` set to :py:class:`MotionConnectorCoefficientTypes.Spline <MotionConnectorCoefficientTypes>` case 
    
    <hr>
    
    Getter Method
    
    Signature ``LongitudinalFunction`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CAE.Function` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LongitudinalFunction`` 
    
    :param function: 
    :type function: :py:class:`NXOpen.CAE.Function` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    LongitudinalType: ConnectorCoefficientTypes = ...
    """
    Returns or sets  the longitudinal type 
    
    <hr>
    
    Getter Method
    
    Signature ``LongitudinalType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.ConnectorCoefficientTypes` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LongitudinalType`` 
    
    :param longitudinalType: 
    :type longitudinalType: :py:class:`NXOpen.Motion.ConnectorCoefficientTypes` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    RadialCurveProfile: SelectFieldData = ...
    """
    Returns  the radial curve profile.  
    
    It is available only when 
    :py:meth:`Motion.BushingCylindricalCoefficientsComponent.RadialType`` is set to :py:class:`MotionConnectorCoefficientTypes.Profile2d <MotionConnectorCoefficientTypes>` or
    :py:class:`MotionConnectorCoefficientTypes.ExpressionAndProfile2d <MotionConnectorCoefficientTypes>` 
    
    <hr>
    
    Getter Method
    
    Signature ``RadialCurveProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectFieldData` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    RadialExpression: NXOpen.Expression = ...
    """
    Returns  the radial coefficient expression, it is available only when 
    :py:meth:`Motion.BushingCylindricalCoefficientsComponent.RadialType`` set to :py:class:`MotionConnectorCoefficientTypes.Constant <MotionConnectorCoefficientTypes>` case 
    
    <hr>
    
    Getter Method
    
    Signature ``RadialExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    RadialFunction: NXOpen.CAE.Function = ...
    """
    Returns or sets  the radial function tag, it is available only when 
    :py:meth:`Motion.BushingCylindricalCoefficientsComponent.RadialType`` set to :py:class:`MotionConnectorCoefficientTypes.Spline <MotionConnectorCoefficientTypes>` case 
    
    <hr>
    
    Getter Method
    
    Signature ``RadialFunction`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CAE.Function` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RadialFunction`` 
    
    :param function: 
    :type function: :py:class:`NXOpen.CAE.Function` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    RadialType: ConnectorCoefficientTypes = ...
    """
    Returns or sets  the radial type 
    
    <hr>
    
    Getter Method
    
    Signature ``RadialType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.ConnectorCoefficientTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RadialType`` 
    
    :param radialType: 
    :type radialType: :py:class:`NXOpen.Motion.ConnectorCoefficientTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    TorsionalCurveProfile: SelectFieldData = ...
    """
    Returns  the torsional curve profile.  
    
    It is available only when 
    :py:meth:`Motion.BushingCylindricalCoefficientsComponent.TorsionalType``is set to :py:class:`MotionConnectorCoefficientTypes.Profile2d <MotionConnectorCoefficientTypes>` or
    :py:class:`MotionConnectorCoefficientTypes.ExpressionAndProfile2d <MotionConnectorCoefficientTypes>` 
    
    <hr>
    
    Getter Method
    
    Signature ``TorsionalCurveProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectFieldData` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    TorsionalExpression: NXOpen.Expression = ...
    """
    Returns  the torsional coefficient expression, it is available only when 
    :py:meth:`Motion.BushingCylindricalCoefficientsComponent.TorsionalType`` set to :py:class:`MotionConnectorCoefficientTypes.Constant <MotionConnectorCoefficientTypes>` case 
    
    <hr>
    
    Getter Method
    
    Signature ``TorsionalExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    TorsionalFunction: NXOpen.CAE.Function = ...
    """
    Returns or sets  the torsional function tag, it is available only when 
    :py:meth:`Motion.BushingCylindricalCoefficientsComponent.TorsionalType`` set to :py:class:`MotionConnectorCoefficientTypes.Spline <MotionConnectorCoefficientTypes>` case 
    
    <hr>
    
    Getter Method
    
    Signature ``TorsionalFunction`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CAE.Function` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TorsionalFunction`` 
    
    :param function: 
    :type function: :py:class:`NXOpen.CAE.Function` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    TorsionalType: ConnectorCoefficientTypes = ...
    """
    Returns or sets  the torsional type 
    
    <hr>
    
    Getter Method
    
    Signature ``TorsionalType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.ConnectorCoefficientTypes` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TorsionalType`` 
    
    :param torsionalType: 
    :type torsionalType: :py:class:`NXOpen.Motion.ConnectorCoefficientTypes` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: BushingCylindricalCoefficientsComponent = ...  # unknown typename


class AnalyticalContact(MotionObject, IGraphSource):
    """
    Represents an Analytical Contact motion object.  
    
    Used to model contact between 
    spheres, revolved surfaces, extruded surfaces, and rails. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Motion.AnalyticalContactBuilder`
    
    .. versionadded:: NX12.0.0
    """
    Null: AnalyticalContact = ...  # unknown typename


class GeneralCouplerBuilderAttachmentTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class GeneralCouplerBuilderAttachmentType():
    """
    Definitions of joint coupler attachment type  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Two", "two-joint coupler type"
       "Three", "three-joint coupler type"
    """
    Two = 0  # GeneralCouplerBuilderAttachmentTypeMemberType
    Three = 1  # GeneralCouplerBuilderAttachmentTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class GeneralCouplerBuilder(MotionBuilder):
    """
    Represents a :py:class:`NXOpen.Motion.GeneralCouplerBuilder`   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.GeneralCouplerCollection.CreateGeneralCouplerBuilder`
    
    Default values.
    
    ============================  =====
    Property                      Value
    ============================  =====
    DisplayScale                  1.0 
    ----------------------------  -----
    FirstScaleExpression.Value    1.0 
    ----------------------------  -----
    SecondScaleExpression.Value   1.0 
    ----------------------------  -----
    ThirdScaleExpression.Value    1.0 
    ============================  =====
    
    .. versionadded:: NX7.5.0
    """
    
    class AttachmentType():
        """
        Definitions of joint coupler attachment type  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Two", "two-joint coupler type"
           "Three", "three-joint coupler type"
        """
        Two = 0  # GeneralCouplerBuilderAttachmentTypeMemberType
        Three = 1  # GeneralCouplerBuilderAttachmentTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    Attachment: GeneralCouplerBuilderAttachmentType = ...
    """
    Returns or sets  the attachment type 
    
    <hr>
    
    Getter Method
    
    Signature ``Attachment`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.GeneralCouplerBuilderAttachmentType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Attachment`` 
    
    :param attachment: 
    :type attachment: :py:class:`NXOpen.Motion.GeneralCouplerBuilderAttachmentType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    FirstJoint: SelectJoint = ...
    """
    Returns  the selected first joint 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstJoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectJoint` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    FirstScaleExpression: NXOpen.Expression = ...
    """
    Returns  the first scale expression
    
    <hr>
    
    Getter Method
    
    Signature ``FirstScaleExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    FirstType: GcouplerMovementTypes = ...
    """
    Returns or sets  the first joint movement type 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.GcouplerMovementTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FirstType`` 
    
    :param firstType: 
    :type firstType: :py:class:`NXOpen.Motion.GcouplerMovementTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Name: str = ...
    """
    Returns or sets  the 2-3 joint coupler name 
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SecondJoint: SelectJoint = ...
    """
    Returns  the selected second joint 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondJoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectJoint` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SecondScaleExpression: NXOpen.Expression = ...
    """
    Returns  the second scale expression
    
    <hr>
    
    Getter Method
    
    Signature ``SecondScaleExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    SecondType: GcouplerMovementTypes = ...
    """
    Returns or sets  the second joint movement type 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.GcouplerMovementTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SecondType`` 
    
    :param secondType: 
    :type secondType: :py:class:`NXOpen.Motion.GcouplerMovementTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ThirdJoint: SelectJoint = ...
    """
    Returns  the selected third joint 
    
    <hr>
    
    Getter Method
    
    Signature ``ThirdJoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectJoint` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ThirdScaleExpression: NXOpen.Expression = ...
    """
    Returns  the third scale expression
    
    <hr>
    
    Getter Method
    
    Signature ``ThirdScaleExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    ThirdType: GcouplerMovementTypes = ...
    """
    Returns or sets  the third joint movement type 
    
    <hr>
    
    Getter Method
    
    Signature ``ThirdType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.GcouplerMovementTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ThirdType`` 
    
    :param thirdType: 
    :type thirdType: :py:class:`NXOpen.Motion.GcouplerMovementTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: GeneralCouplerBuilder = ...  # unknown typename


class CurveContactBuilderGeometryMaterialSideMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CurveContactBuilderGeometryMaterialSide():
    """
    the enum for the materia side direction of the selected geometry
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Direction", " - "
       "DirectionReverse", " - "
    """
    Direction = 0  # CurveContactBuilderGeometryMaterialSideMemberType
    DirectionReverse = 1  # CurveContactBuilderGeometryMaterialSideMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CurveContactBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Motion.CurveContactBuilder`   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.CurveContactCollection.CreateCurveContactBuilder`
    
    Default values.
    
    =================================================================  =================================================================
    Property                                                           Value
    =================================================================  =================================================================
    AdamsParameters.DynamicCoefficientExpression.Value                 0.05 
    -----------------------------------------------------------------  -----------------------------------------------------------------
    AdamsParameters.ForceExponentExpression.Value                      1.2 
    -----------------------------------------------------------------  -----------------------------------------------------------------
    AdamsParameters.MaterialDampingExpression.Value                    100000.0 (millimeters part), 570.993 (inches part) 
    -----------------------------------------------------------------  -----------------------------------------------------------------
    AdamsParameters.PenetrationDepthExpression.Value                   0.001 (millimeters part), 0.00003937 (inches part) 
    -----------------------------------------------------------------  -----------------------------------------------------------------
    AdamsParameters.SlipVelocityExpression.Value                       0.1 (millimeters part), 0.003937 (inches part) 
    -----------------------------------------------------------------  -----------------------------------------------------------------
    AdamsParameters.StaticCoefficientExpression.Value                  0.08 
    -----------------------------------------------------------------  -----------------------------------------------------------------
    AdamsParameters.StiffnessExpression.Value                          100000000000.0 (millimeters part), 570993141.98628 (inches part) 
    -----------------------------------------------------------------  -----------------------------------------------------------------
    AdamsParameters.TransitionVelocityExpression.Value                 1.0 (millimeters part), 0.03937 (inches part) 
    -----------------------------------------------------------------  -----------------------------------------------------------------
    DisplayScale                                                       1.0 
    -----------------------------------------------------------------  -----------------------------------------------------------------
    RecurdynParameters.BufferRadiusFactorExpression.Value              1.2 
    -----------------------------------------------------------------  -----------------------------------------------------------------
    RecurdynParameters.CurveToleranceFactorExpression.Value            10.0 
    -----------------------------------------------------------------  -----------------------------------------------------------------
    RecurdynParameters.DynamicCoefficientExpression.Value              0.05 
    -----------------------------------------------------------------  -----------------------------------------------------------------
    RecurdynParameters.FirstCurveMaximumPenetrationExpression.Value    10.0 (millimeters part), 0.3937 (inches part) 
    -----------------------------------------------------------------  -----------------------------------------------------------------
    RecurdynParameters.ForceExponentExpression.Value                   1.2 
    -----------------------------------------------------------------  -----------------------------------------------------------------
    RecurdynParameters.MaterialDampingExpression.Value                 100000.0 (millimeters part), 570.993 (inches part) 
    -----------------------------------------------------------------  -----------------------------------------------------------------
    RecurdynParameters.MaximumStepSizeFactorExpression.Value           2.0 
    -----------------------------------------------------------------  -----------------------------------------------------------------
    RecurdynParameters.PenetrationDepthExpression.Value                0.001 (millimeters part), 0.00003937 (inches part) 
    -----------------------------------------------------------------  -----------------------------------------------------------------
    RecurdynParameters.SecondCurveMaximumPenetrationExpression.Value   10.0 (millimeters part), 0.3937 (inches part) 
    -----------------------------------------------------------------  -----------------------------------------------------------------
    RecurdynParameters.SlipVelocityExpression.Value                    0.1 (millimeters part), 0.003937 (inches part) 
    -----------------------------------------------------------------  -----------------------------------------------------------------
    RecurdynParameters.StaticCoefficientExpression.Value               0.08 
    -----------------------------------------------------------------  -----------------------------------------------------------------
    RecurdynParameters.StiffnessExpression.Value                       100000000000.0 (millimeters part), 570993141.98628 (inches part) 
    -----------------------------------------------------------------  -----------------------------------------------------------------
    RecurdynParameters.TransitionVelocityExpression.Value              1.0 (millimeters part), 0.03937 (inches part) 
    =================================================================  =================================================================
    
    .. versionadded:: NX5.0.0
    """
    
    class GeometryMaterialSide():
        """
        the enum for the materia side direction of the selected geometry
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Direction", " - "
           "DirectionReverse", " - "
        """
        Direction = 0  # CurveContactBuilderGeometryMaterialSideMemberType
        DirectionReverse = 1  # CurveContactBuilderGeometryMaterialSideMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AdamsParameters: CurveContactAdams = ...
    """
    Returns  the 2D CurveContact's subobject (the adams parameters) 
    
    <hr>
    
    Getter Method
    
    Signature ``AdamsParameters`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.CurveContactAdams` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    ContactName: str = ...
    """
    Returns or sets  the contact name 
    
    <hr>
    
    Getter Method
    
    Signature ``ContactName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ContactName`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    DisplayScale: float = ...
    """
    Returns or sets  the display scale 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayScale`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayScale`` 
    
    :param displayScale: 
    :type displayScale: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    FirstContactCurve: NXOpen.SelectNXObjectList = ...
    """
    Returns  the selection of the first contact curve 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstContactCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    FirstGeometryMaterialDirection: CurveContactBuilderGeometryMaterialSide = ...
    """
    Returns or sets  the first geometry materia side direction 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstGeometryMaterialDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.CurveContactBuilderGeometryMaterialSide` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FirstGeometryMaterialDirection`` 
    
    :param sideDirection: 
    :type sideDirection: :py:class:`NXOpen.Motion.CurveContactBuilderGeometryMaterialSide` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    RecurdynParameters: CurveContactRecurdyn = ...
    """
    Returns  the 2D CurveContact's subobject (the recurdyn parameters) 
    
    <hr>
    
    Getter Method
    
    Signature ``RecurdynParameters`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.CurveContactRecurdyn` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    SecondContactCurve: NXOpen.SelectNXObjectList = ...
    """
    Returns  the selection of the second contact curve 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondContactCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    SecondGeometryMaterialDirection: CurveContactBuilderGeometryMaterialSide = ...
    """
    Returns or sets  the second geometry materia side direction 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondGeometryMaterialDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.CurveContactBuilderGeometryMaterialSide` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SecondGeometryMaterialDirection`` 
    
    :param sideDirection: 
    :type sideDirection: :py:class:`NXOpen.Motion.CurveContactBuilderGeometryMaterialSide` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: CurveContactBuilder = ...  # unknown typename


class ParamRedefineStateMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ParamRedefineState():
    """
    Defines the redefine state of a property of an occurrence of an object in the assembly. 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotRedefined", "Parameter is not redefined"
       "Redefined", "Parameter is redefined"
    """
    NotRedefined = 0  # ParamRedefineStateMemberType
    Redefined = 1  # ParamRedefineStateMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class JointCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of motion joints   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Motion.MotionManager`
    
    .. versionadded:: NX5.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateJointBuilder(self, joint: Joint) -> JointBuilder:
        """
        Return  :py:class:`NXOpen.Motion.JointBuilder` object   
        
        Signature ``CreateJointBuilder(joint)`` 
        
        :param joint:  :py:class:`NXOpen.Motion.JointBuilder`                                                   to be edited, if None then create a new one  
        :type joint: :py:class:`NXOpen.Motion.Joint` 
        :returns:  JointBuilder object  
        :rtype: :py:class:`NXOpen.Motion.JointBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def FindObject(self, name: str) -> Joint:
        """
        Finds the :py:class:`NXOpen.Motion.Joint` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name: 
        :type name: str 
        :returns: 
        :rtype: :py:class:`NXOpen.Motion.Joint` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    


class LinkDriver(MotionObject, IGraphSource):
    """
    Represents a Link Driver   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Motion.LinkDriverBuilder`
    
    .. versionadded:: NX11.0.0
    """
    Null: LinkDriver = ...  # unknown typename


class ControlPortCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Control Port objects   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Motion.ControlInput`
    
    .. versionadded:: NX11.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def FindObject(self, name: str) -> ControlPort:
        """
        Finds the :py:class:`NXOpen.Motion.ControlPort` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Motion.ControlPort`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Motion.ControlPort` with this name.  
        :rtype: :py:class:`NXOpen.Motion.ControlPort` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    


class ResultMeasureCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of result measure objects   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Motion.MotionManager`
    
    .. versionadded:: NX11.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateResultMeasureBuilder(self, resultMeasure: ResultMeasure) -> ResultMeasureBuilder:
        """
        Creates a :py:class:`NXOpen.Motion.ResultMeasureBuilder`.  
        
        If active :py:class:`NXOpen.Motion.MotionSolution` is not present, builder will not be created.  
        
        Signature ``CreateResultMeasureBuilder(resultMeasure)`` 
        
        :param resultMeasure:  :py:class:`NXOpen.Motion.ResultMeasure` to be edited, if None then create a new one  
        :type resultMeasure: :py:class:`NXOpen.Motion.ResultMeasure` 
        :returns: 
        :rtype: :py:class:`NXOpen.Motion.ResultMeasureBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def Find(self, name: str) -> ResultMeasure:
        """
        Finds the :py:class:`NXOpen.Motion.ResultMeasure` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``Find(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Motion.ResultMeasure`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Motion.ResultMeasure` with this name.  
        :rtype: :py:class:`NXOpen.Motion.ResultMeasure` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def UpdateResultMeasures(self, resultMeasure: 'list[ResultMeasure]') -> None:
        """
        Update list of result measures.  
        
        Signature ``UpdateResultMeasures(resultMeasure)`` 
        
        :param resultMeasure: 
        :type resultMeasure: list of :py:class:`NXOpen.Motion.ResultMeasure` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def DeleteResultMeasures(self, resultMeasure: 'list[ResultMeasure]') -> None:
        """
        Delete list of result measures.  
        
        Signature ``DeleteResultMeasures(resultMeasure)`` 
        
        :param resultMeasure: 
        :type resultMeasure: list of :py:class:`NXOpen.Motion.ResultMeasure` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    


class TirePropertyFtBuilder(TirePropertyBuilder):
    """
    Represents a Builder for Motion Ftire Tire Property   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.TirePropertyFtCollection.CreateTirePropertyFtBuilder`
    
    Default values.
    
    ==============================  ===============================================
    Property                        Value
    ==============================  ===============================================
    IdRoad.Value                    0 (millimeters part), 0 (inches part) 
    ------------------------------  -----------------------------------------------
    Radius.Value                    300.0 (millimeters part), 11.811 (inches part) 
    ------------------------------  -----------------------------------------------
    RunInParallel                   0 
    ------------------------------  -----------------------------------------------
    StaticHold                      1 
    ------------------------------  -----------------------------------------------
    StaticVerticalStiffness.Value   0.0 (millimeters part), 0.0 (inches part) 
    ==============================  ===============================================
    
    .. versionadded:: NX11.0.0
    """
    FtireFile: str = ...
    """
    Returns or sets  the FTire file.  
    
    This is a file containing information describing the FTire tire.
    
    <hr>
    
    Getter Method
    
    Signature ``FtireFile`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``FtireFile`` 
    
    :param fileName: 
    :type fileName: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    IdRoad: NXOpen.Expression = ...
    """
    Returns  the IdRoad.  
    
    It is a Road type identification number.
    
    <hr>
    
    Getter Method
    
    Signature ``IdRoad`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Name: str = ...
    """
    Returns or sets  the name.  
    
    It is a uniqe name within tire properties.
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Radius: NXOpen.Expression = ...
    """
    Returns  the Radius.  
    
    It represents the undeformed radius of the tire. 
    
    <hr>
    
    Getter Method
    
    Signature ``Radius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    RunInParallel: bool = ...
    """
    Returns or sets  the "run in parallel" parameter.  
    
    This specifies if the FTire will automatically launch itself in parallel.
    
    <hr>
    
    Getter Method
    
    Signature ``RunInParallel`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``RunInParallel`` 
    
    :param runInParallel: 
    :type runInParallel: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    StaticHold: bool = ...
    """
    Returns or sets  the static hold.  
    
    It controls holding forces during static analysis.
    These holding forces are applied to prevent tire spin and gross chassis motion
    (X and Y translation and yaw with respect to the road "up" vector). 
    
    <hr>
    
    Getter Method
    
    Signature ``StaticHold`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``StaticHold`` 
    
    :param staticHold: 
    :type staticHold: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    StaticVerticalStiffness: NXOpen.Expression = ...
    """
    Returns  the static vertical stiffness.  
    
    It specifies the vertical stiffness only used in static equilibrating force calculations 
    
    <hr>
    
    Getter Method
    
    Signature ``StaticVerticalStiffness`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: TirePropertyFtBuilder = ...  # unknown typename


class MotionSession():
    """
    Represents motion session   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Session`
    
    .. versionadded:: NX5.0.0
    """
    
    def CloneSimulation(self, masterPart: NXOpen.NXObject, motionSimName: str) -> str:
        """
        Clones the Simulation.  
        
        Signature ``CloneSimulation(masterPart, motionSimName)`` 
        
        :param masterPart:  the master part  
        :type masterPart: :py:class:`NXOpen.NXObject` 
        :param motionSimName:  motion simulation part which ready to be cloned  
        :type motionSimName: str 
        :returns:  new motion simulation part name  
        :rtype: str 
        
        .. versionadded:: NX5.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def DeleteSimulation(self, masterPart: NXOpen.NXObject, motionSimName: str) -> None:
        """
        Deletes the Simulation.  
        
        Signature ``DeleteSimulation(masterPart, motionSimName)`` 
        
        :param masterPart:  the master_part  
        :type masterPart: :py:class:`NXOpen.NXObject` 
        :param motionSimName:  motion simulation part which ready to be deleted  
        :type motionSimName: str 
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX12.0.0
           Removed without replacement.
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def CreateSimulation(self, masterPart: NXOpen.NXObject) -> str:
        """
        Creates the Simulation.  
        
        Signature ``CreateSimulation(masterPart)`` 
        
        :param masterPart:  the master_part  
        :type masterPart: :py:class:`NXOpen.NXObject` 
        :returns:  created motion simulation part name  
        :rtype: str 
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX12.0.0
           Use :py:class:`NXOpen.FileNew` and :py:meth:`NXOpen.Motion.MotionSession.InitializeSimulation`
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def CreateNamingSimulation(self, masterPart: NXOpen.NXObject, inputSimName: str) -> str:
        """
        Creates the Non-master Simulation in NX Manager mode with an input name.  
        
        Signature ``CreateNamingSimulation(masterPart, inputSimName)`` 
        
        :param masterPart:  the master_part  
        :type masterPart: :py:class:`NXOpen.NXObject` 
        :param inputSimName:  the input simulation name 
        :type inputSimName: str 
        :returns:  the created motion simulation part name  
        :rtype: str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def DirectOpenSimulation(self, motionSimName: str) -> None:
        """
        Opens the Simulation directly.  
        
        Signature ``DirectOpenSimulation(motionSimName)`` 
        
        :param motionSimName:  motion simulation part name  
        :type motionSimName: str 
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX12.0.0
           Use :py:meth:`NXOpen.PartCollection.OpenDisplay` and :py:meth:`NXOpen.Motion.MotionSession.InitializeSimulation`
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def ReparentSimulation(self, motionSimFullName: str, destinationDirectory: str) -> None:
        """
        Reparents the Simulation.  
        
        Signature ``ReparentSimulation(motionSimFullName, destinationDirectory)`` 
        
        :param motionSimFullName:  motion simulation full name  
        :type motionSimFullName: str 
        :param destinationDirectory:  destination directory  
        :type destinationDirectory: str 
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX12.0.0
           Removed without replacement.
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def InitializeMechanisms(self) -> None:
        """
        Initializes the mech 
        
        Signature ``InitializeMechanisms()`` 
        
        .. versionadded:: NX6.0.0
        
        .. deprecated::  NX12.0.0
           Use :py:meth:`NXOpen.Motion.MotionSession.InitializeSimulation`
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def InitializeSimulation(self, simulationPart: NXOpen.Part) -> None:
        """
        Initializes the motion simulation context for the loaded motion part 
        
        Signature ``InitializeSimulation(simulationPart)`` 
        
        :param simulationPart:  the loaded motion simulation part  
        :type simulationPart: :py:class:`NXOpen.Part` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def ConstraintsToMotionObject(self, scenarioPart: NXOpen.NXObject, masterPart: NXOpen.NXObject) -> NXOpen.NXObject:
        """
        Converts mating conditions and constraints to links and joints  
        
        Signature ``ConstraintsToMotionObject(scenarioPart, masterPart)`` 
        
        :param scenarioPart:  the scenario part object  
        :type scenarioPart: :py:class:`NXOpen.NXObject` 
        :param masterPart:  the master part object  
        :type masterPart: :py:class:`NXOpen.NXObject` 
        :returns:  the link which will be fixed to ground  
        :rtype: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX6.0.1
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def FixLinkToGround(self, link: NXOpen.NXObject) -> NXOpen.NXObject:
        """
        Fixes the link to ground  
        
        Signature ``FixLinkToGround(link)`` 
        
        :param link:  the link object  
        :type link: :py:class:`NXOpen.NXObject` 
        :returns:  the joint object created  
        :rtype: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX6.0.1
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def GetScenarioNames(self, masterPart: NXOpen.NXObject) -> 'list[str]':
        """
        Gets all scenario names from motion subfolder of master part  
        
        Signature ``GetScenarioNames(masterPart)`` 
        
        :param masterPart:  the master part object  
        :type masterPart: :py:class:`NXOpen.NXObject` 
        :returns:  scenario names  
        :rtype: list of str 
        
        .. versionadded:: NX7.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def GetFullName(self, masterPart: NXOpen.NXObject, scenarioName: str) -> str:
        """
        Gets the full name for a scenario name, which is located in motion subfolder of master part  
        
        Signature ``GetFullName(masterPart, scenarioName)`` 
        
        :param masterPart:  the master part object  
        :type masterPart: :py:class:`NXOpen.NXObject` 
        :param scenarioName:  scenario name to check (with or without extension)  
        :type scenarioName: str 
        :returns:  full path to the file  
        :rtype: str 
        
        .. versionadded:: NX7.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def CreatePhysicsConversionBuilder(self, scenarioPart: NXOpen.NXObject) -> PhysicsConversionBuilder:
        """
        Creates a :py:class:`NXOpen.Motion.PhysicsConversionBuilder`  
        
        Signature ``CreatePhysicsConversionBuilder(scenarioPart)`` 
        
        :param scenarioPart: 
        :type scenarioPart: :py:class:`NXOpen.NXObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.Motion.PhysicsConversionBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def ExportProcessSimulateKinematics(self) -> None:
        """
        Exports kinematics for Process Simulate 
        
        Signature ``ExportProcessSimulateKinematics()`` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def GetAdoptionManager(self, scenarioPart: NXOpen.NXObject) -> AdoptionManager:
        """
        Gets adoption manager 
        
        Signature ``GetAdoptionManager(scenarioPart)`` 
        
        :param scenarioPart: 
        :type scenarioPart: :py:class:`NXOpen.NXObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.Motion.AdoptionManager` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def GetReferencingMotionObjects(self, scenarioPart: NXOpen.NXObject, originObject: NXOpen.NXObject) -> 'list[NXOpen.NXObject]':
        """
        Gets the referencing motion objects.  
        
        Signature ``GetReferencingMotionObjects(scenarioPart, originObject)`` 
        
        :param scenarioPart: 
        :type scenarioPart: :py:class:`NXOpen.NXObject` 
        :param originObject:   Non-function motion object. For function, please use :py:meth:`Motion.MotionSession.GetReferencingMotionObjects`.  
        :type originObject: :py:class:`NXOpen.NXObject` 
        :returns:  The referencing motion objects.  
        :rtype: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def GetReferencedMotionObjects(self, scenarioPart: NXOpen.NXObject, originObject: NXOpen.NXObject) -> 'list[NXOpen.NXObject]':
        """
        Gets the referenced motion objects.  
        
        Signature ``GetReferencedMotionObjects(scenarioPart, originObject)`` 
        
        :param scenarioPart: 
        :type scenarioPart: :py:class:`NXOpen.NXObject` 
        :param originObject:   Non-function motion object. For function, please use :py:meth:`Motion.MotionSession.GetReferencedMotionObjects`.  
        :type originObject: :py:class:`NXOpen.NXObject` 
        :returns:  The referenced motion objects  
        :rtype: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def GetReferencingFunctions(self, scenarioPart: NXOpen.NXObject, originObject: NXOpen.NXObject) -> 'list[MotionFunction]':
        """
        Gets the referencing functions 
        
        Signature ``GetReferencingFunctions(scenarioPart, originObject)`` 
        
        :param scenarioPart: 
        :type scenarioPart: :py:class:`NXOpen.NXObject` 
        :param originObject:   Non-function motion object.  
        :type originObject: :py:class:`NXOpen.NXObject` 
        :returns:  The referencing functions  
        :rtype: list of :py:class:`NXOpen.Motion.MotionFunction` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def GetReferencedFunctions(self, scenarioPart: NXOpen.NXObject, originObject: NXOpen.NXObject) -> 'list[MotionFunction]':
        """
        Gets the referenced functions 
        
        Signature ``GetReferencedFunctions(scenarioPart, originObject)`` 
        
        :param scenarioPart: 
        :type scenarioPart: :py:class:`NXOpen.NXObject` 
        :param originObject:   Non-function motion object.  
        :type originObject: :py:class:`NXOpen.NXObject` 
        :returns:  The referenced functions  
        :rtype: list of :py:class:`NXOpen.Motion.MotionFunction` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def GetFunctionReferencingMotionObjects(self, scenarioPart: NXOpen.NXObject, funcObject: MotionFunction) -> 'list[NXOpen.NXObject]':
        """
        Gets function referencing motion objects.  
        
        Signature ``GetFunctionReferencingMotionObjects(scenarioPart, funcObject)`` 
        
        :param scenarioPart: 
        :type scenarioPart: :py:class:`NXOpen.NXObject` 
        :param funcObject: 
        :type funcObject: :py:class:`NXOpen.Motion.MotionFunction` 
        :returns:  The referencing motion objects  
        :rtype: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def GetFunctionReferencedMotionObjects(self, scenarioPart: NXOpen.NXObject, funcObject: MotionFunction) -> 'list[NXOpen.NXObject]':
        """
        Gets function referenced motion objects.  
        
        Signature ``GetFunctionReferencedMotionObjects(scenarioPart, funcObject)`` 
        
        :param scenarioPart: 
        :type scenarioPart: :py:class:`NXOpen.NXObject` 
        :param funcObject: 
        :type funcObject: :py:class:`NXOpen.Motion.MotionFunction` 
        :returns:  The referenced motion objects  
        :rtype: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    Environments: MotionEnvironment = ...
    """
    Returns the :py:class:`NXOpen.Motion.MotionEnvironment` belonging to this part 
    
    Signature ``Environments`` 
    
    .. versionadded:: NX7.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.MotionEnvironment`
    """
    PostProcess: PostProcess = ...
    """
    Returns the :py:class:`NXOpen.Motion.PostProcess` belonging to this part 
    
    Signature ``PostProcess`` 
    
    .. versionadded:: NX7.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.PostProcess`
    """
    MotionMethods: MotionMethods = ...
    """
    Returns the :py:class:`NXOpen.Motion.MotionMethods`belonging to this part 
    
    Signature ``MotionMethods`` 
    
    .. versionadded:: NX8.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.MotionMethods`
    """
    MechanismImport: MechanismImport = ...
    """
    Returns the :py:class:`NXOpen.Motion.MechanismImport` object belonging to this part 
    
    Signature ``MechanismImport`` 
    
    .. versionadded:: NX12.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.MechanismImport`
    """
    MechanismExport: MechanismExport = ...
    """
    Returns the :py:class:`NXOpen.Motion.MechanismExport` object belonging to this part 
    
    Signature ``MechanismExport`` 
    
    .. versionadded:: NX12.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.MechanismExport`
    """


class TextBasedElementBuilderTypeChoicesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TextBasedElementBuilderTypeChoices():
    """
    the text based element type - multiple values
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "ThreePointForce", " - "
       "ThreePointTorque", " - "
       "AllKinematicDirectionSensor", " - "
       "AllForceDirectionSensor", " - "
       "AeroAeroForce", " - "
       "AeroHydroForce", " - "
       "AeroVehicleForce", " - "
       "CustomizedSolver", " - "
       "StiTire", " - "
       "StiTireProperty", " - "
       "BumpStopContact", " - "
       "SphereToGroundContact", " - "
       "GearContact", " - "
       "ThreeLinkSuspension", " - "
       "FourLinkSuspension", " - "
       "FiveLinkSuspension", " - "
       "RollIaxSuspension", " - "
       "SteerIaxSuspension", " - "
       "HotchKissSuspension", " - "
       "McPhersonSuspension", " - "
       "DoubleAArmSuspension", " - "
       "PivotBeamSuspension", " - "
       "Vehicle", " - "
       "SpeedSweep", " - "
       "SystemProperty", " - "
       "DynamicProperty", " - "
       "KinematicProperty", " - "
       "StaticProperty", " - "
       "PreloadProperty", " - "
       "InverseProperty", " - "
       "LinearizationProperty", " - "
       "RestartProperty", " - "
       "AdvancedSolution", " - "
       "Gear", " - "
       "Generic", " - "
       "Fmi", " - "
       "PointToPointConstraint", " - "
       "OrientationConstraint", " - "
       "FunctioncurveControlInput", " - "
       "PathFollowerControlInput", " - "
       "UserDefinedControlInput", " - "
       "SpecialControlInput", " - "
       "LinearControlOutput", " - "
       "MassPropertyControlOutput", " - "
       "LinkInitialCondition", " - "
       "ScrewJointOrSpringInitialCondition", " - "
       "FlexibleLinkInitialCondition", " - "
       "TireInitialCondition", " - "
       "StaticVehicleAlignment", " - "
       "SprungMass", " - "
       "UserDefinedForce", " - "
       "GlobalDirectionsLinkDriver", " - "
       "DotOneLinkDriver", " - "
       "DotTwoLinkDriver", " - "
       "CurveOnCurveConstraintDriver", " - "
       "FixedJointDriver", " - "
       "LinkCouplerDriver", " - "
    """
    ThreePointForce = 0  # TextBasedElementBuilderTypeChoicesMemberType
    ThreePointTorque = 1  # TextBasedElementBuilderTypeChoicesMemberType
    AllKinematicDirectionSensor = 2  # TextBasedElementBuilderTypeChoicesMemberType
    AllForceDirectionSensor = 3  # TextBasedElementBuilderTypeChoicesMemberType
    AeroAeroForce = 4  # TextBasedElementBuilderTypeChoicesMemberType
    AeroHydroForce = 5  # TextBasedElementBuilderTypeChoicesMemberType
    AeroVehicleForce = 6  # TextBasedElementBuilderTypeChoicesMemberType
    CustomizedSolver = 7  # TextBasedElementBuilderTypeChoicesMemberType
    StiTire = 8  # TextBasedElementBuilderTypeChoicesMemberType
    StiTireProperty = 9  # TextBasedElementBuilderTypeChoicesMemberType
    BumpStopContact = 10  # TextBasedElementBuilderTypeChoicesMemberType
    SphereToGroundContact = 11  # TextBasedElementBuilderTypeChoicesMemberType
    GearContact = 12  # TextBasedElementBuilderTypeChoicesMemberType
    ThreeLinkSuspension = 13  # TextBasedElementBuilderTypeChoicesMemberType
    FourLinkSuspension = 14  # TextBasedElementBuilderTypeChoicesMemberType
    FiveLinkSuspension = 15  # TextBasedElementBuilderTypeChoicesMemberType
    RollIaxSuspension = 16  # TextBasedElementBuilderTypeChoicesMemberType
    SteerIaxSuspension = 17  # TextBasedElementBuilderTypeChoicesMemberType
    HotchKissSuspension = 18  # TextBasedElementBuilderTypeChoicesMemberType
    McPhersonSuspension = 19  # TextBasedElementBuilderTypeChoicesMemberType
    DoubleAArmSuspension = 20  # TextBasedElementBuilderTypeChoicesMemberType
    PivotBeamSuspension = 21  # TextBasedElementBuilderTypeChoicesMemberType
    Vehicle = 22  # TextBasedElementBuilderTypeChoicesMemberType
    SpeedSweep = 23  # TextBasedElementBuilderTypeChoicesMemberType
    SystemProperty = 24  # TextBasedElementBuilderTypeChoicesMemberType
    DynamicProperty = 25  # TextBasedElementBuilderTypeChoicesMemberType
    KinematicProperty = 26  # TextBasedElementBuilderTypeChoicesMemberType
    StaticProperty = 27  # TextBasedElementBuilderTypeChoicesMemberType
    PreloadProperty = 28  # TextBasedElementBuilderTypeChoicesMemberType
    InverseProperty = 29  # TextBasedElementBuilderTypeChoicesMemberType
    LinearizationProperty = 30  # TextBasedElementBuilderTypeChoicesMemberType
    RestartProperty = 31  # TextBasedElementBuilderTypeChoicesMemberType
    AdvancedSolution = 32  # TextBasedElementBuilderTypeChoicesMemberType
    Gear = 33  # TextBasedElementBuilderTypeChoicesMemberType
    Generic = 34  # TextBasedElementBuilderTypeChoicesMemberType
    Fmi = 35  # TextBasedElementBuilderTypeChoicesMemberType
    PointToPointConstraint = 36  # TextBasedElementBuilderTypeChoicesMemberType
    OrientationConstraint = 37  # TextBasedElementBuilderTypeChoicesMemberType
    FunctioncurveControlInput = 38  # TextBasedElementBuilderTypeChoicesMemberType
    PathFollowerControlInput = 39  # TextBasedElementBuilderTypeChoicesMemberType
    UserDefinedControlInput = 40  # TextBasedElementBuilderTypeChoicesMemberType
    SpecialControlInput = 41  # TextBasedElementBuilderTypeChoicesMemberType
    LinearControlOutput = 42  # TextBasedElementBuilderTypeChoicesMemberType
    MassPropertyControlOutput = 43  # TextBasedElementBuilderTypeChoicesMemberType
    LinkInitialCondition = 44  # TextBasedElementBuilderTypeChoicesMemberType
    ScrewJointOrSpringInitialCondition = 45  # TextBasedElementBuilderTypeChoicesMemberType
    FlexibleLinkInitialCondition = 46  # TextBasedElementBuilderTypeChoicesMemberType
    TireInitialCondition = 47  # TextBasedElementBuilderTypeChoicesMemberType
    StaticVehicleAlignment = 48  # TextBasedElementBuilderTypeChoicesMemberType
    SprungMass = 49  # TextBasedElementBuilderTypeChoicesMemberType
    UserDefinedForce = 50  # TextBasedElementBuilderTypeChoicesMemberType
    GlobalDirectionsLinkDriver = 51  # TextBasedElementBuilderTypeChoicesMemberType
    DotOneLinkDriver = 52  # TextBasedElementBuilderTypeChoicesMemberType
    DotTwoLinkDriver = 53  # TextBasedElementBuilderTypeChoicesMemberType
    CurveOnCurveConstraintDriver = 54  # TextBasedElementBuilderTypeChoicesMemberType
    FixedJointDriver = 55  # TextBasedElementBuilderTypeChoicesMemberType
    LinkCouplerDriver = 56  # TextBasedElementBuilderTypeChoicesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TextBasedElementBuilder(MotionBuilder):
    """
    Represents a :py:class:`NXOpen.Motion.TextBasedElementBuilder` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.TextBasedElementCollection.CreateTextBasedElementBuilder`
    
    .. versionadded:: NX12.0.0
    """
    
    class TypeChoices():
        """
        the text based element type - multiple values
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "ThreePointForce", " - "
           "ThreePointTorque", " - "
           "AllKinematicDirectionSensor", " - "
           "AllForceDirectionSensor", " - "
           "AeroAeroForce", " - "
           "AeroHydroForce", " - "
           "AeroVehicleForce", " - "
           "CustomizedSolver", " - "
           "StiTire", " - "
           "StiTireProperty", " - "
           "BumpStopContact", " - "
           "SphereToGroundContact", " - "
           "GearContact", " - "
           "ThreeLinkSuspension", " - "
           "FourLinkSuspension", " - "
           "FiveLinkSuspension", " - "
           "RollIaxSuspension", " - "
           "SteerIaxSuspension", " - "
           "HotchKissSuspension", " - "
           "McPhersonSuspension", " - "
           "DoubleAArmSuspension", " - "
           "PivotBeamSuspension", " - "
           "Vehicle", " - "
           "SpeedSweep", " - "
           "SystemProperty", " - "
           "DynamicProperty", " - "
           "KinematicProperty", " - "
           "StaticProperty", " - "
           "PreloadProperty", " - "
           "InverseProperty", " - "
           "LinearizationProperty", " - "
           "RestartProperty", " - "
           "AdvancedSolution", " - "
           "Gear", " - "
           "Generic", " - "
           "Fmi", " - "
           "PointToPointConstraint", " - "
           "OrientationConstraint", " - "
           "FunctioncurveControlInput", " - "
           "PathFollowerControlInput", " - "
           "UserDefinedControlInput", " - "
           "SpecialControlInput", " - "
           "LinearControlOutput", " - "
           "MassPropertyControlOutput", " - "
           "LinkInitialCondition", " - "
           "ScrewJointOrSpringInitialCondition", " - "
           "FlexibleLinkInitialCondition", " - "
           "TireInitialCondition", " - "
           "StaticVehicleAlignment", " - "
           "SprungMass", " - "
           "UserDefinedForce", " - "
           "GlobalDirectionsLinkDriver", " - "
           "DotOneLinkDriver", " - "
           "DotTwoLinkDriver", " - "
           "CurveOnCurveConstraintDriver", " - "
           "FixedJointDriver", " - "
           "LinkCouplerDriver", " - "
        """
        ThreePointForce = 0  # TextBasedElementBuilderTypeChoicesMemberType
        ThreePointTorque = 1  # TextBasedElementBuilderTypeChoicesMemberType
        AllKinematicDirectionSensor = 2  # TextBasedElementBuilderTypeChoicesMemberType
        AllForceDirectionSensor = 3  # TextBasedElementBuilderTypeChoicesMemberType
        AeroAeroForce = 4  # TextBasedElementBuilderTypeChoicesMemberType
        AeroHydroForce = 5  # TextBasedElementBuilderTypeChoicesMemberType
        AeroVehicleForce = 6  # TextBasedElementBuilderTypeChoicesMemberType
        CustomizedSolver = 7  # TextBasedElementBuilderTypeChoicesMemberType
        StiTire = 8  # TextBasedElementBuilderTypeChoicesMemberType
        StiTireProperty = 9  # TextBasedElementBuilderTypeChoicesMemberType
        BumpStopContact = 10  # TextBasedElementBuilderTypeChoicesMemberType
        SphereToGroundContact = 11  # TextBasedElementBuilderTypeChoicesMemberType
        GearContact = 12  # TextBasedElementBuilderTypeChoicesMemberType
        ThreeLinkSuspension = 13  # TextBasedElementBuilderTypeChoicesMemberType
        FourLinkSuspension = 14  # TextBasedElementBuilderTypeChoicesMemberType
        FiveLinkSuspension = 15  # TextBasedElementBuilderTypeChoicesMemberType
        RollIaxSuspension = 16  # TextBasedElementBuilderTypeChoicesMemberType
        SteerIaxSuspension = 17  # TextBasedElementBuilderTypeChoicesMemberType
        HotchKissSuspension = 18  # TextBasedElementBuilderTypeChoicesMemberType
        McPhersonSuspension = 19  # TextBasedElementBuilderTypeChoicesMemberType
        DoubleAArmSuspension = 20  # TextBasedElementBuilderTypeChoicesMemberType
        PivotBeamSuspension = 21  # TextBasedElementBuilderTypeChoicesMemberType
        Vehicle = 22  # TextBasedElementBuilderTypeChoicesMemberType
        SpeedSweep = 23  # TextBasedElementBuilderTypeChoicesMemberType
        SystemProperty = 24  # TextBasedElementBuilderTypeChoicesMemberType
        DynamicProperty = 25  # TextBasedElementBuilderTypeChoicesMemberType
        KinematicProperty = 26  # TextBasedElementBuilderTypeChoicesMemberType
        StaticProperty = 27  # TextBasedElementBuilderTypeChoicesMemberType
        PreloadProperty = 28  # TextBasedElementBuilderTypeChoicesMemberType
        InverseProperty = 29  # TextBasedElementBuilderTypeChoicesMemberType
        LinearizationProperty = 30  # TextBasedElementBuilderTypeChoicesMemberType
        RestartProperty = 31  # TextBasedElementBuilderTypeChoicesMemberType
        AdvancedSolution = 32  # TextBasedElementBuilderTypeChoicesMemberType
        Gear = 33  # TextBasedElementBuilderTypeChoicesMemberType
        Generic = 34  # TextBasedElementBuilderTypeChoicesMemberType
        Fmi = 35  # TextBasedElementBuilderTypeChoicesMemberType
        PointToPointConstraint = 36  # TextBasedElementBuilderTypeChoicesMemberType
        OrientationConstraint = 37  # TextBasedElementBuilderTypeChoicesMemberType
        FunctioncurveControlInput = 38  # TextBasedElementBuilderTypeChoicesMemberType
        PathFollowerControlInput = 39  # TextBasedElementBuilderTypeChoicesMemberType
        UserDefinedControlInput = 40  # TextBasedElementBuilderTypeChoicesMemberType
        SpecialControlInput = 41  # TextBasedElementBuilderTypeChoicesMemberType
        LinearControlOutput = 42  # TextBasedElementBuilderTypeChoicesMemberType
        MassPropertyControlOutput = 43  # TextBasedElementBuilderTypeChoicesMemberType
        LinkInitialCondition = 44  # TextBasedElementBuilderTypeChoicesMemberType
        ScrewJointOrSpringInitialCondition = 45  # TextBasedElementBuilderTypeChoicesMemberType
        FlexibleLinkInitialCondition = 46  # TextBasedElementBuilderTypeChoicesMemberType
        TireInitialCondition = 47  # TextBasedElementBuilderTypeChoicesMemberType
        StaticVehicleAlignment = 48  # TextBasedElementBuilderTypeChoicesMemberType
        SprungMass = 49  # TextBasedElementBuilderTypeChoicesMemberType
        UserDefinedForce = 50  # TextBasedElementBuilderTypeChoicesMemberType
        GlobalDirectionsLinkDriver = 51  # TextBasedElementBuilderTypeChoicesMemberType
        DotOneLinkDriver = 52  # TextBasedElementBuilderTypeChoicesMemberType
        DotTwoLinkDriver = 53  # TextBasedElementBuilderTypeChoicesMemberType
        CurveOnCurveConstraintDriver = 54  # TextBasedElementBuilderTypeChoicesMemberType
        FixedJointDriver = 55  # TextBasedElementBuilderTypeChoicesMemberType
        LinkCouplerDriver = 56  # TextBasedElementBuilderTypeChoicesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    Definition: str = ...
    """
    Returns or sets  the definition of text based element - MDF definition 
    
    <hr>
    
    Getter Method
    
    Signature ``Definition`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Definition`` 
    
    :param definition: 
    :type definition: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Type: TextBasedElementBuilderTypeChoices = ...
    """
    Returns or sets  the text based element type - multiple possible values
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.TextBasedElementBuilderTypeChoices` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param elementType: 
    :type elementType: :py:class:`NXOpen.Motion.TextBasedElementBuilderTypeChoices` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: TextBasedElementBuilder = ...  # unknown typename


class Link(MotionObject, IGraphSource):
    """
    Represents the Motion Link class.  
    
    A Link is used to define
    each component or body involved in a mechanism model. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Motion.LinkBuilder`
    
    .. versionadded:: NX4.0.0
    """
    Null: Link = ...  # unknown typename


class LinkAttachmentData(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`Motion.LinkAttachmentData`.  
    
    Should be used by entities that hold a Link, Origin, 
    and/or either one of Vector and CoordinateSystem.
    Setting the CSYS will make the Vector null.
    Setting the Vector will make the CSYS null 
    
    .. versionadded:: NX11.0.0
    """
    
    def GetOrientation(self) -> NXOpen.Matrix3x3:
        """
        The orientation matrix  
        
        Signature ``GetOrientation()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Matrix3x3` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Csys: NXOpen.CoordinateSystem = ...
    """
    Returns or sets  the csys - if the selected type is CSYS, use this method to access it.  
    
    Note: use either one of Vector and CSYS, not both
    
    <hr>
    
    Getter Method
    
    Signature ``Csys`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Csys`` 
    
    :param csys: 
    :type csys: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    Link: SelectLink = ...
    """
    Returns  the link 
    
    <hr>
    
    Getter Method
    
    Signature ``Link`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectLink` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    Origin: NXOpen.Point = ...
    """
    Returns or sets  the origin 
    
    <hr>
    
    Getter Method
    
    Signature ``Origin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Origin`` 
    
    :param origin: 
    :type origin: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    Vector: NXOpen.Direction = ...
    """
    Returns or sets  the vector - if the selected type is Vector, use this method to access it.  
    
    Note: use either one of Vector and CSYS, not both
    
    <hr>
    
    Getter Method
    
    Signature ``Vector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Vector`` 
    
    :param vector: 
    :type vector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    Null: LinkAttachmentData = ...  # unknown typename


class JointFriction(NXOpen.TaggedObject):
    """
    Represents a joint friction object   
    
    .. versionadded:: NX5.0.0
    """
    AdamsFriction: JointFrictionAdams = ...
    """
    Returns  the joint adams friction 
    
    <hr>
    
    Getter Method
    
    Signature ``AdamsFriction`` 
    
    :returns:  The adams friction  
    :rtype: :py:class:`NXOpen.Motion.JointFrictionAdams` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Enable: bool = ...
    """
    Returns or sets  the option of included 
    
    <hr>
    
    Getter Method
    
    Signature ``Enable`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Enable`` 
    
    :param enable: 
    :type enable: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    LmsFriction: JointFrictionLms = ...
    """
    Returns  the joint lms friction 
    
    <hr>
    
    Getter Method
    
    Signature ``LmsFriction`` 
    
    :returns:  The lms friction  
    :rtype: :py:class:`NXOpen.Motion.JointFrictionLms` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    RecurDynFriction: JointFrictionRecurDyn = ...
    """
    Returns  the joint recurdyn friction 
    
    <hr>
    
    Getter Method
    
    Signature ``RecurDynFriction`` 
    
    :returns:  The recurdyn friction  
    :rtype: :py:class:`NXOpen.Motion.JointFrictionRecurDyn` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: JointFriction = ...  # unknown typename


class LinkCouplerCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of LinkCoupler objects   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Motion.MotionManager`
    
    .. versionadded:: NX12.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateLinkCouplerBuilder(self, linkCoupler: LinkCoupler) -> LinkCouplerBuilder:
        """
        Creates a :py:class:`NXOpen.Motion.LinkCouplerBuilder`  
        
        Signature ``CreateLinkCouplerBuilder(linkCoupler)`` 
        
        :param linkCoupler: 
        :type linkCoupler: :py:class:`NXOpen.Motion.LinkCoupler` 
        :returns: 
        :rtype: :py:class:`NXOpen.Motion.LinkCouplerBuilder` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def FindObject(self, name: str) -> LinkCoupler:
        """
        Finds the :py:class:`NXOpen.Motion.LinkCoupler` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Motion.LinkCoupler`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Motion.LinkCoupler` with this name.  
        :rtype: :py:class:`NXOpen.Motion.LinkCoupler` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    


class SegmentBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[SegmentBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.Motion.SegmentBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: SegmentBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.Motion.SegmentBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: SegmentBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.Motion.SegmentBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> SegmentBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.Motion.SegmentBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: SegmentBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Motion.SegmentBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: SegmentBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Motion.SegmentBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[SegmentBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.Motion.SegmentBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[SegmentBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.Motion.SegmentBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: SegmentBuilder, object2: SegmentBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.Motion.SegmentBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.Motion.SegmentBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: SegmentBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.Motion.SegmentBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SegmentBuilderList = ...  # unknown typename


class VobjectCsysTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class VobjectCsysType():
    """
    Represents the CSYS type 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Userdefined", "User defined csys type"
       "Absolute", "Absolute csys type"
    """
    Userdefined = 0  # VobjectCsysTypeMemberType
    Absolute = 1  # VobjectCsysTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MechatronicsPortCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of ports used as outputs by Mechatronics   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Motion.Mechatronics`
    
    .. versionadded:: NX11.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def FindObject(self, name: str) -> ControlPort:
        """
        Finds the :py:class:`NXOpen.Motion.ControlPort` variable with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name: 
        :type name: str 
        :returns: 
        :rtype: :py:class:`NXOpen.Motion.ControlPort` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    


class PackagingMeasure(Packaging, IGraphSource):
    """
    This class represents a Packaging Measure object.  
    
    A Measure object
    is used to define a request to measure minimum distances or angles
    between sets of moving objects in a mechanism. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Motion.PackagingMeasureBuilder`
    
    .. versionadded:: NX4.0.0
    """
    Null: PackagingMeasure = ...  # unknown typename


class PlantOutputBuilderPoutypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PlantOutputBuilderPoutype():
    """
    the type enum
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Func", "funtion type"
       "Sensor", "sensor type"
    """
    Func = 0  # PlantOutputBuilderPoutypeMemberType
    Sensor = 1  # PlantOutputBuilderPoutypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PlantOutputBuilder(MotionBuilder):
    """
    Represents a :py:class:`NXOpen.Motion.PlantOutput` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.PlantOutputCollection.CreatePlantOutputBuilder`
    
    .. versionadded:: NX6.0.0
    """
    
    class Poutype():
        """
        the type enum
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Func", "funtion type"
           "Sensor", "sensor type"
        """
        Func = 0  # PlantOutputBuilderPoutypeMemberType
        Sensor = 1  # PlantOutputBuilderPoutypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    Function: NXOpen.CAE.Function = ...
    """
    Returns or sets  the function
    
    <hr>
    
    Getter Method
    
    Signature ``Function`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CAE.Function` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_motion_cosim ("NX Motion CoSimulation")
    
    <hr>
    
    Setter Method
    
    Signature ``Function`` 
    
    :param function: 
    :type function: :py:class:`NXOpen.CAE.Function` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_motion_cosim ("NX Motion CoSimulation")
    """
    Name: str = ...
    """
    Returns or sets  the name 
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_motion_cosim ("NX Motion CoSimulation")
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_motion_cosim ("NX Motion CoSimulation")
    """
    Sensor: NXOpen.NXObject = ...
    """
    Returns or sets  the sensor 
    
    <hr>
    
    Getter Method
    
    Signature ``Sensor`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_motion_cosim ("NX Motion CoSimulation")
    
    <hr>
    
    Setter Method
    
    Signature ``Sensor`` 
    
    :param sensor: 
    :type sensor: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_motion_cosim ("NX Motion CoSimulation")
    """
    Type: PlantOutputBuilderPoutype = ...
    """
    Returns or sets  the type 
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.PlantOutputBuilderPoutype` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_motion_cosim ("NX Motion CoSimulation")
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Motion.PlantOutputBuilderPoutype` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_motion_cosim ("NX Motion CoSimulation")
    """
    Null: PlantOutputBuilder = ...  # unknown typename


class PlantOutput(NXOpen.NXObject, IGraphSource):
    """
    Represents a Plant Output motion object   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Motion.PlantOutputBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: PlantOutput = ...  # unknown typename


class PostToolsControl(NXOpen.NXObject, IPostControl):
    """
    Represent abstract class Motion.  
    
    PostToolsControl
    An instance of this class can not be obtained
    
    .. versionadded:: NX11.0.0
    """
    
    def Finish(self) -> None:
        """
        Finish post tools control 
        
        Signature ``Finish()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def CalculateMeasure(self, measure: PackagingMeasure) -> None:
        """
        Calculate measure result 
        
        Signature ``CalculateMeasure(measure)`` 
        
        :param measure: 
        :type measure: :py:class:`NXOpen.Motion.PackagingMeasure` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def CalculateMeasures(self, measures: 'list[PackagingMeasure]') -> None:
        """
        Calculate measures result 
        
        Signature ``CalculateMeasures(measures)`` 
        
        :param measures:   The  measures  
        :type measures: list of :py:class:`NXOpen.Motion.PackagingMeasure` 
        
        .. versionadded:: NX11.0.1
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    Null: PostToolsControl = ...  # unknown typename


class AnalyticalContactBuilderContactTypeOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AnalyticalContactBuilderContactTypeOption():
    """
    Contact type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "SphereToSphere", " - "
       "SphereToExtrusion", " - "
       "SphereToRevolution", " - "
       "ExtrusionToRevolution", " - "
       "RevolutionToRevolution", " - "
       "SphereToRail", " - "
    """
    SphereToSphere = 0  # AnalyticalContactBuilderContactTypeOptionMemberType
    SphereToExtrusion = 1  # AnalyticalContactBuilderContactTypeOptionMemberType
    SphereToRevolution = 2  # AnalyticalContactBuilderContactTypeOptionMemberType
    ExtrusionToRevolution = 3  # AnalyticalContactBuilderContactTypeOptionMemberType
    RevolutionToRevolution = 4  # AnalyticalContactBuilderContactTypeOptionMemberType
    SphereToRail = 5  # AnalyticalContactBuilderContactTypeOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AnalyticalContactBuilderProfileTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AnalyticalContactBuilderProfileType():
    """
    Profile Type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", " - "
       "Circular", " - "
       "Road", " - "
    """
    NotSet = 0  # AnalyticalContactBuilderProfileTypeMemberType
    Circular = 1  # AnalyticalContactBuilderProfileTypeMemberType
    Road = 2  # AnalyticalContactBuilderProfileTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AnalyticalContactBuilder(MotionBuilder):
    """
    Represents a :py:class:`Motion.AnalyticalContact` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.AnalyticalContactCollection.CreateAnalyticalContactBuilder`
    
    Default values.
    
    =============================  ===============================================
    Property                       Value
    =============================  ===============================================
    ContactType                    SphereToSphere 
    -----------------------------  -----------------------------------------------
    EffectiveContactDepth.Value    1000 (millimeters part), 39.3701 (inches part) 
    -----------------------------  -----------------------------------------------
    ExtrusionGeometryData          0 
    -----------------------------  -----------------------------------------------
    ExtrusionMaterialSide          1 
    -----------------------------  -----------------------------------------------
    FindAllRoots                   0 
    -----------------------------  -----------------------------------------------
    FirstSuperElementIncrement     1 
    -----------------------------  -----------------------------------------------
    InfiniteExtrusion              0 
    -----------------------------  -----------------------------------------------
    InfiniteSweep                  0 
    -----------------------------  -----------------------------------------------
    MaxTesselationLength.Value     5 (millimeters part), 0.19685 (inches part) 
    -----------------------------  -----------------------------------------------
    Profile                        None 
    -----------------------------  -----------------------------------------------
    RadiusOfExclusion.Value        0 (millimeters part), 0 (inches part) 
    -----------------------------  -----------------------------------------------
    RailGeometryData               0 
    -----------------------------  -----------------------------------------------
    RailMaterialSide               1 
    -----------------------------  -----------------------------------------------
    RevolutionGeometryData         0 
    -----------------------------  -----------------------------------------------
    RevolutionMaterialSide         1 
    -----------------------------  -----------------------------------------------
    SecondRevolutionGeometryData   0 
    -----------------------------  -----------------------------------------------
    SecondRevolutionMaterialSide   1 
    -----------------------------  -----------------------------------------------
    SecondSphereRadius.Value       1000 (millimeters part), 39.3701 (inches part) 
    -----------------------------  -----------------------------------------------
    SecondSuperElementIncrement    1 
    -----------------------------  -----------------------------------------------
    SphereRadius.Value             1000 (millimeters part), 39.3701 (inches part) 
    -----------------------------  -----------------------------------------------
    SuperElementReportInstance     1 
    =============================  ===============================================
    
    .. versionadded:: NX12.0.0
    """
    
    class ContactTypeOption():
        """
        Contact type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "SphereToSphere", " - "
           "SphereToExtrusion", " - "
           "SphereToRevolution", " - "
           "ExtrusionToRevolution", " - "
           "RevolutionToRevolution", " - "
           "SphereToRail", " - "
        """
        SphereToSphere = 0  # AnalyticalContactBuilderContactTypeOptionMemberType
        SphereToExtrusion = 1  # AnalyticalContactBuilderContactTypeOptionMemberType
        SphereToRevolution = 2  # AnalyticalContactBuilderContactTypeOptionMemberType
        ExtrusionToRevolution = 3  # AnalyticalContactBuilderContactTypeOptionMemberType
        RevolutionToRevolution = 4  # AnalyticalContactBuilderContactTypeOptionMemberType
        SphereToRail = 5  # AnalyticalContactBuilderContactTypeOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ProfileType():
        """
        Profile Type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", " - "
           "Circular", " - "
           "Road", " - "
        """
        NotSet = 0  # AnalyticalContactBuilderProfileTypeMemberType
        Circular = 1  # AnalyticalContactBuilderProfileTypeMemberType
        Road = 2  # AnalyticalContactBuilderProfileTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    ContactProperty: SelectAnalyticalContactProperty = ...
    """
    Returns  the contact property 
    
    <hr>
    
    Getter Method
    
    Signature ``ContactProperty`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectAnalyticalContactProperty` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ContactType: AnalyticalContactBuilderContactTypeOption = ...
    """
    Returns or sets  the type 
    
    <hr>
    
    Getter Method
    
    Signature ``ContactType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.AnalyticalContactBuilderContactTypeOption` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``ContactType`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Motion.AnalyticalContactBuilderContactTypeOption` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    EffectiveContactDepth: NXOpen.Expression = ...
    """
    Returns  the max penetration depth 
    
    <hr>
    
    Getter Method
    
    Signature ``EffectiveContactDepth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ExtrusionBodies: NXOpen.SelectNXObjectList = ...
    """
    Returns  the extrusion bodies 
    
    <hr>
    
    Getter Method
    
    Signature ``ExtrusionBodies`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ExtrusionGeometryData: bool = ...
    """
    Returns or sets  the extrusion line-arc file option
    
    <hr>
    
    Getter Method
    
    Signature ``ExtrusionGeometryData`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``ExtrusionGeometryData`` 
    
    :param geometryDataOption: 
    :type geometryDataOption: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ExtrusionGeometryDataFile: str = ...
    """
    Returns or sets  the extrusion line-arc file.  
    
    This is a file containing information describing the extrusion profile.
    
    <hr>
    
    Getter Method
    
    Signature ``ExtrusionGeometryDataFile`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``ExtrusionGeometryDataFile`` 
    
    :param fileName: 
    :type fileName: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ExtrusionLink: SelectLink = ...
    """
    Returns  the extrusion link 
    
    <hr>
    
    Getter Method
    
    Signature ``ExtrusionLink`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectLink` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ExtrusionMaterialSide: bool = ...
    """
    Returns or sets  the material side toggle for extrusion 
    
    <hr>
    
    Getter Method
    
    Signature ``ExtrusionMaterialSide`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``ExtrusionMaterialSide`` 
    
    :param matSide: 
    :type matSide: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    FindAllRoots: bool = ...
    """
    Returns or sets  the find all roots 
    
    <hr>
    
    Getter Method
    
    Signature ``FindAllRoots`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``FindAllRoots`` 
    
    :param findAllRoots: 
    :type findAllRoots: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    FirstSuperElementIncrement: int = ...
    """
    Returns or sets  the first super element increment 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstSuperElementIncrement`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``FirstSuperElementIncrement`` 
    
    :param firstSuperElementIncrement: 
    :type firstSuperElementIncrement: int 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    FirstSuperElementLink: SelectLink = ...
    """
    Returns  the first super element link 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstSuperElementLink`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectLink` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    InfiniteExtrusion: bool = ...
    """
    Returns or sets  the infinite extrusion 
    
    <hr>
    
    Getter Method
    
    Signature ``InfiniteExtrusion`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``InfiniteExtrusion`` 
    
    :param infiniteExtrusion: 
    :type infiniteExtrusion: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    InfiniteSweep: bool = ...
    """
    Returns or sets  the infinite sweep for rail 
    
    <hr>
    
    Getter Method
    
    Signature ``InfiniteSweep`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``InfiniteSweep`` 
    
    :param infiniteSweep: 
    :type infiniteSweep: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    MaxTesselationLength: NXOpen.Expression = ...
    """
    Returns  the max tesselation length 
    
    <hr>
    
    Getter Method
    
    Signature ``MaxTesselationLength`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Name: str = ...
    """
    Returns or sets  the string name 
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    PartialSphereAngle: NXOpen.Expression = ...
    """
    Returns  the partial sphere angle
    
    <hr>
    
    Getter Method
    
    Signature ``PartialSphereAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    PartialSphereOption: bool = ...
    """
    Returns or sets  the partial sphere option
    
    <hr>
    
    Getter Method
    
    Signature ``PartialSphereOption`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``PartialSphereOption`` 
    
    :param partialSphereOption: 
    :type partialSphereOption: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    PartialSphereVector: NXOpen.Direction = ...
    """
    Returns or sets  the partial sphere vector
    
    <hr>
    
    Getter Method
    
    Signature ``PartialSphereVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``PartialSphereVector`` 
    
    :param partialSphereVector: 
    :type partialSphereVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Profile: AnalyticalContactBuilderProfileType = ...
    """
    Returns or sets  the profile 
    
    <hr>
    
    Getter Method
    
    Signature ``Profile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.AnalyticalContactBuilderProfileType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Profile`` 
    
    :param profileType: 
    :type profileType: :py:class:`NXOpen.Motion.AnalyticalContactBuilderProfileType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    RadiusOfExclusion: NXOpen.Expression = ...
    """
    Returns  the radius of exclusion 
    
    <hr>
    
    Getter Method
    
    Signature ``RadiusOfExclusion`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    RailBodies: NXOpen.SelectNXObjectList = ...
    """
    Returns  the rail bodies 
    
    <hr>
    
    Getter Method
    
    Signature ``RailBodies`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    RailCurve: NXOpen.Section = ...
    """
    Returns  the rail curve 
    
    <hr>
    
    Getter Method
    
    Signature ``RailCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    RailGeometryData: bool = ...
    """
    Returns or sets  the rail line-arc file option
    
    <hr>
    
    Getter Method
    
    Signature ``RailGeometryData`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``RailGeometryData`` 
    
    :param geometryDataOption: 
    :type geometryDataOption: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    RailGeometryDataFile: str = ...
    """
    Returns or sets  the rail line-arc file.  
    
    This is a file containing information describing the rail profile.
    
    <hr>
    
    Getter Method
    
    Signature ``RailGeometryDataFile`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``RailGeometryDataFile`` 
    
    :param fileName: 
    :type fileName: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    RailLink: SelectLink = ...
    """
    Returns  the rail link 
    
    <hr>
    
    Getter Method
    
    Signature ``RailLink`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectLink` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    RailMaterialSide: bool = ...
    """
    Returns or sets  the material side toggle for rail 
    
    <hr>
    
    Getter Method
    
    Signature ``RailMaterialSide`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``RailMaterialSide`` 
    
    :param matSide: 
    :type matSide: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    RailRollAngleCurve: MotionFunction = ...
    """
    Returns or sets  the RailRollAngle function 
    
    <hr>
    
    Getter Method
    
    Signature ``RailRollAngleCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.MotionFunction` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``RailRollAngleCurve`` 
    
    :param railCurve: 
    :type railCurve: :py:class:`NXOpen.Motion.MotionFunction` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    RailSplineFunctions: bool = ...
    """
    Returns or sets  the spline function toggle for rail 
    
    <hr>
    
    Getter Method
    
    Signature ``RailSplineFunctions`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``RailSplineFunctions`` 
    
    :param functionsToggle: 
    :type functionsToggle: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    RailXCurve: MotionFunction = ...
    """
    Returns or sets  the RailX function 
    
    <hr>
    
    Getter Method
    
    Signature ``RailXCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.MotionFunction` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``RailXCurve`` 
    
    :param railCurve: 
    :type railCurve: :py:class:`NXOpen.Motion.MotionFunction` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    RailYCurve: MotionFunction = ...
    """
    Returns or sets  the RailY function 
    
    <hr>
    
    Getter Method
    
    Signature ``RailYCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.MotionFunction` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``RailYCurve`` 
    
    :param railCurve: 
    :type railCurve: :py:class:`NXOpen.Motion.MotionFunction` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    RailZCurve: MotionFunction = ...
    """
    Returns or sets  the RailZ function 
    
    <hr>
    
    Getter Method
    
    Signature ``RailZCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.MotionFunction` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``RailZCurve`` 
    
    :param railCurve: 
    :type railCurve: :py:class:`NXOpen.Motion.MotionFunction` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    RevolutionBodies: NXOpen.SelectNXObjectList = ...
    """
    Returns  the revolution bodies 
    
    <hr>
    
    Getter Method
    
    Signature ``RevolutionBodies`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    RevolutionGeometryData: bool = ...
    """
    Returns or sets  the revolution line-arc file option
    
    <hr>
    
    Getter Method
    
    Signature ``RevolutionGeometryData`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``RevolutionGeometryData`` 
    
    :param geometryDataOption: 
    :type geometryDataOption: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    RevolutionGeometryDataFile: str = ...
    """
    Returns or sets  the revolution line-arc file.  
    
    This is a file containing information describing the revolution profile.
    
    <hr>
    
    Getter Method
    
    Signature ``RevolutionGeometryDataFile`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``RevolutionGeometryDataFile`` 
    
    :param fileName: 
    :type fileName: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    RevolutionLink: SelectLink = ...
    """
    Returns  the revolution link 
    
    <hr>
    
    Getter Method
    
    Signature ``RevolutionLink`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectLink` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    RevolutionMaterialSide: bool = ...
    """
    Returns or sets  the material side toggle for revolution 
    
    <hr>
    
    Getter Method
    
    Signature ``RevolutionMaterialSide`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``RevolutionMaterialSide`` 
    
    :param matSide: 
    :type matSide: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SecondRevolutionBodies: NXOpen.SelectNXObjectList = ...
    """
    Returns  the second revolution bodies 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondRevolutionBodies`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SecondRevolutionGeometryData: bool = ...
    """
    Returns or sets  the second revolution line-arc file option
    
    <hr>
    
    Getter Method
    
    Signature ``SecondRevolutionGeometryData`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``SecondRevolutionGeometryData`` 
    
    :param geometryDataOption: 
    :type geometryDataOption: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SecondRevolutionGeometryDataFile: str = ...
    """
    Returns or sets  the second revolution line-arc file.  
    
    This is a file containing information describing the second revolution profile.
    
    <hr>
    
    Getter Method
    
    Signature ``SecondRevolutionGeometryDataFile`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``SecondRevolutionGeometryDataFile`` 
    
    :param fileName: 
    :type fileName: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SecondRevolutionLink: SelectLink = ...
    """
    Returns  the second revolution link 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondRevolutionLink`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectLink` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SecondRevolutionMaterialSide: bool = ...
    """
    Returns or sets  the material side toggle for second revolution 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondRevolutionMaterialSide`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``SecondRevolutionMaterialSide`` 
    
    :param matSide: 
    :type matSide: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SecondSphereLink: SelectLink = ...
    """
    Returns  the second sphere link 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondSphereLink`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectLink` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SecondSpherePoint: NXOpen.Point = ...
    """
    Returns or sets  the second sphere point 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondSpherePoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``SecondSpherePoint`` 
    
    :param secondSpherePoint: 
    :type secondSpherePoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SecondSphereRadius: NXOpen.Expression = ...
    """
    Returns  the second sphere radius 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondSphereRadius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SecondSuperElementIncrement: int = ...
    """
    Returns or sets  the second super element increment 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondSuperElementIncrement`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``SecondSuperElementIncrement`` 
    
    :param sSecondSuperElementIncrement: 
    :type sSecondSuperElementIncrement: int 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SecondSuperElementLink: SelectLink = ...
    """
    Returns  the second super element link 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondSuperElementLink`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectLink` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SphereLink: SelectLink = ...
    """
    Returns  the sphere link 
    
    <hr>
    
    Getter Method
    
    Signature ``SphereLink`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectLink` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SpherePoint: NXOpen.Point = ...
    """
    Returns or sets  the sphere point 
    
    <hr>
    
    Getter Method
    
    Signature ``SpherePoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``SpherePoint`` 
    
    :param spherePoint: 
    :type spherePoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SphereRadius: NXOpen.Expression = ...
    """
    Returns  the sphere radius 
    
    <hr>
    
    Getter Method
    
    Signature ``SphereRadius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SuperElementReportInstance: int = ...
    """
    Returns or sets  the super element report instance 
    
    <hr>
    
    Getter Method
    
    Signature ``SuperElementReportInstance`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``SuperElementReportInstance`` 
    
    :param superElementReportInstance: 
    :type superElementReportInstance: int 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: AnalyticalContactBuilder = ...  # unknown typename


class BushingCoefficients(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a Motion BushingCoefficients
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX12.0.0
       Use :py:class:`Motion.BushingStiffnessCoefficients`, :py:class:`Motion.BushingDampingCoefficients` and :py:class:`Motion.BushingActuatorCoefficients` instead.
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    CylindricalCoefficients: BushingCylindricalCoefficients = ...
    """
    Returns  the cylindrical coefficients.  
    
    It is used in :py:class:`Motion.BushingBuilderBushingTypes.Cylindrical <Motion.BushingBuilderBushingTypes>` case 
    
    <hr>
    
    Getter Method
    
    Signature ``CylindricalCoefficients`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.BushingCylindricalCoefficients` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SphericalCoefficients: BushingSphericalCoefficients = ...
    """
    Returns  the spherical coefficients.  
    
    It is used in :py:class:`Motion.BushingBuilderBushingTypes.Spherical <Motion.BushingBuilderBushingTypes>` case 
    
    <hr>
    
    Getter Method
    
    Signature ``SphericalCoefficients`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.BushingSphericalCoefficients` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    TorsionalCoefficients: BushingGeneralCoefficients = ...
    """
    Returns  the torsional coefficients.  
    
    It is used in :py:class:`Motion.BushingBuilderBushingTypes.General <Motion.BushingBuilderBushingTypes>` case 
    
    <hr>
    
    Getter Method
    
    Signature ``TorsionalCoefficients`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.BushingGeneralCoefficients` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    TranslationalCoefficients: BushingGeneralCoefficients = ...
    """
    Returns  the translational coefficients.  
    
    It is used in :py:class:`Motion.BushingBuilderBushingTypes.General <Motion.BushingBuilderBushingTypes>` case 
    
    <hr>
    
    Getter Method
    
    Signature ``TranslationalCoefficients`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.BushingGeneralCoefficients` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: BushingCoefficients = ...  # unknown typename


class CouplerRckpn(Coupler):
    """
    Represents a motion rack and pinion object   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Motion.CouplerRckpnBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: CouplerRckpn = ...  # unknown typename


class PlantOutputCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Plant Output objects   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Motion.MotionManager`
    
    .. versionadded:: NX6.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreatePlantOutputBuilder(self, platoutput: PlantOutput) -> PlantOutputBuilder:
        """
        Creates a :py:class:`NXOpen.Motion.PlantOutputBuilder`  
        
        Signature ``CreatePlantOutputBuilder(platoutput)`` 
        
        :param platoutput: 
        :type platoutput: :py:class:`NXOpen.Motion.PlantOutput` 
        :returns: 
        :rtype: :py:class:`NXOpen.Motion.PlantOutputBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: nx_motion_cosim ("NX Motion CoSimulation")
        """
        ...
    
    
    def FindObject(self, name: str) -> PlantOutput:
        """
        Finds the :py:class:`NXOpen.Motion.PlantOutput` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Motion.PlantOutput`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Motion.PlantOutput` with this name.  
        :rtype: :py:class:`NXOpen.Motion.PlantOutput` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: nx_motion_cosim ("NX Motion CoSimulation")
        """
        ...
    


class BushingStiffnessCoefficients(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a Motion BushingStiffnessCoefficients
    
    .. versionadded:: NX12.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    CylindricalStiffnessCoefficients: BushingCylindricalCoefficientsComponent = ...
    """
    Returns  the cylindrical stiffness coefficients.  
    
    It is used in :py:class:`Motion.BushingBuilderBushingTypes.Cylindrical <Motion.BushingBuilderBushingTypes>` case 
    
    <hr>
    
    Getter Method
    
    Signature ``CylindricalStiffnessCoefficients`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.BushingCylindricalCoefficientsComponent` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    GeneralTorsionalStiffnessCoefficients: BushingGeneralCoefficientsComponent = ...
    """
    Returns  the general torsinal coefficients.  
    
    It is used in :py:class:`Motion.BushingBuilderBushingTypes.General <Motion.BushingBuilderBushingTypes>` case 
    
    <hr>
    
    Getter Method
    
    Signature ``GeneralTorsionalStiffnessCoefficients`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.BushingGeneralCoefficientsComponent` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    GeneralTranslationalStiffnessCoefficients: BushingGeneralCoefficientsComponent = ...
    """
    Returns  the general translational coefficients.  
    
    It is used in :py:class:`Motion.BushingBuilderBushingTypes.General <Motion.BushingBuilderBushingTypes>` case 
    
    <hr>
    
    Getter Method
    
    Signature ``GeneralTranslationalStiffnessCoefficients`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.BushingGeneralCoefficientsComponent` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    SphericalStiffnessCoefficients: BushingSphericalCoefficientsComponent = ...
    """
    Returns  the spherical coefficients.  
    
    It is used in :py:class:`Motion.BushingBuilderBushingTypes.Spherical <Motion.BushingBuilderBushingTypes>` case 
    
    <hr>
    
    Getter Method
    
    Signature ``SphericalStiffnessCoefficients`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.BushingSphericalCoefficientsComponent` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    Null: BushingStiffnessCoefficients = ...  # unknown typename


class PointOnSurfaceCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Point on Surface objects   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Motion.MotionManager`
    
    .. versionadded:: NX6.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreatePointOnSurfaceBuilder(self, pointonsurface: PointOnSurface) -> PointOnSurfaceBuilder:
        """
        Creates a :py:class:`NXOpen.Motion.PointOnSurfaceBuilder`  
        
        Signature ``CreatePointOnSurfaceBuilder(pointonsurface)`` 
        
        :param pointonsurface: 
        :type pointonsurface: :py:class:`NXOpen.Motion.PointOnSurface` 
        :returns: 
        :rtype: :py:class:`NXOpen.Motion.PointOnSurfaceBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def FindObject(self, name: str) -> PointOnSurface:
        """
        Finds the :py:class:`NXOpen.Motion.PointOnSurface` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Motion.PointOnSurface`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Motion.PointOnSurface` with this name.  
        :rtype: :py:class:`NXOpen.Motion.PointOnSurface` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    


class CurveContactRecurdyn(NXOpen.NXObject):
    """
    Represents a :py:class:`NXOpen.Motion.CurveContactRecurdyn`   
    
    .. versionadded:: NX5.0.0
    """
    BufferRadiusFactorExpression: NXOpen.Expression = ...
    """
    Returns  the Buffer Radius Factor expression
    
    <hr>
    
    Getter Method
    
    Signature ``BufferRadiusFactorExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    CurveToleranceFactorExpression: NXOpen.Expression = ...
    """
    Returns  the Curve Tolerance Factor expression
    
    <hr>
    
    Getter Method
    
    Signature ``CurveToleranceFactorExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    DynamicCoefficientExpression: NXOpen.Expression = ...
    """
    Returns  the dynamic coefficient expression
    
    <hr>
    
    Getter Method
    
    Signature ``DynamicCoefficientExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    FirstCurveMaximumPenetrationExpression: NXOpen.Expression = ...
    """
    Returns  the first curve maximum penetration expression
    
    <hr>
    
    Getter Method
    
    Signature ``FirstCurveMaximumPenetrationExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ForceExponentExpression: NXOpen.Expression = ...
    """
    Returns  the force exponent expression
    
    <hr>
    
    Getter Method
    
    Signature ``ForceExponentExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    MaterialDampingExpression: NXOpen.Expression = ...
    """
    Returns  the material damping expression
    
    <hr>
    
    Getter Method
    
    Signature ``MaterialDampingExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    MaximumStepSizeFactorExpression: NXOpen.Expression = ...
    """
    Returns  the Maximun Step Size Factor expression
    
    <hr>
    
    Getter Method
    
    Signature ``MaximumStepSizeFactorExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    PenetrationDepthExpression: NXOpen.Expression = ...
    """
    Returns  the penetration depth expression
    
    <hr>
    
    Getter Method
    
    Signature ``PenetrationDepthExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SecondCurveMaximumPenetrationExpression: NXOpen.Expression = ...
    """
    Returns  the second curve maximum penetration expression
    
    <hr>
    
    Getter Method
    
    Signature ``SecondCurveMaximumPenetrationExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SlipVelocityExpression: NXOpen.Expression = ...
    """
    Returns  the slip velocity expression
    
    <hr>
    
    Getter Method
    
    Signature ``SlipVelocityExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    StaticCoefficientExpression: NXOpen.Expression = ...
    """
    Returns  the static coefficient expression
    
    <hr>
    
    Getter Method
    
    Signature ``StaticCoefficientExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    StiffnessExpression: NXOpen.Expression = ...
    """
    Returns  the stiffness expression
    
    <hr>
    
    Getter Method
    
    Signature ``StiffnessExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    TransitionVelocityExpression: NXOpen.Expression = ...
    """
    Returns  the transition velocity expression
    
    <hr>
    
    Getter Method
    
    Signature ``TransitionVelocityExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: CurveContactRecurdyn = ...  # unknown typename


class SelectTirePropertyBasic(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a single object selection.  
    
    .. versionadded:: NX5.0.0
    """
    
    @typing.overload
    def SetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def SetValue(self, selection: TirePropertyBasic) -> None:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.TirePropertyBasic` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: TirePropertyBasic) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.TirePropertyBasic` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: TirePropertyBasic, view: NXOpen.View, point: NXOpen.Point3d) -> None:
        """
        The object being selected with the object's view and object's point
        
        Signature ``SetValue(selection, view, point)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.TirePropertyBasic` 
        :param view:  selected object view 
        :type view: :py:class:`NXOpen.View` 
        :param point:  selected object point 
        :type point: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, snapType: NXOpen.InferSnapTypeSnapType, selection1: TirePropertyBasic, view1: NXOpen.View, point1: NXOpen.Point3d, selection2: TirePropertyBasic, view2: NXOpen.View, point2: NXOpen.Point3d) -> None:
        """
        The object being selected with the objects view and objects point and snap information.
        
        Signature ``SetValue(snapType, selection1, view1, point1, selection2, view2, point2)`` 
        
        :param snapType:   snap point type 
        :type snapType: :py:class:`NXOpen.InferSnapTypeSnapType` 
        :param selection1:  first selected object  
        :type selection1: :py:class:`NXOpen.Motion.TirePropertyBasic` 
        :param view1:  first selected object view 
        :type view1: :py:class:`NXOpen.View` 
        :param point1:  first selected object point 
        :type point1: :py:class:`NXOpen.Point3d` 
        :param selection2:  second selected object  
        :type selection2: :py:class:`NXOpen.Motion.TirePropertyBasic` 
        :param view2:  second selected object view 
        :type view2: :py:class:`NXOpen.View` 
        :param point2:  second selected object point 
        :type point2: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: TirePropertyBasic, caeSubType: NXOpen.CaeObjectTypeCaeSubType, caeSubId: int) -> None:
        """
        The object being selected with CAE set object information.
        
        Signature ``SetValue(selection, caeSubType, caeSubId)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.TirePropertyBasic` 
        :param caeSubType:  CAE set object sub type 
        :type caeSubType: :py:class:`NXOpen.CaeObjectTypeCaeSubType` 
        :param caeSubId:  CAE set object sub id 
        :type caeSubId: int 
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.SetValue`.
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def GetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def GetValue(self) -> TirePropertyBasic:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :returns:  selected object  
        :rtype: :py:class:`NXOpen.Motion.TirePropertyBasic` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self, selection: TirePropertyBasic) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.TirePropertyBasic` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the object's view and point.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, view, point). selection is a :py:class:`NXOpen.Motion.TirePropertyBasic`.   selected object view is a :py:class:`NXOpen.View`.   selected object viewpoint is a :py:class:`NXOpen.Point3d`.   selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the objects view and point and snap information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (snapType, selection1, view1, point1, selection2, view2, point2). snapType is a :py:class:`NXOpen.InferSnapTypeSnapType`.    snap point typeselection1 is a :py:class:`NXOpen.Motion.TirePropertyBasic`.   first selected object view1 is a :py:class:`NXOpen.View`.   first selected object viewpoint1 is a :py:class:`NXOpen.Point3d`.   first selected object pointselection2 is a :py:class:`NXOpen.Motion.TirePropertyBasic`.   second selected object view2 is a :py:class:`NXOpen.View`.   second selected object viewpoint2 is a :py:class:`NXOpen.Point3d`.   second selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with CAE set object information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, caeSubType, caeSubId). selection is a :py:class:`NXOpen.Motion.TirePropertyBasic`.   selected object caeSubType is a :py:class:`NXOpen.CaeObjectTypeCaeSubType`.   CAE set object sub typecaeSubId is a int.   CAE set object sub id
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.GetValue`.
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Value: TirePropertyBasic = ...
    """
    Returns or sets  the object being selected
    
    <hr>
    
    Getter Method
    
    Signature ``Value`` 
    
    :returns:  selected object  
    :rtype: :py:class:`NXOpen.Motion.TirePropertyBasic` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Value`` 
    
    :param selection:  selected object  
    :type selection: :py:class:`NXOpen.Motion.TirePropertyBasic` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SelectTirePropertyBasic = ...  # unknown typename


class SignalChartCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of motion Signal Chart   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Motion.MotionManager`
    
    .. versionadded:: NX6.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateSignalChartBuilder(self, signalchart: SignalChart) -> SignalChartBuilder:
        """
        Return  :py:class:`NXOpen.Motion.SignalChartBuilder` object   
        
        Signature ``CreateSignalChartBuilder(signalchart)`` 
        
        :param signalchart:  :py:class:`NXOpen.Motion.SignalChart` to be edited,                                                                      if None then create a new one  
        :type signalchart: :py:class:`NXOpen.Motion.SignalChart` 
        :returns:  SignalChartBuilder object  
        :rtype: :py:class:`NXOpen.Motion.SignalChartBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: nx_motion_motor ("NX Motion Motor")
        """
        ...
    
    
    def CreateSignalChartListItem(self) -> SignalChartListItem:
        """
        Creates a :py:class:`NXOpen.Motion.SignalChartListItem`  
        
        Signature ``CreateSignalChartListItem()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Motion.SignalChartListItem` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: nx_motion_motor ("NX Motion Motor")
        """
        ...
    
    
    def FindObject(self, name: str) -> SignalChart:
        """
        Finds the :py:class:`NXOpen.Motion.SignalChart` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name: 
        :type name: str 
        :returns: 
        :rtype: :py:class:`NXOpen.Motion.SignalChart` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: nx_motion_motor ("NX Motion Motor")
        """
        ...
    


class MotionSimulation():
    """
    Represents Motion.  
    
    Simulation 
    To obtain an instance of this class, refer to :py:class:`NXOpen.Session`
    
    .. versionadded:: NX5.0.0
    """
    
    @typing.overload
    def SaveSimulation(self, masterPart: NXOpen.NXObject, motionSimName: str) -> None:
        """
        Save the simulation through input part name 
        
        Signature ``SaveSimulation(masterPart, motionSimName)`` 
        
        :param masterPart:  the master part object  
        :type masterPart: :py:class:`NXOpen.NXObject` 
        :param motionSimName:  the motion simulation part name which ready to be saved  
        :type motionSimName: str 
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX12.0.0
           Use :py:meth:`NXOpen.BasePart.Save`
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    @typing.overload
    def SaveSimulation(self, masterPart: NXOpen.NXObject, motionSimPart: NXOpen.NXObject) -> None:
        """
        Save the simulation through input part object 
        
        Signature ``SaveSimulation(masterPart, motionSimPart)`` 
        
        :param masterPart:  the master part object  
        :type masterPart: :py:class:`NXOpen.NXObject` 
        :param motionSimPart:  the motion simulation part which ready to be saved  
        :type motionSimPart: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX7.5.0
        
        .. deprecated::  NX12.0.0
           Use :py:meth:`NXOpen.BasePart.Save`
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def LoadSimulation(self, masterPart: NXOpen.NXObject, motionSimName: str) -> None:
        """
        Load the simulation 
        
        Signature ``LoadSimulation(masterPart, motionSimName)`` 
        
        :param masterPart:  the master part object  
        :type masterPart: :py:class:`NXOpen.NXObject` 
        :param motionSimName:  the motion simulation name to load  
        :type motionSimName: str 
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX12.0.0
           Use :py:meth:`NXOpen.PartCollection.OpenDisplay` and :py:meth:`NXOpen.Motion.MotionSession.InitializeSimulation`
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    @typing.overload
    def UnloadSimulation(self, masterPart: NXOpen.NXObject, motionSimName: str) -> None:
        """
        Unload the simulation through input part name 
        
        Signature ``UnloadSimulation(masterPart, motionSimName)`` 
        
        :param masterPart:  the master part object  
        :type masterPart: :py:class:`NXOpen.NXObject` 
        :param motionSimName:  the motion simulation name to unload 
        :type motionSimName: str 
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX12.0.0
           Use :py:meth:`NXOpen.BasePart.Close`
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    @typing.overload
    def UnloadSimulation(self, masterPart: NXOpen.NXObject, motionSimPart: NXOpen.NXObject) -> None:
        """
        Unload the simulation through input part object 
        
        Signature ``UnloadSimulation(masterPart, motionSimPart)`` 
        
        :param masterPart:  the master part object  
        :type masterPart: :py:class:`NXOpen.NXObject` 
        :param motionSimPart:  the motion simulation to unload 
        :type motionSimPart: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX7.5.0
        
        .. deprecated::  NX12.0.0
           Use :py:meth:`NXOpen.BasePart.Close`
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def RenameSimulation(self, masterPart: NXOpen.NXObject, oldMotionSimName: str, newMotionSimName: str) -> None:
        """
        Rename the simulation 
        
        Signature ``RenameSimulation(masterPart, oldMotionSimName, newMotionSimName)`` 
        
        :param masterPart:  the master part object  
        :type masterPart: :py:class:`NXOpen.NXObject` 
        :param oldMotionSimName:  the motion simulation part name which ready to be renamed  
        :type oldMotionSimName: str 
        :param newMotionSimName:  the new motion simulation part name  
        :type newMotionSimName: str 
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX12.0.0
           Use :py:meth:`NXOpen.BasePart.SaveAs`
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def CalculateGrueblerCount(self, motionPart: NXOpen.NXObject) -> int:
        """
        Calculate the gruebler count of given motion part  
        
        Signature ``CalculateGrueblerCount(motionPart)`` 
        
        :param motionPart:  motion part object  
        :type motionPart: :py:class:`NXOpen.NXObject` 
        :returns:  gruebler count  
        :rtype: int 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def ExportRecurdynSdk(self, fullFileName: str) -> None:
        """
        Export Recurdyn sdk data, need an active solution in simulation 
        
        Signature ``ExportRecurdynSdk(fullFileName)`` 
        
        :param fullFileName:  full name with directory and extension 
        :type fullFileName: str 
        
        .. versionadded:: NX7.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def AddMaster(self, motionPart: NXOpen.Part, masterPart: NXOpen.NXObject) -> None:
        """
        Creates a new :py:class:`NXOpen.Assemblies.Component` in this motion simulation assembly as master part 
        
        Signature ``AddMaster(motionPart, masterPart)`` 
        
        :param motionPart:  the motion part to add master part into it 
        :type motionPart: :py:class:`NXOpen.Part` 
        :param masterPart:  the master part to be added, it can be a part occurrence tag or part tag  
        :type masterPart: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def RemoveMaster(self, motionPart: NXOpen.Part, deleteMotionObjects: bool) -> None:
        """
        Removes existing master part in this motion simulation assembly 
        
        Signature ``RemoveMaster(motionPart, deleteMotionObjects)`` 
        
        :param motionPart:  the motion part to remove master part from it  
        :type motionPart: :py:class:`NXOpen.Part` 
        :param deleteMotionObjects:  the tag whether to keep or delete motion objects referencing master part  
        :type deleteMotionObjects: bool 
        
        .. versionadded:: NX12.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def GetMasterCadPart(self, motionPart: NXOpen.Part) -> NXOpen.Part:
        """
        Gets the loaded master part in this motion simulation assembly.  
        
        Signature ``GetMasterCadPart(motionPart)`` 
        
        :param motionPart:  the motion part to remove master part from it  
        :type motionPart: :py:class:`NXOpen.Part` 
        :returns:  the loaded master part  
        :rtype: :py:class:`NXOpen.Part` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def RenameSubmechanism(self, submechanism: NXOpen.NXObject, name: str) -> None:
        """
        Sets the custom name of the Submechanism object.  
        
        Signature ``RenameSubmechanism(submechanism, name)`` 
        
        :param submechanism: 
        :type submechanism: :py:class:`NXOpen.NXObject` 
        :param name: 
        :type name: str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def ReadDeactivatedStates(self, sumbmechanism: NXOpen.NXObject, solution: MotionSolution) -> None:
        """
        Copies the deactivated states of motion objects occurrences belonging to a given 
        submechanism from a given solution to the motion assembly.  
        
        The motion objects deactivated from the
        given solution will become "Deactivated for All" in the motion assembly. 
        If submechanism tag is NULL then will copy the deactivated states from the selected solution to the active one.
        
        Signature ``ReadDeactivatedStates(sumbmechanism, solution)`` 
        
        :param sumbmechanism:  submechanism child of current root part  
        :type sumbmechanism: :py:class:`NXOpen.NXObject` 
        :param solution:  the solution, from the submechanism part, from which the deactivated states are read  
        :type solution: :py:class:`NXOpen.Motion.MotionSolution` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def CreateAddSubmechanismBuilder(self, part: NXOpen.NXObject) -> AddSubmechanismBuilder:
        """
        Returns  :py:class:`NXOpen.Motion.AddSubmechanismBuilder` object   
        
        Signature ``CreateAddSubmechanismBuilder(part)`` 
        
        :param part:  the part object  
        :type part: :py:class:`NXOpen.NXObject` 
        :returns:  :py:class:`NXOpen.Motion.AddSubmechanismBuilder` object  
        :rtype: :py:class:`NXOpen.Motion.AddSubmechanismBuilder` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def AddSuppressedObjectForAllSolutions(self, motionPart: NXOpen.Part, obj: NXOpen.NXObject) -> None:
        """
        Deactivates a motion object for all solutions 
        
        Signature ``AddSuppressedObjectForAllSolutions(motionPart, obj)`` 
        
        :param motionPart: 
        :type motionPart: :py:class:`NXOpen.Part` 
        :param obj: 
        :type obj: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def RemoveSuppressedObjectForAllSolutions(self, motionPart: NXOpen.Part, obj: NXOpen.NXObject) -> None:
        """
        Activates a motion object for all solutions 
        
        Signature ``RemoveSuppressedObjectForAllSolutions(motionPart, obj)`` 
        
        :param motionPart: 
        :type motionPart: :py:class:`NXOpen.Part` 
        :param obj: 
        :type obj: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    


class ControlOutput(MotionObject, IGraphSource):
    """
    Represents a Control Output motion object.  
    
    Control output element uses a control port
    as input to apply force/torque on to the selected links or joints. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Motion.ControlOutputBuilder`
    
    .. versionadded:: NX11.0.0
    """
    Null: ControlOutput = ...  # unknown typename


class TirePropertyCdBuilderModelTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TirePropertyCdBuilderModelType():
    """
    The Model type. 
    See detailed documentation about each model type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Cdt30", " - "
       "Cdt30Hps", " - "
       "Cdt40", " - "
       "Cdt50", " - "
    """
    Cdt30 = 0  # TirePropertyCdBuilderModelTypeMemberType
    Cdt30Hps = 1  # TirePropertyCdBuilderModelTypeMemberType
    Cdt40 = 2  # TirePropertyCdBuilderModelTypeMemberType
    Cdt50 = 3  # TirePropertyCdBuilderModelTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TirePropertyCdBuilderInflationPressureTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TirePropertyCdBuilderInflationPressureType():
    """
    The Inflation Pressure type.
    Specifies how the tire pressure will be defined. 
    If the TireParameterFile is selected, then the tire pressure is set in the selected tire parameter file.
    If Constant is set, then the constant pressure is defined in the CD Tire dialog.
    If Variable is selected, then the pressure is defined by a curve.
    The pressure curve defines tire pressure as a function of simulation time.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "TireParameterFile", " - "
       "Constant", " - "
       "Function", " - "
       "Profile", " - "
    """
    TireParameterFile = 0  # TirePropertyCdBuilderInflationPressureTypeMemberType
    Constant = 1  # TirePropertyCdBuilderInflationPressureTypeMemberType
    Function = 2  # TirePropertyCdBuilderInflationPressureTypeMemberType
    Profile = 3  # TirePropertyCdBuilderInflationPressureTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TirePropertyCdBuilderAmbientTempTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TirePropertyCdBuilderAmbientTempType():
    """
    The Ambient Temp type.
    Specifies how the ambient temperature will be defined.
    If TireParameterFile is selected, then the ambient temperature is set in the selected tire parameter file.
    If Constant is set, then the ambient temperature is defined in the CD Tire dialog.
    If Variable is selected, then the ambient temperature is defined by a curve.
    The pressure curve defines ambient temperature as a function of simulation time.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "TireParameterFile", " - "
       "Constant", " - "
       "Function", " - "
       "Profile", " - "
    """
    TireParameterFile = 0  # TirePropertyCdBuilderAmbientTempTypeMemberType
    Constant = 1  # TirePropertyCdBuilderAmbientTempTypeMemberType
    Function = 2  # TirePropertyCdBuilderAmbientTempTypeMemberType
    Profile = 3  # TirePropertyCdBuilderAmbientTempTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TirePropertyCdBuilder(TirePropertyBuilder):
    """
    Represents a :py:class:`Motion.TirePropertyCd` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.TirePropertyCdCollection.CreateTirePropertyCdBuilder`
    
    Default values.
    
    ===============================  ==========================================
    Property                         Value
    ===============================  ==========================================
    AmbientTempTypeSelection         TireParameterFile 
    -------------------------------  ------------------------------------------
    AmbientTempValue.Value           0.0 (millimeters part), 0.0 (inches part) 
    -------------------------------  ------------------------------------------
    ContactLengthWidth               0 
    -------------------------------  ------------------------------------------
    ContactPointGlobal               0 
    -------------------------------  ------------------------------------------
    ContactPointRoadRef              1 
    -------------------------------  ------------------------------------------
    CorrectorIter.Value              0 (millimeters part), 0 (inches part) 
    -------------------------------  ------------------------------------------
    EnergyLoss (deprecated)          0 
    -------------------------------  ------------------------------------------
    Inclination                      1 
    -------------------------------  ------------------------------------------
    InflationPressureTypeSelection   TireParameterFile 
    -------------------------------  ------------------------------------------
    InflationPressureValue.Value     0.0 (millimeters part), 0.0 (inches part) 
    -------------------------------  ------------------------------------------
    ModelTypeSelection               Cdt30 
    -------------------------------  ------------------------------------------
    RimRoadGlobal                    1 
    -------------------------------  ------------------------------------------
    RimRoadTydexW                    1 
    -------------------------------  ------------------------------------------
    RimTydexCH                       1 
    -------------------------------  ------------------------------------------
    RoadGlobal                       0 
    -------------------------------  ------------------------------------------
    SolverResults                    0 
    -------------------------------  ------------------------------------------
    StaticHold                       1 
    -------------------------------  ------------------------------------------
    StaticRadius.Value               0.1 (millimeters part), 0 (inches part) 
    -------------------------------  ------------------------------------------
    StaticVerticalStiffness.Value    0.0 (millimeters part), 0.0 (inches part) 
    -------------------------------  ------------------------------------------
    TimeStatistics                   0 
    -------------------------------  ------------------------------------------
    WheelGlobal                      0 
    -------------------------------  ------------------------------------------
    WheelRoadRef                     0 
    ===============================  ==========================================
    
    .. versionadded:: NX11.0.0
    """
    
    class ModelType():
        """
        The Model type. 
        See detailed documentation about each model type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Cdt30", " - "
           "Cdt30Hps", " - "
           "Cdt40", " - "
           "Cdt50", " - "
        """
        Cdt30 = 0  # TirePropertyCdBuilderModelTypeMemberType
        Cdt30Hps = 1  # TirePropertyCdBuilderModelTypeMemberType
        Cdt40 = 2  # TirePropertyCdBuilderModelTypeMemberType
        Cdt50 = 3  # TirePropertyCdBuilderModelTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class InflationPressureType():
        """
        The Inflation Pressure type.
        Specifies how the tire pressure will be defined. 
        If the TireParameterFile is selected, then the tire pressure is set in the selected tire parameter file.
        If Constant is set, then the constant pressure is defined in the CD Tire dialog.
        If Variable is selected, then the pressure is defined by a curve.
        The pressure curve defines tire pressure as a function of simulation time.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "TireParameterFile", " - "
           "Constant", " - "
           "Function", " - "
           "Profile", " - "
        """
        TireParameterFile = 0  # TirePropertyCdBuilderInflationPressureTypeMemberType
        Constant = 1  # TirePropertyCdBuilderInflationPressureTypeMemberType
        Function = 2  # TirePropertyCdBuilderInflationPressureTypeMemberType
        Profile = 3  # TirePropertyCdBuilderInflationPressureTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class AmbientTempType():
        """
        The Ambient Temp type.
        Specifies how the ambient temperature will be defined.
        If TireParameterFile is selected, then the ambient temperature is set in the selected tire parameter file.
        If Constant is set, then the ambient temperature is defined in the CD Tire dialog.
        If Variable is selected, then the ambient temperature is defined by a curve.
        The pressure curve defines ambient temperature as a function of simulation time.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "TireParameterFile", " - "
           "Constant", " - "
           "Function", " - "
           "Profile", " - "
        """
        TireParameterFile = 0  # TirePropertyCdBuilderAmbientTempTypeMemberType
        Constant = 1  # TirePropertyCdBuilderAmbientTempTypeMemberType
        Function = 2  # TirePropertyCdBuilderAmbientTempTypeMemberType
        Profile = 3  # TirePropertyCdBuilderAmbientTempTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AmbientTempFunction: MotionFunction = ...
    """
    Returns or sets  the ambient temperature function 
    
    <hr>
    
    Getter Method
    
    Signature ``AmbientTempFunction`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.MotionFunction` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AmbientTempFunction`` 
    
    :param ambientTempFunction: 
    :type ambientTempFunction: :py:class:`NXOpen.Motion.MotionFunction` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    AmbientTempProfile: SelectFieldData = ...
    """
    Returns  the Profile for Ambient Temperature.  
    
    <hr>
    
    Getter Method
    
    Signature ``AmbientTempProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectFieldData` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    AmbientTempTypeSelection: TirePropertyCdBuilderAmbientTempType = ...
    """
    Returns or sets  the ambient temperature type.  
    
    Specifies how the ambient temperature will be defined.
    If :py:class:`AmbientTempType.TireParameterFile <AmbientTempType>` is selected,
    then the ambient temperature is set in the selected tire parameter file. 
    Otherwise, it will be defined as a constant, function, or a profile.
    The pressure curve defines ambient temperature as a function of simulation time. 
    
    <hr>
    
    Getter Method
    
    Signature ``AmbientTempTypeSelection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.TirePropertyCdBuilderAmbientTempType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AmbientTempTypeSelection`` 
    
    :param ambientTempTypeSelection: 
    :type ambientTempTypeSelection: :py:class:`NXOpen.Motion.TirePropertyCdBuilderAmbientTempType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    AmbientTempValue: NXOpen.Expression = ...
    """
    Returns  the ambient temperature constant value.  
    
    <hr>
    
    Getter Method
    
    Signature ``AmbientTempValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    ContactKinematics: bool = ...
    """
    Returns or sets  the Contact Kinematics (Effective Rolling Radius, Slip Velocities, Surface Normal).  
    
    Activates specific CDTire results:
    Effective rolling radius (eff_roll_rad);Loaded radius rate of change (radius_rate);
    Longitudinal slip velocity (long_slip_vel);Lateral slip velocity (lat_slip_vel);
    Surface normal in road frame (surf_norm_x, surf_norm_y, surf_norm_z);
    Longitudinal velocity (long_vel);Spin velocity (spin_vel);
    
    <hr>
    
    Getter Method
    
    Signature ``ContactKinematics`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ContactKinematics`` 
    
    :param attributeValue: 
    :type attributeValue: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ContactLengthWidth: bool = ...
    """
    Returns or sets  the contact length/width.  
    
    Activates specific CDTire results:
    Contact patch length (contlength);
    Contact patch width (contwidth); 
    
    <hr>
    
    Getter Method
    
    Signature ``ContactLengthWidth`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ContactLengthWidth`` 
    
    :param contactLengthWidth: 
    :type contactLengthWidth: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ContactPointGlobal: bool = ...
    """
    Returns or sets  the contact point surface friction global.  
    
    Activates specific CDTire results: 
    Global location of contact center (contact_x_world, contact_y_world, contact_z_world);
    Coefficient of friction at contact point (mu);
    
    <hr>
    
    Getter Method
    
    Signature ``ContactPointGlobal`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ContactPointGlobal`` 
    
    :param contactPointGlobal: 
    :type contactPointGlobal: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ContactPointRoadRef: bool = ...
    """
    Returns or sets  the contact point surface friction road frame.  
    
    Activates specific CDTire results:
    x, y, or z-component of contact center position wrt Road Body (contact_x, contact_y, contact_z);
    Coefficient of friction at contact point (mu);
    
    <hr>
    
    Getter Method
    
    Signature ``ContactPointRoadRef`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ContactPointRoadRef`` 
    
    :param contactPointRoadRef: 
    :type contactPointRoadRef: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    CorrectorIter: NXOpen.Expression = ...
    """
    Returns  the corrector iterations.  
    
    Define the maximum number of corrector iterations 
    to be performed at each simulation time step in the CDTire internal PECE integrator. 
    
    <hr>
    
    Getter Method
    
    Signature ``CorrectorIter`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    EnergyLoss: bool = ...
    """
    Returns or sets  the wear indicator.  
    
    <hr>
    
    Getter Method
    
    Signature ``EnergyLoss`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    .. deprecated::  NX12.0.0
       Use :py:meth:`TirePropertyCdBuilder.WearIndicatorPerSegment` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EnergyLoss`` 
    
    :param attributeValue: 
    :type attributeValue: bool 
    
    .. versionadded:: NX11.0.0
    
    .. deprecated::  NX12.0.0
       Use :py:meth:`TirePropertyCdBuilder.WearIndicatorPerSegment` instead.
    
    License requirements: mechanisms ("MECHANISMS")
    """
    EnergyLossOfSpecificEntities: bool = ...
    """
    Returns or sets  the Energy Loss Of Specific Entities.  
    
    Activates specific CDTire results:
    (el_all, el_rubber_circ_damp, el_rubber_lat_damp, el_rubber_diag_damp,
    el_rubber_shear_damp, el_carcass_damp, el_capply_damp, el_belt_damp,
    el_bend_damp_x, el_bend_damp_y, el_bend_damp_xy,
    el_tread_slip, el_tread_radial_damp, el_tread_inner_frict); 
    
    <hr>
    
    Getter Method
    
    Signature ``EnergyLossOfSpecificEntities`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EnergyLossOfSpecificEntities`` 
    
    :param attributeValue: 
    :type attributeValue: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    EnergyLossPerSegment: bool = ...
    """
    Returns or sets  the Energy Loss Per Cross Section Segment 
    Activates specific CDTire results:
    eloss_gl, eloss_01 .  
    
    .. eloss_29;
    
    <hr>
    
    Getter Method
    
    Signature ``EnergyLossPerSegment`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EnergyLossPerSegment`` 
    
    :param attributeValue: 
    :type attributeValue: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Inclination: bool = ...
    """
    Returns or sets  the inclination and slip angle, slip loaded radius, rim rotation.  
    
    Activates specific CDTire results:
    Deflected tire radius (dynrad);
    y-component of rotational rim velocity wrt Tire Body (wy);
    Inclination angle (gamma); Slip angle (alpha); Longitudinal slip (longslip);
    
    <hr>
    
    Getter Method
    
    Signature ``Inclination`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Inclination`` 
    
    :param inclination: 
    :type inclination: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    InflationPressureFunction: MotionFunction = ...
    """
    Returns or sets  the inflation pressure function 
    
    <hr>
    
    Getter Method
    
    Signature ``InflationPressureFunction`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.MotionFunction` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InflationPressureFunction`` 
    
    :param inflationPressureFunction: 
    :type inflationPressureFunction: :py:class:`NXOpen.Motion.MotionFunction` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    InflationPressureProfile: SelectFieldData = ...
    """
    Returns  the Profile for Inflation Pressure.  
    
    <hr>
    
    Getter Method
    
    Signature ``InflationPressureProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectFieldData` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    InflationPressureTypeSelection: TirePropertyCdBuilderInflationPressureType = ...
    """
    Returns or sets  the inflation pressure type.  
    
    Specifies how the tire pressure will be defined.
    If :py:class:`InflationPressureType.TireParameterFile <InflationPressureType>` is selected,
    then the tire pressure is set in the selected tire parameter file.
    Otherwise, it will be defined as a constant, function, or a profile.
    The pressure curve defines tire pressure as a function of simulation time. 
    
    <hr>
    
    Getter Method
    
    Signature ``InflationPressureTypeSelection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.TirePropertyCdBuilderInflationPressureType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InflationPressureTypeSelection`` 
    
    :param inflationPressureTypeSelection: 
    :type inflationPressureTypeSelection: :py:class:`NXOpen.Motion.TirePropertyCdBuilderInflationPressureType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    InflationPressureValue: NXOpen.Expression = ...
    """
    Returns  the inflation pressure constant value.  
    
    <hr>
    
    Getter Method
    
    Signature ``InflationPressureValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    ModelTypeSelection: TirePropertyCdBuilderModelType = ...
    """
    Returns or sets  the CDTire model type.  
    
    <hr>
    
    Getter Method
    
    Signature ``ModelTypeSelection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.TirePropertyCdBuilderModelType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ModelTypeSelection`` 
    
    :param modelTypeSelection: 
    :type modelTypeSelection: :py:class:`NXOpen.Motion.TirePropertyCdBuilderModelType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Name: str = ...
    """
    Returns or sets  the name of the Tire Property
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    PrimaryParamFile: str = ...
    """
    Returns or sets  the primary parameter file.  
    
    The tire parameter file describes the properties of the tire.
    The number and location of the contained parameters depend on the used tire model.
    The file extension depends upon the selected Model Type.  
    
    <hr>
    
    Getter Method
    
    Signature ``PrimaryParamFile`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PrimaryParamFile`` 
    
    :param filename: 
    :type filename: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    RimRoadGlobal: bool = ...
    """
    Returns or sets  the rim road global frame.  
    
    Activates specific CDTire results: 
    Global x, y, or z-component of tire force/torque applied to Tire Body 
    (tb_gl_fx, tb_gl_fy, tb_gl_fz, tb_gl_tx, tb_gl_ty, tb_gl_tz); 
    
    <hr>
    
    Getter Method
    
    Signature ``RimRoadGlobal`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RimRoadGlobal`` 
    
    :param rimRoadGlobal: 
    :type rimRoadGlobal: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    RimRoadTydexW: bool = ...
    """
    Returns or sets  the rim road tydex-W frame.  
    
    Activates specific CDTire results: 
    X, y, or z-component of tire force/torque applied to Tire body, in Tydex-W frame
    (tb_tw_fx, tb_tw_fy, tb_tw_fz, tb_tw_tx, tb_tw_ty, tb_tw_tz); 
    X, y, or z-component of contact force/torque applied to Road body, in Tydex-W frame
    (rb_tw_fx, rb_tw_fy, rb_tw_fz, rb_tw_tx, rb_tw_ty, rb_tw_tz); 
    
    <hr>
    
    Getter Method
    
    Signature ``RimRoadTydexW`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RimRoadTydexW`` 
    
    :param rimRoadTydexW: 
    :type rimRoadTydexW: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    RimTydexCH: bool = ...
    """
    Returns or sets  the rim Tydex-C and Tydex-H frames.  
    
    Activates specific CDTire results:
    x, y, or z-component of tire force applied to Tire Body wrt Tydex-C coordinate system
    (tb_tc_fx, tb_tc_fy, tb_tc_fz, tb_tc_tx, tb_tc_ty, tb_tc_tz);
    x, y, or z-component of tire force applied to Tire Body wrt Tydex-H coordinate system
    (tb_th_fx, tb_th_fy, tb_th_fz, tb_th_tx, tb_th_ty, tb_th_tz);. 
    
    <hr>
    
    Getter Method
    
    Signature ``RimTydexCH`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RimTydexCH`` 
    
    :param rimTydexCH: 
    :type rimTydexCH: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    RoadGlobal: bool = ...
    """
    Returns or sets  the road center global.  
    
    Activates specific CDTire results:
    Vector from road axis system to rim center, in road axis system coordinates
    (roadx_world, roady_world, roadz_world);
    Euler parameter orientation coordinates of rim axis system with respect to road axis system
    (roade0_world, roade1_world, roade2_world, roade3_world);
    Velocity of rim center, relative to road axis system, in road axis system coordinates
    (roadxd_world, roadyd_world, roadzd_world);
    Angular velocity of rim relative to road axis system, in road axis system coordinates
    (roadwx_world, roadwy_world, roadwz_world); 
    
    <hr>
    
    Getter Method
    
    Signature ``RoadGlobal`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RoadGlobal`` 
    
    :param roadGlobal: 
    :type roadGlobal: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    SolverResults: bool = ...
    """
    Returns or sets  the solver results 
    Activates specific CDTire results:
    Integration step size (h);Time integration error (err);
    
    <hr>
    
    Getter Method
    
    Signature ``SolverResults`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SolverResults`` 
    
    :param solverResults: 
    :type solverResults: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    StaticHold: bool = ...
    """
    Returns or sets  the static hold.  
    
    Enables or disables holding forces during static analysis.
    These holding forces are applied to prevent add tire spin and gross chassis motion
    (X and Y translation and yaw with respect to the road "up" vector)
    stiffness in order to improve convergence during static analysis. 
    
    <hr>
    
    Getter Method
    
    Signature ``StaticHold`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StaticHold`` 
    
    :param staticHold: 
    :type staticHold: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    StaticRadius: NXOpen.Expression = ...
    """
    Returns  the static radius.  
    
    Approximate radius of the tire. Used only for the purpose of 
    including additional stabilizing forces during static analysis if 
    :py:meth:`TirePropertyCdBuilder.StaticHold`` is true.  
    
    <hr>
    
    Getter Method
    
    Signature ``StaticRadius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    StaticVerticalStiffness: NXOpen.Expression = ...
    """
    Returns  the static vertical stiffness.  
    
    Specifies the vertical stiffness only used in static equilibrating force calculations.
    Used only for the purpose of including additional stabilizing forces during static analysis
    if :py:meth:`TirePropertyCdBuilder.StaticHold`` is true. 
    
    <hr>
    
    Getter Method
    
    Signature ``StaticVerticalStiffness`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    TimeStatistics: bool = ...
    """
    Returns or sets  the time statistics 
    Activates specific CDTire results:
    Simulation time (time);
    CDTire tire model type (submodel);
    CDTire road model type (type);
    CPU time for this tire (cpu_time);
    
    <hr>
    
    Getter Method
    
    Signature ``TimeStatistics`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TimeStatistics`` 
    
    :param timeStatistics: 
    :type timeStatistics: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    TireControlFile: str = ...
    """
    Returns or sets  the tire control file.  
    
    The Tire Control File contains integrator control, adaptivity control and monitor control parameter. 
    
    <hr>
    
    Getter Method
    
    Signature ``TireControlFile`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TireControlFile`` 
    
    :param filename: 
    :type filename: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    WearIndicatorPerSegment: bool = ...
    """
    Returns or sets  the Wear Indicator Per Cross Section Segment.  
    
    Activates specific CDTire results:
    (wear_ind_gl, wear_ind_01 ...  wear_ind_29);
    
    <hr>
    
    Getter Method
    
    Signature ``WearIndicatorPerSegment`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WearIndicatorPerSegment`` 
    
    :param attributeValue: 
    :type attributeValue: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    WheelGlobal: bool = ...
    """
    Returns or sets  the wheel center global.  
    
    Activates specific CDTire results: 
    Global position of rim center (wheelx_world, wheely_world, wheelz_world);
    Euler parameters orientation coordinates of rim center axis system with respect to world
    (wheele0_world, wheele1_world, wheele2_world, wheele4_world);
    Global velocity of rim center (wheelxd_world, wheelyd_world, wheelzd_world);
    Global angular velocity of rim center (wheelwx_world, wheelwy_world, wheelwz_world);.
    
    <hr>
    
    Getter Method
    
    Signature ``WheelGlobal`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WheelGlobal`` 
    
    :param wheelGlobal: 
    :type wheelGlobal: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    WheelRoadRef: bool = ...
    """
    Returns or sets  the wheel center road reference frame.  
    
    Activates specific CDTire results:
    Vector from road axis system to rim center, in road axis system coordinates
    (wheelx_road, wheely_road, wheelz_road);
    Euler parameter orientation coordinates of rim axis system with respect to road axis system
    (wheele0_road, wheele1_road, wheele2_road, wheele3_road);
    Velocity of rim center, relative to road axis system, in road axis system coordinates
    (wheelxd_road, wheelyd_road, wheelzd_road);
    Angular velocity of rim relative to road axis system, in road axis system coordinates
    (wheelwx_road, wheelwy_road, wheelwz_road); 
    
    <hr>
    
    Getter Method
    
    Signature ``WheelRoadRef`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WheelRoadRef`` 
    
    :param wheelRoadRef: 
    :type wheelRoadRef: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: TirePropertyCdBuilder = ...  # unknown typename


class ControlInputBuilderInputTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ControlInputBuilderInputType():
    """
    Control Input type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Link", "Link"
    """
    Link = 0  # ControlInputBuilderInputTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ControlInputBuilder(MotionBuilder):
    """
    Represents a :py:class:`Motion.ControlInput` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.ControlInputCollection.CreateControlInputBuilder`
    
    .. versionadded:: NX11.0.0
    """
    
    class InputType():
        """
        Control Input type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Link", "Link"
        """
        Link = 0  # ControlInputBuilderInputTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def CreateControlInputPortBuilder(self) -> ControlInputPortBuilder:
        """
        Creates a new control input port item and adds to the PortsList.  
        
        Signature ``CreateControlInputPortBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Motion.ControlInputPortBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    MeasurementLinkAttachment: LinkAttachmentData = ...
    """
    Returns  the measurement link attachment.  
    
    The control input element measures the kinematic variables at the
    reference frame defined by this attachment. 
    
    <hr>
    
    Getter Method
    
    Signature ``MeasurementLinkAttachment`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.LinkAttachmentData` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Name: str = ...
    """
    Returns or sets  the control input name.  
    
    Must be unique across all motion elements. 
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    PortsList: ControlInputPortBuilderList = ...
    """
    Returns  the list of all child control input ports.  
    
    <hr>
    
    Getter Method
    
    Signature ``PortsList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.ControlInputPortBuilderList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    ReferenceLinkAttachment: LinkAttachmentData = ...
    """
    Returns  the reference link attachment and its components are optional.  
    
    When the link, point or csys are not defined,
    they are interpreted as ground link, ground origin or ground csys respectively. The measurement is computed
    in the reference frame defined by this attachment. 
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceLinkAttachment`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.LinkAttachmentData` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    RelativeLinkAttachment: LinkAttachmentData = ...
    """
    Returns  the relative link attachment and its components are optional.  
    
    When the link, point or csys are not defined,
    they are interpreted as ground link, ground origin or ground csys respectively. The measurement is made relative to
    the reference frame defined by this attachment. 
    
    <hr>
    
    Getter Method
    
    Signature ``RelativeLinkAttachment`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.LinkAttachmentData` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Type: ControlInputBuilderInputType = ...
    """
    Returns or sets  the type of control input element.  
    
    Link is the default value 
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.ControlInputBuilderInputType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Motion.ControlInputBuilderInputType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: ControlInputBuilder = ...  # unknown typename


class PMDCMotorBuilderTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PMDCMotorBuilderType():
    """
    Motor type  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "WithRotor", "Included rotor - load torque"
       "WithoutRotor", "Excluded rotor - rotor speed"
    """
    WithRotor = 0  # PMDCMotorBuilderTypeMemberType
    WithoutRotor = 1  # PMDCMotorBuilderTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PMDCMotorBuilder(MotorBuilder):
    """
    Represents a :py:class:`NXOpen.Motion.PMDCMotorBuilder`   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.PMDCMotorCollection.CreatePmdcMotorBuilder`
    
    .. versionadded:: NX6.0.0
    """
    
    class Type():
        """
        Motor type  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "WithRotor", "Included rotor - load torque"
           "WithoutRotor", "Excluded rotor - rotor speed"
        """
        WithRotor = 0  # PMDCMotorBuilderTypeMemberType
        WithoutRotor = 1  # PMDCMotorBuilderTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    DampingCoefficient: float = ...
    """
    Returns or sets  the damping coefficient 
    
    <hr>
    
    Getter Method
    
    Signature ``DampingCoefficient`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_motion_motor ("NX Motion Motor")
    
    <hr>
    
    Setter Method
    
    Signature ``DampingCoefficient`` 
    
    :param dampingCoefficient: 
    :type dampingCoefficient: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_motion_motor ("NX Motion Motor")
    """
    InductanceExpression: NXOpen.Expression = ...
    """
    Returns   the Inductant Expression
    
    <hr>
    
    Getter Method
    
    Signature ``InductanceExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_motion_motor ("NX Motion Motor")
    """
    InitialCurrentExpression: NXOpen.Expression = ...
    """
    Returns   the Initial Current Expression
    
    <hr>
    
    Getter Method
    
    Signature ``InitialCurrentExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_motion_motor ("NX Motion Motor")
    """
    InitialSpeed: float = ...
    """
    Returns or sets  the initial speed 
    
    <hr>
    
    Getter Method
    
    Signature ``InitialSpeed`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_motion_motor ("NX Motion Motor")
    
    <hr>
    
    Setter Method
    
    Signature ``InitialSpeed`` 
    
    :param initialSpeed: 
    :type initialSpeed: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_motion_motor ("NX Motion Motor")
    """
    MotorType: PMDCMotorBuilderType = ...
    """
    Returns or sets  the motor type 
    
    <hr>
    
    Getter Method
    
    Signature ``MotorType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.PMDCMotorBuilderType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_motion_motor ("NX Motion Motor")
    
    <hr>
    
    Setter Method
    
    Signature ``MotorType`` 
    
    :param motorType: 
    :type motorType: :py:class:`NXOpen.Motion.PMDCMotorBuilderType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_motion_motor ("NX Motion Motor")
    """
    Name: str = ...
    """
    Returns or sets  the name 
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_motion_motor ("NX Motion Motor")
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param motorName: 
    :type motorName: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_motion_motor ("NX Motion Motor")
    """
    NominalVoltageExpression: NXOpen.Expression = ...
    """
    Returns   the Nominal Voltage Expression
    
    <hr>
    
    Getter Method
    
    Signature ``NominalVoltageExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_motion_motor ("NX Motion Motor")
    """
    ResistanceExpression: NXOpen.Expression = ...
    """
    Returns   the Resistance Expression
    
    <hr>
    
    Getter Method
    
    Signature ``ResistanceExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_motion_motor ("NX Motion Motor")
    """
    RotorInteria: float = ...
    """
    Returns or sets  the rotor interia 
    
    <hr>
    
    Getter Method
    
    Signature ``RotorInteria`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_motion_motor ("NX Motion Motor")
    
    <hr>
    
    Setter Method
    
    Signature ``RotorInteria`` 
    
    :param rotorInteria: 
    :type rotorInteria: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_motion_motor ("NX Motion Motor")
    """
    VoltageConstantExpression: NXOpen.Expression = ...
    """
    Returns   the Voltage Constant Expression
    
    <hr>
    
    Getter Method
    
    Signature ``VoltageConstantExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_motion_motor ("NX Motion Motor")
    """
    Null: PMDCMotorBuilder = ...  # unknown typename


class SelectFieldData(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a single object selection.  
    
    .. versionadded:: NX5.0.0
    """
    
    @typing.overload
    def SetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def SetValue(self, selection: FieldData) -> None:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.FieldData` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: FieldData) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.FieldData` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: FieldData, view: NXOpen.View, point: NXOpen.Point3d) -> None:
        """
        The object being selected with the object's view and object's point
        
        Signature ``SetValue(selection, view, point)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.FieldData` 
        :param view:  selected object view 
        :type view: :py:class:`NXOpen.View` 
        :param point:  selected object point 
        :type point: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, snapType: NXOpen.InferSnapTypeSnapType, selection1: FieldData, view1: NXOpen.View, point1: NXOpen.Point3d, selection2: FieldData, view2: NXOpen.View, point2: NXOpen.Point3d) -> None:
        """
        The object being selected with the objects view and objects point and snap information.
        
        Signature ``SetValue(snapType, selection1, view1, point1, selection2, view2, point2)`` 
        
        :param snapType:   snap point type 
        :type snapType: :py:class:`NXOpen.InferSnapTypeSnapType` 
        :param selection1:  first selected object  
        :type selection1: :py:class:`NXOpen.Motion.FieldData` 
        :param view1:  first selected object view 
        :type view1: :py:class:`NXOpen.View` 
        :param point1:  first selected object point 
        :type point1: :py:class:`NXOpen.Point3d` 
        :param selection2:  second selected object  
        :type selection2: :py:class:`NXOpen.Motion.FieldData` 
        :param view2:  second selected object view 
        :type view2: :py:class:`NXOpen.View` 
        :param point2:  second selected object point 
        :type point2: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: FieldData, caeSubType: NXOpen.CaeObjectTypeCaeSubType, caeSubId: int) -> None:
        """
        The object being selected with CAE set object information.
        
        Signature ``SetValue(selection, caeSubType, caeSubId)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.FieldData` 
        :param caeSubType:  CAE set object sub type 
        :type caeSubType: :py:class:`NXOpen.CaeObjectTypeCaeSubType` 
        :param caeSubId:  CAE set object sub id 
        :type caeSubId: int 
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.SetValue`.
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def GetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def GetValue(self) -> FieldData:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :returns:  selected object  
        :rtype: :py:class:`NXOpen.Motion.FieldData` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self, selection: FieldData) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.FieldData` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the object's view and point.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, view, point). selection is a :py:class:`NXOpen.Motion.FieldData`.   selected object view is a :py:class:`NXOpen.View`.   selected object viewpoint is a :py:class:`NXOpen.Point3d`.   selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the objects view and point and snap information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (snapType, selection1, view1, point1, selection2, view2, point2). snapType is a :py:class:`NXOpen.InferSnapTypeSnapType`.    snap point typeselection1 is a :py:class:`NXOpen.Motion.FieldData`.   first selected object view1 is a :py:class:`NXOpen.View`.   first selected object viewpoint1 is a :py:class:`NXOpen.Point3d`.   first selected object pointselection2 is a :py:class:`NXOpen.Motion.FieldData`.   second selected object view2 is a :py:class:`NXOpen.View`.   second selected object viewpoint2 is a :py:class:`NXOpen.Point3d`.   second selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with CAE set object information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, caeSubType, caeSubId). selection is a :py:class:`NXOpen.Motion.FieldData`.   selected object caeSubType is a :py:class:`NXOpen.CaeObjectTypeCaeSubType`.   CAE set object sub typecaeSubId is a int.   CAE set object sub id
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.GetValue`.
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Value: FieldData = ...
    """
    Returns or sets  the object being selected
    
    <hr>
    
    Getter Method
    
    Signature ``Value`` 
    
    :returns:  selected object  
    :rtype: :py:class:`NXOpen.Motion.FieldData` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Value`` 
    
    :param selection:  selected object  
    :type selection: :py:class:`NXOpen.Motion.FieldData` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SelectFieldData = ...  # unknown typename


class SelectAnalyticalContactProperty(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a single object selection.  
    
    .. versionadded:: NX5.0.0
    """
    
    @typing.overload
    def SetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def SetValue(self, selection: AnalyticalContactProperty) -> None:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.AnalyticalContactProperty` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: AnalyticalContactProperty) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.AnalyticalContactProperty` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: AnalyticalContactProperty, view: NXOpen.View, point: NXOpen.Point3d) -> None:
        """
        The object being selected with the object's view and object's point
        
        Signature ``SetValue(selection, view, point)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.AnalyticalContactProperty` 
        :param view:  selected object view 
        :type view: :py:class:`NXOpen.View` 
        :param point:  selected object point 
        :type point: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, snapType: NXOpen.InferSnapTypeSnapType, selection1: AnalyticalContactProperty, view1: NXOpen.View, point1: NXOpen.Point3d, selection2: AnalyticalContactProperty, view2: NXOpen.View, point2: NXOpen.Point3d) -> None:
        """
        The object being selected with the objects view and objects point and snap information.
        
        Signature ``SetValue(snapType, selection1, view1, point1, selection2, view2, point2)`` 
        
        :param snapType:   snap point type 
        :type snapType: :py:class:`NXOpen.InferSnapTypeSnapType` 
        :param selection1:  first selected object  
        :type selection1: :py:class:`NXOpen.Motion.AnalyticalContactProperty` 
        :param view1:  first selected object view 
        :type view1: :py:class:`NXOpen.View` 
        :param point1:  first selected object point 
        :type point1: :py:class:`NXOpen.Point3d` 
        :param selection2:  second selected object  
        :type selection2: :py:class:`NXOpen.Motion.AnalyticalContactProperty` 
        :param view2:  second selected object view 
        :type view2: :py:class:`NXOpen.View` 
        :param point2:  second selected object point 
        :type point2: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: AnalyticalContactProperty, caeSubType: NXOpen.CaeObjectTypeCaeSubType, caeSubId: int) -> None:
        """
        The object being selected with CAE set object information.
        
        Signature ``SetValue(selection, caeSubType, caeSubId)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.AnalyticalContactProperty` 
        :param caeSubType:  CAE set object sub type 
        :type caeSubType: :py:class:`NXOpen.CaeObjectTypeCaeSubType` 
        :param caeSubId:  CAE set object sub id 
        :type caeSubId: int 
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.SetValue`.
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def GetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def GetValue(self) -> AnalyticalContactProperty:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :returns:  selected object  
        :rtype: :py:class:`NXOpen.Motion.AnalyticalContactProperty` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self, selection: AnalyticalContactProperty) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Motion.AnalyticalContactProperty` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the object's view and point.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, view, point). selection is a :py:class:`NXOpen.Motion.AnalyticalContactProperty`.   selected object view is a :py:class:`NXOpen.View`.   selected object viewpoint is a :py:class:`NXOpen.Point3d`.   selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the objects view and point and snap information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (snapType, selection1, view1, point1, selection2, view2, point2). snapType is a :py:class:`NXOpen.InferSnapTypeSnapType`.    snap point typeselection1 is a :py:class:`NXOpen.Motion.AnalyticalContactProperty`.   first selected object view1 is a :py:class:`NXOpen.View`.   first selected object viewpoint1 is a :py:class:`NXOpen.Point3d`.   first selected object pointselection2 is a :py:class:`NXOpen.Motion.AnalyticalContactProperty`.   second selected object view2 is a :py:class:`NXOpen.View`.   second selected object viewpoint2 is a :py:class:`NXOpen.Point3d`.   second selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with CAE set object information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, caeSubType, caeSubId). selection is a :py:class:`NXOpen.Motion.AnalyticalContactProperty`.   selected object caeSubType is a :py:class:`NXOpen.CaeObjectTypeCaeSubType`.   CAE set object sub typecaeSubId is a int.   CAE set object sub id
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.GetValue`.
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Value: AnalyticalContactProperty = ...
    """
    Returns or sets  the object being selected
    
    <hr>
    
    Getter Method
    
    Signature ``Value`` 
    
    :returns:  selected object  
    :rtype: :py:class:`NXOpen.Motion.AnalyticalContactProperty` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Value`` 
    
    :param selection:  selected object  
    :type selection: :py:class:`NXOpen.Motion.AnalyticalContactProperty` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SelectAnalyticalContactProperty = ...  # unknown typename


class BushingCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of motion joints   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Motion.MotionManager`
    
    .. versionadded:: NX6.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateBushingBuilder(self, bushing: Bushing) -> BushingBuilder:
        """
        Return  :py:class:`NXOpen.Motion.BushingBuilder` object   
        
        Signature ``CreateBushingBuilder(bushing)`` 
        
        :param bushing:  :py:class:`NXOpen.Motion.Bushing` to be edited,                                                                                   if None then create a new one  
        :type bushing: :py:class:`NXOpen.Motion.Bushing` 
        :returns:  BushingBuilder object  
        :rtype: :py:class:`NXOpen.Motion.BushingBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def FindObject(self, name: str) -> Bushing:
        """
        Finds the :py:class:`NXOpen.Motion.Bushing` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Motion.Bushing`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Motion.Bushing` with this name.  
        :rtype: :py:class:`NXOpen.Motion.Bushing` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    


class MechanismImportNamingRuleMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MechanismImportNamingRule():
    """
    Naming Rule type to modify imported object's name 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "Keeps imported object's name as is"
       "AddPrefix", "Adds a prefix string to imported object's name"
       "AddSuffix", "Adds a suffix string to imported object's name"
    """
    NotSet = 0  # MechanismImportNamingRuleMemberType
    AddPrefix = 1  # MechanismImportNamingRuleMemberType
    AddSuffix = 2  # MechanismImportNamingRuleMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MechanismImport():
    """
    Represents a Mechanism Import object used to import a Motion model from a text file.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Motion.MotionSession`
    
    .. versionadded:: NX12.0.0
    """
    
    class NamingRule():
        """
        Naming Rule type to modify imported object's name 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "Keeps imported object's name as is"
           "AddPrefix", "Adds a prefix string to imported object's name"
           "AddSuffix", "Adds a suffix string to imported object's name"
        """
        NotSet = 0  # MechanismImportNamingRuleMemberType
        AddPrefix = 1  # MechanismImportNamingRuleMemberType
        AddSuffix = 2  # MechanismImportNamingRuleMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def ImportMdef(self, workPart: NXOpen.NXObject, fileName: str, namingRule: MechanismImportNamingRule, addString: str, reportToInfoWindow: bool, replaceExistingElements: bool) -> None:
        """
        Imports a Motion Definition (.  
        
        mdef) file.
        
        Signature ``ImportMdef(workPart, fileName, namingRule, addString, reportToInfoWindow, replaceExistingElements)`` 
        
        :param workPart: 
        :type workPart: :py:class:`NXOpen.NXObject` 
        :param fileName:  Full path to the .mdef file  
        :type fileName: str 
        :param namingRule: 
        :type namingRule: :py:class:`NXOpen.Motion.MechanismImportNamingRule` 
        :param addString:  string to add when NamingRule is AddPrefix or AddSuffix  
        :type addString: str 
        :param reportToInfoWindow:  Flag to report import status in the information window  
        :type reportToInfoWindow: bool 
        :param replaceExistingElements:  Flag to replace elements with same names  
        :type replaceExistingElements: bool 
        
        .. versionadded:: NX12.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def ImportXML(self, workPart: NXOpen.Part, fileName: str, namingRule: MechanismImportNamingRule, appendixString: str, reportToInfoWindow: bool) -> None:
        """
        Imports a Motion Definition (.  
        
        XML) file.
        
        Signature ``ImportXML(workPart, fileName, namingRule, appendixString, reportToInfoWindow)`` 
        
        :param workPart: 
        :type workPart: :py:class:`NXOpen.Part` 
        :param fileName:  Full path to the .xml file  
        :type fileName: str 
        :param namingRule: 
        :type namingRule: :py:class:`NXOpen.Motion.MechanismImportNamingRule` 
        :param appendixString:  string to add when NamingRule is AddPrefix or AddSuffix  
        :type appendixString: str 
        :param reportToInfoWindow:  Flag to report import status in the information window  
        :type reportToInfoWindow: bool 
        
        .. versionadded:: NX12.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def ImportFromSubassembly(self, compOcc: NXOpen.Assemblies.Component, motionPart: NXOpen.Part, workPart: NXOpen.Part, namingRule: MechanismImportNamingRule, appendixString: str, reportToInfoWindow: bool, abortOnFailure: bool) -> None:
        """
        Imports a Motion Definition (.  
        
        sim) Part.
        
        Signature ``ImportFromSubassembly(compOcc, motionPart, workPart, namingRule, appendixString, reportToInfoWindow, abortOnFailure)`` 
        
        :param compOcc:  the selected component part occ  
        :type compOcc: :py:class:`NXOpen.Assemblies.Component` 
        :param motionPart:  the motion part which the mechanism objects are imported from  
        :type motionPart: :py:class:`NXOpen.Part` 
        :param workPart:  the current work part  
        :type workPart: :py:class:`NXOpen.Part` 
        :param namingRule:  enum to rule the naming behavior of the imported objects  
        :type namingRule: :py:class:`NXOpen.Motion.MechanismImportNamingRule` 
        :param appendixString:  string to add when NamingRule is AddPrefix or AddSuffix  
        :type appendixString: str 
        :param reportToInfoWindow:  Flag to report import status in the information window  
        :type reportToInfoWindow: bool 
        :param abortOnFailure:  Flag to rule whether to abort the process when there is error occurrs  
        :type abortOnFailure: bool 
        
        .. versionadded:: NX12.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    


class MotionManager():
    """
    A manager to deal with all motion objects   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Part`
    
    .. versionadded:: NX5.0.0
    """
    Joints: JointCollection = ...
    """
    Returns the :py:class:`NXOpen.Motion.JointCollection` belonging to this part 
    
    Signature ``Joints`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.JointCollection`
    """
    Links: LinkCollection = ...
    """
    Returns the :py:class:`NXOpen.Motion.LinkCollection` belonging to this part 
    
    Signature ``Links`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.LinkCollection`
    """
    JointDrivers: JointDriverCollection = ...
    """
    Returns the :py:class:`NXOpen.Motion.JointDriverCollection` belonging to this part 
    
    Signature ``JointDrivers`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.JointDriverCollection`
    """
    ScalarForces: ScalarForceCollection = ...
    """
    Returns the :py:class:`NXOpen.Motion.ScalarForceCollection` belonging to this part 
    
    Signature ``ScalarForces`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.ScalarForceCollection`
    """
    ScalarTorques: ScalarTorqueCollection = ...
    """
    Returns the :py:class:`NXOpen.Motion.ScalarTorqueCollection` belonging to this part 
    
    Signature ``ScalarTorques`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.ScalarTorqueCollection`
    """
    Graphs: GraphManager = ...
    """
    Returns the :py:class:`NXOpen.Motion.GraphManager` for this part
    
    Signature ``Graphs`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.GraphManager`
    """
    SignalCharts: SignalChartCollection = ...
    """
    Returns the :py:class:`Motion.SignalChartCollection` belonging to this part 
    
    Signature ``SignalCharts`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SignalChartCollection`
    """
    PMDCMotors: PMDCMotorCollection = ...
    """
    Returns the :py:class:`Motion.PMDCMotorCollection` belonging to this part 
    
    Signature ``PMDCMotors`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.PMDCMotorCollection`
    """
    MotionSolutions: MotionSolutionCollection = ...
    """
    Returns the :py:class:`NXOpen.Motion.MotionSolutionCollection` belonging to this part 
    
    Signature ``MotionSolutions`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.MotionSolutionCollection`
    """
    BodyContacts: BodyContactCollection = ...
    """
    Returns the :py:class:`NXOpen.Motion.BodyContactCollection` belonging to this part 
    
    Signature ``BodyContacts`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.BodyContactCollection`
    """
    CurveContacts: CurveContactCollection = ...
    """
    Returns the :py:class:`NXOpen.Motion.CurveContactCollection` belonging to this part 
    
    Signature ``CurveContacts`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.CurveContactCollection`
    """
    PointOnSurfaces: PointOnSurfaceCollection = ...
    """
    Returns the :py:class:`NXOpen.Motion.PointOnSurfaceCollection` belonging to this part 
    
    Signature ``PointOnSurfaces`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.PointOnSurfaceCollection`
    """
    PointOnCurves: PointOnCurveCollection = ...
    """
    Returns the :py:class:`NXOpen.Motion.PointOnCurveCollection` belonging to this part 
    
    Signature ``PointOnCurves`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.PointOnCurveCollection`
    """
    CurveOnCurves: CurveOnCurveCollection = ...
    """
    Returns the :py:class:`NXOpen.Motion.CurveOnCurveCollection` belonging to this part 
    
    Signature ``CurveOnCurves`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.CurveOnCurveCollection`
    """
    VectorForces: VectorForceCollection = ...
    """
    Returns the :py:class:`NXOpen.Motion.VectorForceCollection` belonging to this part 
    
    Signature ``VectorForces`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.VectorForceCollection`
    """
    VectorTorques: VectorTorqueCollection = ...
    """
    Returns the :py:class:`NXOpen.Motion.VectorTorqueCollection` belonging to this part 
    
    Signature ``VectorTorques`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.VectorTorqueCollection`
    """
    Couplers: CouplerCollection = ...
    """
    Returns the :py:class:`NXOpen.Motion.CouplerCollection` belonging to this part 
    
    Signature ``Couplers`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.CouplerCollection`
    """
    MotionSensors: MotionSensorCollection = ...
    """
    Returns the :py:class:`NXOpen.Motion.MotionSensorCollection` belonging to this part 
    
    Signature ``MotionSensors`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.MotionSensorCollection`
    """
    PlantOutputs: PlantOutputCollection = ...
    """
    Returns the :py:class:`NXOpen.Motion.PlantOutputCollection` belonging to this part 
    
    Signature ``PlantOutputs`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.PlantOutputCollection`
    """
    PlantInputs: PlantInputCollection = ...
    """
    Returns the :py:class:`NXOpen.Motion.PlantInputCollection` belonging to this part 
    
    Signature ``PlantInputs`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.PlantInputCollection`
    """
    Springs: SpringCollection = ...
    """
    Returns the :py:class:`NXOpen.Motion.SpringCollection` belonging to this part 
    
    Signature ``Springs`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SpringCollection`
    """
    Dampers: DamperCollection = ...
    """
    Returns the :py:class:`NXOpen.Motion.DamperCollection` belonging to this part 
    
    Signature ``Dampers`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.DamperCollection`
    """
    Bushings: BushingCollection = ...
    """
    Returns the :py:class:`NXOpen.Motion.BushingCollection` belonging to this part 
    
    Signature ``Bushings`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.BushingCollection`
    """
    FlexBodies: FlexBodyCollection = ...
    """
    Returns the :py:class:`NXOpen.Motion.FlexBodyCollection` belonging to this part 
    
    Signature ``FlexBodies`` 
    
    .. versionadded:: NX7.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.FlexBodyCollection`
    """
    GeneralCouplers: GeneralCouplerCollection = ...
    """
    Returns the :py:class:`NXOpen.Motion.GeneralCouplerCollection` belonging to this part 
    
    Signature ``GeneralCouplers`` 
    
    .. versionadded:: NX7.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.GeneralCouplerCollection`
    """
    LoadTransfers: LoadTransferCollection = ...
    """
    Returns the :py:class:`NXOpen.Motion.LoadTransferCollection` belonging to this part 
    
    Signature ``LoadTransfers`` 
    
    .. versionadded:: NX9.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.LoadTransferCollection`
    """
    AdoptionPairs: AdoptionPairCollection = ...
    """
    Returns the :py:class:`NXOpen.Motion.AdoptionManager`belonging to this part 
    
    Signature ``AdoptionPairs`` 
    
    .. versionadded:: NX11.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.AdoptionPairCollection`
    """
    ResultMeasures: ResultMeasureCollection = ...
    """
    Returns the :py:class:`NXOpen.Motion.ResultMeasureCollection` belonging to this part 
    
    Signature ``ResultMeasures`` 
    
    .. versionadded:: NX11.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.ResultMeasureCollection`
    """
    Roads: RoadCollection = ...
    """
    Returns the :py:class:`NXOpen.Motion.RoadCollection` for this part
    
    Signature ``Roads`` 
    
    .. versionadded:: NX11.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.RoadCollection`
    """
    ControlInputs: ControlInputCollection = ...
    """
    Returns the :py:class:`NXOpen.Motion.ControlInputCollection` belonging to this part 
    
    Signature ``ControlInputs`` 
    
    .. versionadded:: NX11.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.ControlInputCollection`
    """
    Tires: TireCollection = ...
    """
    Returns the :py:class:`NXOpen.Motion.TireCollection` belonging to this part 
    
    Signature ``Tires`` 
    
    .. versionadded:: NX11.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.TireCollection`
    """
    TirePropertiesFt: TirePropertyFtCollection = ...
    """
    Returns the :py:class:`NXOpen.Motion.TirePropertyFtCollection` belonging to this part 
    
    Signature ``TirePropertiesFt`` 
    
    .. versionadded:: NX11.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.TirePropertyFtCollection`
    """
    TirePropertiesTno: TirePropertyTnoCollection = ...
    """
    Returns the :py:class:`NXOpen.Motion.TirePropertyTnoCollection` belonging to this part 
    
    Signature ``TirePropertiesTno`` 
    
    .. versionadded:: NX11.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.TirePropertyTnoCollection`
    """
    TirePropertiesCd: TirePropertyCdCollection = ...
    """
    Returns the :py:class:`NXOpen.Motion.TirePropertyCdCollection` belonging to this part 
    
    Signature ``TirePropertiesCd`` 
    
    .. versionadded:: NX11.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.TirePropertyCdCollection`
    """
    ControlOutputs: ControlOutputCollection = ...
    """
    Returns the :py:class:`NXOpen.Motion.ControlOutputCollection` belonging to this part 
    
    Signature ``ControlOutputs`` 
    
    .. versionadded:: NX11.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.ControlOutputCollection`
    """
    Mechatronics: MechatronicsCollection = ...
    """
    Returns the :py:class:`NXOpen.Motion.MechatronicsCollection`belonging to this part 
    
    Signature ``Mechatronics`` 
    
    .. versionadded:: NX11.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.MechatronicsCollection`
    """
    LinkDrivers: LinkDriverCollection = ...
    """
    Returns the :py:class:`NXOpen.Motion.LinkDriverCollection` belonging to this part 
    
    Signature ``LinkDrivers`` 
    
    .. versionadded:: NX11.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.LinkDriverCollection`
    """
    TirePropertiesBasic: TirePropertyBasicCollection = ...
    """
    Returns the :py:class:`NXOpen.Motion.TirePropertyBasicCollection` belonging to this part 
    
    Signature ``TirePropertiesBasic`` 
    
    .. versionadded:: NX11.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.TirePropertyBasicCollection`
    """
    TirePropertiesMotorcycle: TirePropertyMotorcycleCollection = ...
    """
    Returns the :py:class:`NXOpen.Motion.TirePropertyMotorcycleCollection` belonging to this part 
    
    Signature ``TirePropertiesMotorcycle`` 
    
    .. versionadded:: NX11.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.TirePropertyMotorcycleCollection`
    """
    TirePropertiesNonInertial: TirePropertyNonInertialCollection = ...
    """
    Returns the :py:class:`NXOpen.Motion.TirePropertyNonInertialCollection` belonging to this part 
    
    Signature ``TirePropertiesNonInertial`` 
    
    .. versionadded:: NX11.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.TirePropertyNonInertialCollection`
    """
    LinkCouplers: LinkCouplerCollection = ...
    """
    Returns the :py:class:`Motion.LinkCouplerCollection` belonging to this part 
    
    Signature ``LinkCouplers`` 
    
    .. versionadded:: NX12.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.LinkCouplerCollection`
    """
    AnalyticalContacts: AnalyticalContactCollection = ...
    """
    Returns the :py:class:`Motion.AnalyticalContactCollection` belonging to this part 
    
    Signature ``AnalyticalContacts`` 
    
    .. versionadded:: NX12.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.AnalyticalContactCollection`
    """
    AnalyticalContactPropertys: AnalyticalContactPropertyCollection = ...
    """
    Returns the :py:class:`Motion.AnalyticalContactPropertyCollection` belonging to this part 
    
    Signature ``AnalyticalContactPropertys`` 
    
    .. versionadded:: NX12.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.AnalyticalContactPropertyCollection`
    """
    FieldDatas: FieldDataCollection = ...
    """
    Returns the :py:class:`Motion.FieldDataCollection` belonging to this part 
    
    Signature ``FieldDatas`` 
    
    .. versionadded:: NX11.0.1
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.FieldDataCollection`
    """
    TextBasedElements: TextBasedElementCollection = ...
    """
    Returns the :py:class:`Motion.TextBasedElementCollection` belonging to this part 
    
    Signature ``TextBasedElements`` 
    
    .. versionadded:: NX12.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.TextBasedElementCollection`
    """
    SplineBeams: SplineBeamCollection = ...
    """
    Returns the :py:class:`Motion.SplineBeamCollection` belonging to this part 
    
    Signature ``SplineBeams`` 
    
    .. versionadded:: NX12.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SplineBeamCollection`
    """
    SplineBeamProperties: SplineBeamPropertyCollection = ...
    """
    Returns the :py:class:`Motion.SplineBeamPropertyCollection` belonging to this part 
    
    Signature ``SplineBeamProperties`` 
    
    .. versionadded:: NX12.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SplineBeamPropertyCollection`
    """
    BeamForces: BeamForceCollection = ...
    """
    Returns the :py:class:`Motion.BeamForceCollection` belonging to this part 
    
    Signature ``BeamForces`` 
    
    .. versionadded:: NX12.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.BeamForceCollection`
    """
    SubmechanismPositioners: SubmechanismPositionerCollection = ...
    """
    Returns the :py:class:`Motion.SubmechanismPositionerCollection` belonging to this part 
    
    Signature ``SubmechanismPositioners`` 
    
    .. versionadded:: NX12.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SubmechanismPositionerCollection`
    """
    BeamSections: BaseSectionCollection = ...
    """
    Returns the :py:class:`Motion.BaseSectionCollection` belonging to this part 
    
    Signature ``BeamSections`` 
    
    .. versionadded:: NX12.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.BaseSectionCollection`
    """


class LinkCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of motion joints   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Motion.MotionManager`
    
    .. versionadded:: NX5.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateLinkBuilder(self, link: Link) -> LinkBuilder:
        """
        Creates a :py:class:`NXOpen.Motion.LinkBuilder`  
        
        Signature ``CreateLinkBuilder(link)`` 
        
        :param link:  :py:class:`NXOpen.Motion.Link` to be edited, if None then create a new one  
        :type link: :py:class:`NXOpen.Motion.Link` 
        :returns: 
        :rtype: :py:class:`NXOpen.Motion.LinkBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def CreateFixedJoint(self, link: Link) -> Joint:
        """
        Creates a :py:class:`NXOpen.Motion.Joint`  
        
        Signature ``CreateFixedJoint(link)`` 
        
        :param link:  :py:class:`NXOpen.Motion.Link` to be used to create relate fixed joint  
        :type link: :py:class:`NXOpen.Motion.Link` 
        :returns: 
        :rtype: :py:class:`NXOpen.Motion.Joint` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def FindObject(self, name: str) -> Link:
        """
        Finds the :py:class:`NXOpen.Motion.Link` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Motion.Link`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Motion.Link` with this name.  
        :rtype: :py:class:`NXOpen.Motion.Link` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    


class TirePropertyNonInertialBuilder(TirePropertyBuilder):
    """
    Represents a builder for a Non-inertial Tire Property   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Motion.TirePropertyNonInertialCollection.CreateTirePropertyNonInertialBuilder`
    
    Default values.
    
    ===========================  =======================================================
    Property                     Value
    ===========================  =======================================================
    AligningMomentArm.Value      0.0 (millimeters part), 0.0 (inches part) 
    ---------------------------  -------------------------------------------------------
    CorneringStiffness.Value     1000000.0 (millimeters part), 224808.944 (inches part) 
    ---------------------------  -------------------------------------------------------
    DistributedContact           0 
    ---------------------------  -------------------------------------------------------
    FrictionCoefficient.Value    1.0 (millimeters part), 1.0 (inches part) 
    ---------------------------  -------------------------------------------------------
    NumDivisions.Value           1 (millimeters part), 1 (inches part) 
    ---------------------------  -------------------------------------------------------
    Radius.Value                 300.0 (millimeters part), 11.811 (inches part) 
    ---------------------------  -------------------------------------------------------
    RollingResistance.Value      0.0 (millimeters part), 0.0 (inches part) 
    ---------------------------  -------------------------------------------------------
    StaticHold                   1 
    ---------------------------  -------------------------------------------------------
    VerticalDamping.Value        0.0 (millimeters part), 0.0 (inches part) 
    ---------------------------  -------------------------------------------------------
    VerticalStiffness.DataType   Expression 
    ===========================  =======================================================
    
    .. versionadded:: NX11.0.0
    """
    AligningMomentArm: NXOpen.Expression = ...
    """
    Returns  the aligning moment arm.  
    
    It is produced about the tire vertical axis using this coefficient and the lateral force acting at the tire/road interface.
    
    <hr>
    
    Getter Method
    
    Signature ``AligningMomentArm`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    CorneringStiffness: NXOpen.Expression = ...
    """
    Returns  the cornering stiffness constant
    
    <hr>
    
    Getter Method
    
    Signature ``CorneringStiffness`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    DistributedContact: bool = ...
    """
    Returns or sets  the distributed contact.  
    
    If true, the Number of Divisions will be exported with a value required to be higher than 1 , otherwise a value of 0 will be exported to the solver. 
    
    <hr>
    
    Getter Method
    
    Signature ``DistributedContact`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``DistributedContact`` 
    
    :param inValue: 
    :type inValue: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    FrictionCoefficient: NXOpen.Expression = ...
    """
    Returns  the friction coefficient between the tire and road.  
    
    Should be greater than or equal to zero. 
    
    <hr>
    
    Getter Method
    
    Signature ``FrictionCoefficient`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Name: str = ...
    """
    Returns or sets  the unique name of the tire property.  
    
    This must be set after this builder is attached to its owner.
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    NumDivisions: NXOpen.Expression = ...
    """
    Returns  the number of divisions.  
    
    When the distributed contact normal force model is to be used, 
    this variable should be set to the number of vertical "slices" into which the tire is divided.
    If a simple "point-contact" normal force model is desired, this variable should be set to zero.
    The distributed contact model should be used when the road profile contains abrupt changes. 
    NumDivisions should be set high enough so that each "slice" is smaller than the smallest road profile feature. 
    
    <hr>
    
    Getter Method
    
    Signature ``NumDivisions`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Radius: NXOpen.Expression = ...
    """
    Returns  the radius.  
    
    <hr>
    
    Getter Method
    
    Signature ``Radius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    RollingResistance: NXOpen.Expression = ...
    """
    Returns  the rolling resistance coefficient of the tire.  
    
    It is used to calculate a force as a function of the normal force.
    This adds to the longitudinal force acting as the tire/road interface. 
    This represents parasitic longitudinal force due to carcass deformation losses, bearing friction, etc., as a fraction of normal force. 
    
    <hr>
    
    Getter Method
    
    Signature ``RollingResistance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    StaticHold: bool = ...
    """
    Returns or sets  the static hold.  
    
    it controls whether or not the tire should generate holding forces during static or quasistatic analysis.
    When this parameter is true, the tire will generate the following fictitious forces during static analysis,
    or during the static phase of STATIC/DYNAMIC analysis (see the System Data and Static elements documentation for more details).
    First, a torque is applied to the chassis to introduce stiffness for vehicle yaw motion.
    Finally, forces are applied in the fore-aft and lateral chassis directions in order to prevent equilibrium problems.
    Disabling these forces may cause the static analysis to fail. If the vehicle is on a flat road,
    then the fictitious forces will yield a physically meaningful static vehicle position. These forces attempt to keep the tire spin angle, 
    chassis lateral/longitudinal postion at their initial values. 
    
    <hr>
    
    Getter Method
    
    Signature ``StaticHold`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``StaticHold`` 
    
    :param inValue: 
    :type inValue: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    VerticalDamping: NXOpen.Expression = ...
    """
    Returns  the vertical damping.  
    
    It is used in the normal force calculation. 
    A vertical damping coefficient defines the normal force due to vertical deflection velocity. 
    
    <hr>
    
    Getter Method
    
    Signature ``VerticalDamping`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    VerticalStiffness: ExpressionFunctionBuilder = ...
    """
    Returns  the vertical stiffness.  
    
    It is specified as an :py:class:`ExpressionFunctionBuilder`, depening on the type a constant (expression) or a function will be used.
    It is the tire stiffness normal to the road profile. 
    Vertical stiffness defines tire normal force as a linear (if a constant is selected) or a non-linear (if a function is selected) function of vertical deflection.
    
    <hr>
    
    Getter Method
    
    Signature ``VerticalStiffness`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.ExpressionFunctionBuilder` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: TirePropertyNonInertialBuilder = ...  # unknown typename


class TirePropertyBasicParametersCorneringTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TirePropertyBasicParametersCorneringType():
    """
    A constant will be used for the Cornering Stiffness when CorneringType is 'Cornering'.
    When CorneringType is 'Carpet', a surface will be used from a data table file.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Cornering", " - "
       "Carpet", " - "
    """
    Cornering = 0  # TirePropertyBasicParametersCorneringTypeMemberType
    Carpet = 1  # TirePropertyBasicParametersCorneringTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TirePropertyBasicParameters(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a TirePropertyBasicParameters builder   
    
    .. versionadded:: NX11.0.0
    """
    
    class CorneringType():
        """
        A constant will be used for the Cornering Stiffness when CorneringType is 'Cornering'.
        When CorneringType is 'Carpet', a surface will be used from a data table file.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Cornering", " - "
           "Carpet", " - "
        """
        Cornering = 0  # TirePropertyBasicParametersCorneringTypeMemberType
        Carpet = 1  # TirePropertyBasicParametersCorneringTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    CorneringStiffness: NXOpen.Expression = ...
    """
    Returns  the cornering stiffness constant
    This parameter is only used in the :py:class:`Motion.TirePropertyBasic`.  
    
    <hr>
    
    Getter Method
    
    Signature ``CorneringStiffness`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    CorneringTableFile: str = ...
    """
    Returns or sets  the cornering table file.  
    
    This parameter is only used by the :py:class:`Motion.TirePropertyBasic`(LMS) Tire Property.
    It is used to input the tire lateral force as a function of the steer slip angle and normal force. 
    For a "spline explicit" type curve, X is the slip angle, Y is the normal force, and Z is the lateral forces.
    It is given as a data file.
    
    <hr>
    
    Getter Method
    
    Signature ``CorneringTableFile`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``CorneringTableFile`` 
    
    :param fileName: 
    :type fileName: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    CorneringTableProfile: SelectFieldData = ...
    """
    Returns  the cornering table profile.  
    
    <hr>
    
    Getter Method
    
    Signature ``CorneringTableProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.SelectFieldData` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    FrictionCoefficient: NXOpen.Expression = ...
    """
    Returns  the friction coefficient between the tire and road.  
    
    Should be greater than or equal to zero. 
    
    <hr>
    
    Getter Method
    
    Signature ``FrictionCoefficient`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    LateralForceType: TirePropertyBasicParametersCorneringType = ...
    """
    Returns or sets  the lateral force (cornering) type.  
    
    This parameter is only used by the :py:class:`Motion.TirePropertyBasic` class.
    
    <hr>
    
    Getter Method
    
    Signature ``LateralForceType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.TirePropertyBasicParametersCorneringType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``LateralForceType`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Motion.TirePropertyBasicParametersCorneringType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    MagicFile: str = ...
    """
    Returns or sets  the magic file.  
    
    This parameter is used only by the :py:class:`Motion.TirePropertyMotorcycle`.
    
    A file containing coefficients for the Magic Formula formulation of lateral force,
    aligning torque, and longitudinal force. The coefficients are entered in free format, 
    one-per-line, with the coefficient name first, followed by the value.
    Blank lines and lines starting with a semicolon (;) or asterisk (*) are ignored.
    The coefficient names are a single letter (A, B, or C) followed by a one-or two-digit suffix.
    The values presently used are A0 through A19, B0 through B13, and C0 through C26.
    The meaning of each coefficient is explained in the section on lateral force above.
    In addition, several constants can be defined to perform conversions from Simcenter
    model units to Magic Formula units. KFN converts normal force values, KSS converts steerslip values,
    KRS converts steerslip values, KCAM converts camber values, KFRC converts output force values,
    and KTRQ converts output torque values. For instance, a KSS value of 57.2958 might be used to
    convert a steerslip angle (calculated in radians) to a Magic Formula steerslip angle (in degrees).
    Likewise, a KTRQ value of 0.11302344 might be used to convert a Magic Formula output torque (calculated in N-m)
    to a Simcenter torque (in in-lb). Regardless of its use, the constant always represents the conversion
    factor to Magic Formula units.
    Example: The following set of lines are valid;
    This is an example lateral force coefficient
    A10 1.234
    * This is an example longitudinal force coefficient
    B2 5.678E-3
    This is an example aligning torque coefficient
    C24 9.0
    * This is an example conversion factor, converting Simcenter normal forces (lb) to Magic Formula normal forces (kN)
    KFN 4.449741738D-3
    
    <hr>
    
    Getter Method
    
    Signature ``MagicFile`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``MagicFile`` 
    
    :param fileName: 
    :type fileName: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Name: str = ...
    """
    Returns or sets  the unique name of the tire property.  
    
    This must be set after this builder is attached to its owner.
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Radius: NXOpen.Expression = ...
    """
    Returns  the radius.  
    
    <hr>
    
    Getter Method
    
    Signature ``Radius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    RollingResistance: NXOpen.Expression = ...
    """
    Returns  the rolling resistance coefficient of the tire.  
    
    It is used to calculate a force as a function of the normal force.
    This adds to the longitudinal force acting as the tire/road interface. 
    This represents parasitic longitudinal force due to carcass deformation losses, bearing friction, etc., as a fraction of normal force. 
    
    <hr>
    
    Getter Method
    
    Signature ``RollingResistance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    VerticalDamping: ExpressionFunctionBuilder = ...
    """
    Returns  the vertical damping.  
    
    It is used in the normal force calculation. 
    It is specified as an :py:class:`ExpressionFunctionBuilder`, depening on the type a constant (expression) or a function will be used.
    A vertical damping coefficient defines the normal force due to vertical deflection velocity. 
    
    <hr>
    
    Getter Method
    
    Signature ``VerticalDamping`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.ExpressionFunctionBuilder` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    VerticalStiffness: ExpressionFunctionBuilder = ...
    """
    Returns  the vertical stiffness.  
    
    It is specified as an :py:class:`ExpressionFunctionBuilder`, depening on the type a constant (expression) or a function will be used.
    It is the tire stiffness normal to the road profile. 
    Vertical stiffness defines tire normal force as a linear (if a constant is selected) or a non-linear (if a function is selected) function of vertical deflection.
    
    <hr>
    
    Getter Method
    
    Signature ``VerticalStiffness`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Motion.ExpressionFunctionBuilder` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: mechanisms ("MECHANISMS")
    """
    Null: TirePropertyBasicParameters = ...  # unknown typename


